title: library
fields:

- name: agent
  description: 'The agent fields contain the data about the software entity, if any,
    that collects, detects, or observes events on a host, or takes measurements on
    a host.

    Examples include Beats. Agents may also run on observers. ECS agent.* fields shall
    be populated with details of the agent running on the host or observer where the
    event happened or the measurement was taken.'
  fields:

  - name: id
    type: keyword
    description: 'Unique identifier of this agent (if one exists).

      Example: For Beats this would be beat.id.'
    example: 8a4f500d

  - name: type
    type: keyword
    description: 'Type of the agent.

      The agent type stays always the same and should be given by the agent used.
      In case of Filebeat the agent would always be Filebeat also if two Filebeat
      instances are run on the same machine.'
    example: filebeat

  - name: version
    type: keyword
    description: Version of the agent.
    example: 6.0.0-rc2

- name: '@timestamp'
  type: date
  description: 'Date/time when the event originated.

    This is the date/time extracted from the event, typically representing when the
    event was generated by the source.

    If the event source has no original timestamp, this value is typically populated
    by the first time the event was received by the pipeline.

    Required field for all events.'
  example: '2016-05-23T08:05:34.853Z'

- name: message
  type: text
  description: 'For log events the message field contains the log message, optimized
    for viewing in a log viewer.

    For structured logs without an original message field, other fields can be concatenated
    to form a human-readable summary of the event.

    If multiple messages exist, they can be combined into one message.'
  example: Hello World

- name: dll
  description: 'These fields contain information about code libraries dynamically
    loaded into processes.


    Many operating systems refer to "shared code libraries" with different names,
    but this field set refers to all of the following:

    * Dynamic-link library (`.dll`) commonly used on Windows

    * Shared Object (`.so`) commonly used on Unix-like operating systems

    * Dynamic library (`.dylib`) commonly used on macOS'
  fields:

  - name: code_signature
    description: These fields contain information about binary code signatures.
    fields:

    - name: status
      type: keyword
      description: 'Additional information about the certificate status.

        This is useful for logging cryptographic errors with the certificate validity
        or trust status. Leave unpopulated if the validity or trust of the certificate
        was unchecked.'
      example: ERROR_UNTRUSTED_ROOT

    - name: subject_name
      type: keyword
      description: Subject name of the code signer
      example: Microsoft Corporation

  - name: pe
    description: These fields contain Windows Portable Executable (PE) metadata.
    fields:

    - name: file_version
      type: keyword
      description: Internal version of the file, provided at compile-time.
      example: 6.3.9600.17415

    - name: original_file_name
      type: keyword
      description: Internal name of the file, provided at compile-time.
      example: MSPAINT.EXE

    - name: product
      type: keyword
      description: Internal product name of the file, provided at compile-time.
      example: "Microsoft\xAE Windows\xAE Operating System"

- name: ecs
  description: Meta-information specific to ECS.
  fields:

  - name: version
    type: keyword
    description: 'ECS version this event conforms to. `ecs.version` is a required
      field and must exist in all events.

      When querying across multiple indices -- which may conform to slightly different
      ECS versions -- this field lets integrations adjust to the schema version of
      the events.'
    example: 1.0.0

- name: endpoint
  description: Endpoint custom fields.
  fields:

  - name: group
    description: Extended "group" field set
    fields:

    - name: real
      description: Group info prior to any setgid operations.
      fields:

      - name: id
        type: keyword
        description: Unique identifier for the group on the system/platform.

      - name: name
        type: keyword
        description: Name of the group.

  - name: user
    description: Extended "user" field set
    fields:

    - name: real
      description: User info prior to any setuid operations.
      fields:

      - name: id
        type: keyword
        description: One or multiple unique identifiers of the user.

      - name: name
        type: keyword
        description: Short name or login of the user.

- name: event
  description: 'The event fields are used for context information about the log or
    metric event itself.

    A log is defined as an event containing details of something that happened. Log
    events must include the time at which the thing happened. Examples of log events
    include a process starting on a host, a network packet being sent from a source
    to a destination, or a network connection between a client and a server being
    initiated or closed. A metric is defined as an event containing one or more numerical
    or categorical measurements and the time at which the measurement was taken. Examples
    of metric events include memory pressure measured on a host, or vulnerabilities
    measured on a scanned host.'
  fields:

  - name: action
    type: keyword
    description: 'The action captured by the event.

      This describes the information in the event. It is more specific than `event.category`.
      Examples are `group-add`, `process-started`, `file-created`. The value is normally
      defined by the implementer.'
    example: user-password-change

  - name: category
    type: keyword
    description: 'This is one of four ECS Categorization Fields, and indicates the
      second level in the ECS category hierarchy.

      `event.category` represents the "big buckets" of ECS categories. For example,
      filtering on `event.category:process` yields all events relating to process
      activity. This field is closely related to `event.type`, which is used as a
      subcategory.

      This field is an array. This will allow proper categorization of some events
      that fall in multiple categories.'
    example: authentication

  - name: id
    type: keyword
    description: Unique ID to describe the event.
    example: 8a4f500d

  - name: kind
    type: keyword
    description: 'This is one of four ECS Categorization Fields, and indicates the
      highest level in the ECS category hierarchy.

      `event.kind` gives high-level information about what type of information the
      event contains, without being specific to the contents of the event. For example,
      values of this field distinguish alert events from metric events.

      The value of this field can be used to inform how these kinds of events should
      be handled. They may warrant different retention, different access control,
      it may also help understand whether the data coming in at a regular interval
      or not.'
    example: alert

  - name: module
    type: keyword
    description: 'Name of the module this data is coming from.

      If your monitoring agent supports the concept of modules or plugins to process
      events of a given source (e.g. Apache logs), `event.module` should contain the
      name of this module.'
    example: apache

  - name: type
    type: keyword
    description: 'This is one of four ECS Categorization Fields, and indicates the
      third level in the ECS category hierarchy.

      `event.type` represents a categorization "sub-bucket" that, when used along
      with the `event.category` field values, enables filtering events down to a level
      appropriate for single visualization.

      This field is an array. This will allow proper categorization of some events
      that fall in multiple event types.'

- name: file
  description: 'A file is defined as a set of information that has been created on,
    or has existed on a filesystem.

    File objects can be associated with host events, network events, and/or file events
    (e.g., those produced by File Integrity Monitoring [FIM] products or services).
    File fields provide details about the affected file associated with the event
    or metric.'
  fields:

  - name: hash
    description: 'The hash fields represent different hash algorithms and their values.

      Field names for common hashes (e.g. MD5, SHA1) are predefined. Add fields for
      other hashes by lowercasing the hash algorithm name and using underscore separators
      as appropriate (snake case, e.g. sha3_512).'
    fields:

    - name: md5
      type: keyword
      description: MD5 hash.

    - name: sha1
      type: keyword
      description: SHA1 hash.

    - name: sha256
      type: keyword
      description: SHA256 hash.

  - name: name
    type: keyword
    description: Name of the file including the extension, without the directory.
    example: example.png

  - name: path
    type: keyword
    description: Full path to the file, including the file name. It should include
      the drive letter, when appropriate.
    example: /home/alice/example.png

- name: group
  description: The group fields are meant to represent groups that are relevant to
    the event.
  fields:

  - name: id
    type: keyword
    description: Unique identifier for the group on the system/platform.

  - name: name
    type: keyword
    description: Name of the group.

- name: host
  description: 'A host is defined as a general computing instance.

    ECS host.* fields should be populated with details about the host on which the
    event happened, or from which the measurement was taken. Host types include hardware,
    virtual machines, Docker containers, and Kubernetes nodes.'
  fields:

  - name: geo
    description: 'Geo fields can carry data about a specific location related to an
      event.

      This geolocation information can be derived from techniques such as Geo IP,
      or be user-supplied.'
    fields:

    - name: city_name
      type: keyword
      description: City name.
      example: Montreal

    - name: continent_name
      type: keyword
      description: Name of the continent.
      example: North America

    - name: country_iso_code
      type: keyword
      description: Country ISO code.
      example: CA

    - name: country_name
      type: keyword
      description: Country name.
      example: Canada

    - name: location
      type: geo_point
      description: Longitude and latitude.
      example: '{ "lon": -73.614830, "lat": 45.505918 }'

    - name: region_iso_code
      type: keyword
      description: Region ISO code.
      example: CA-QC

    - name: region_name
      type: keyword
      description: Region name.
      example: Quebec

  - name: hostname
    type: keyword
    description: 'Hostname of the host.

      It normally contains what the `hostname` command returns on the host machine.'

  - name: ip
    type: ip
    description: Host ip addresses.

  - name: name
    type: keyword
    description: 'Name of the host.

      It can contain what `hostname` returns on Unix systems, the fully qualified
      domain name, or a name specified by the user. The sender decides which value
      to use.'

  - name: os
    description: The OS fields contain information about the operating system.
    fields:

    - name: name
      type: keyword
      description: Operating system name, without the version.
      example: Mac OS X

    - name: platform
      type: keyword
      description: Operating system platform (such centos, ubuntu, windows).
      example: darwin

    - name: version
      type: keyword
      description: Operating system version as a raw string.
      example: 10.14.1

- name: process
  description: 'These fields contain information about a process.

    These fields can help you correlate metrics information with a process id/name
    from a log message.  The `process.pid` often stays in the metric itself and is
    copied to the global field for correlation.'
  fields:

  - name: entity_id
    type: keyword
    description: 'Unique identifier for the process.

      The implementation of this is specified by the data source, but some examples
      of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
      or a hash of some uniquely identifying components of a process.

      Constructing a globally unique identifier is a common practice to mitigate PID
      reuse as well as to identify a specific process over time, across multiple monitored
      hosts.'
    example: c2c455d9f99375d

  - name: executable
    type: keyword
    description: Absolute path to the process executable.
    example: /usr/bin/ssh

  - name: name
    type: keyword
    description: 'Process name.

      Sometimes called program name or similar.'
    example: ssh

  - name: pid
    type: long
    description: Process id.
    example: 4242

  - name: thread
    description: The thread fields are used to describe by which process thread the
      event belongs to.
    fields:

    - name: id
      type: long
      description: Thread ID.
      example: 4242

- name: user
  description: 'The user fields describe information about the user that is relevant
    to the event.

    Fields can have one entry or multiple entries. If a user has more than one id,
    provide an array that includes all of them.'
  fields:

  - name: domain
    type: keyword
    description: 'Name of the directory the user is a member of.

      For example, an LDAP or Active Directory domain name.'

  - name: id
    type: keyword
    description: Unique identifiers of the user.

  - name: name
    type: keyword
    description: Short name or login of the user.
    example: albert
