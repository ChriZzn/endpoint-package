agent:
  description: 'The agent fields contain the data about the software entity, if any,
    that collects, detects, or observes events on a host, or takes measurements on
    a host.

    Examples include Beats. Agents may also run on observers. ECS agent.* fields shall
    be populated with details of the agent running on the host or observer where the
    event happened or the measurement was taken.'
  fields:
    ephemeral_id:
      description: 'Ephemeral identifier of this agent (if one exists).

        This id normally changes across restarts, but `agent.id` does not.'
      type: keyword
    id:
      description: 'Unique identifier of this agent (if one exists).

        Example: For Beats this would be beat.id.'
      type: keyword
    name:
      description: 'Custom name of the agent.

        This is a name that can be given to an agent. This can be helpful if for example
        two Filebeat instances are running on the same host but a human readable separation
        is needed on which Filebeat instance data is coming from.

        If no name is given, the name is often left empty.'
      type: keyword
    type:
      description: 'Type of the agent.

        The agent type stays always the same and should be given by the agent used.
        In case of Filebeat the agent would always be Filebeat also if two Filebeat
        instances are run on the same machine.'
      type: keyword
    version:
      description: Version of the agent.
      type: keyword
  footnote: 'Examples: In the case of Beats for logs, the agent.name is filebeat.
    For APM, it is the agent running in the app/service. The agent information does
    not change if data is sent through queuing systems like Kafka, Redis, or processing
    systems such as Logstash or APM Server.'
  group: 2
  name: agent
  prefix: agent.
  short: Fields about the monitoring agent.
  title: Agent
  type: group
base:
  description: The `base` field set contains all fields which are on the top level.
    These fields are common across all types of events.
  fields:
    '@timestamp':
      description: 'Date/time when the event originated.

        This is the date/time extracted from the event, typically representing when
        the event was generated by the source.

        If the event source has no original timestamp, this value is typically populated
        by the first time the event was received by the pipeline.

        Required field for all events.'
      type: date
  group: 1
  name: base
  prefix: ''
  root: true
  short: All fields defined directly at the top level
  title: Base
  type: group
dll:
  description: 'These fields contain information about code libraries dynamically
    loaded into processes.


    Many operating systems refer to "shared code libraries" with different names,
    but this field set refers to all of the following:

    * Dynamic-link library (`.dll`) commonly used on Windows

    * Shared Object (`.so`) commonly used on Unix-like operating systems

    * Dynamic library (`.dylib`) commonly used on macOS'
  fields:
    code_signature.exists:
      description: Boolean to capture if a signature is present.
      type: boolean
    code_signature.status:
      description: 'Additional information about the certificate status.

        This is useful for logging cryptographic errors with the certificate validity
        or trust status. Leave unpopulated if the validity or trust of the certificate
        was unchecked.'
      type: keyword
    code_signature.subject_name:
      description: Subject name of the code signer
      type: keyword
    code_signature.trusted:
      description: 'Stores the trust status of the certificate chain.

        Validating the trust of the certificate chain may be complicated, and this
        field should only be populated by tools that actively check the status.'
      type: boolean
    code_signature.valid:
      description: 'Boolean to capture if the digital signature is verified against
        the binary content.

        Leave unpopulated if a certificate was unchecked.'
      type: boolean
    compile_time:
      description: Timestamp from when the module was compiled.
      type: date
    hash.md5:
      description: MD5 hash.
      type: keyword
    hash.sha1:
      description: SHA1 hash.
      type: keyword
    hash.sha256:
      description: SHA256 hash.
      type: keyword
    hash.sha512:
      description: SHA512 hash.
      type: keyword
    malware_classification.features.data.buffer:
      description: The features extracted from this file and evaluated by the model.  Usually
        an array of floats.  Likely zlib-encoded.
      type: keyword
    malware_classification.features.data.decompressed_size:
      description: The decompressed size of buffer.
      type: integer
    malware_classification.features.data.encoding:
      description: The encoding of buffer (e.g. zlib).
      type: keyword
    malware_classification.identifier:
      description: The model's unique identifier.
      type: keyword
    malware_classification.score:
      description: The score produced by the classification model.
      type: double
    malware_classification.threshold:
      description: The score threshold for the model.  Files that score above this
        threshold are considered malicious.
      type: double
    malware_classification.upx_packed:
      description: Whether UPX packing was detected.
      type: boolean
    malware_classification.version:
      description: The version of the model used.
      type: keyword
    mapped_address:
      description: TODO
      type: keyword
    mapped_size:
      description: TODO
      type: long
    name:
      description: 'Name of the library.

        This generally maps to the name of the file on disk.'
      type: keyword
    path:
      description: Full file path of the library.
      type: keyword
    pe.company:
      description: Internal company name of the file, provided at compile-time.
      type: keyword
    pe.description:
      description: Internal description of the file, provided at compile-time.
      type: keyword
    pe.file_version:
      description: Internal version of the file, provided at compile-time.
      type: keyword
    pe.original_file_name:
      description: Internal name of the file, provided at compile-time.
      type: keyword
    pe.product:
      description: Internal product name of the file, provided at compile-time.
      type: keyword
  group: 2
  name: dll
  nestings:
  - code_signature
  - hash
  - malware_classification
  - pe
  prefix: dll.
  reusable:
    expected:
    - target
    top_level: true
  short: These fields contain information about code libraries dynamically loaded
    into processes.
  title: DLL
  type: group
ecs:
  description: Meta-information specific to ECS.
  fields:
    version:
      description: 'ECS version this event conforms to. `ecs.version` is a required
        field and must exist in all events.

        When querying across multiple indices -- which may conform to slightly different
        ECS versions -- this field lets integrations adjust to the schema version
        of the events.'
      type: keyword
  group: 2
  name: ecs
  prefix: ecs.
  short: Meta-information specific to ECS.
  title: ECS
  type: group
endpoint:
  description: Fields describing the state of the Elastic Endpoint when an event occurs.
  fields:
    artifact.hash:
      description: Hash of artifact in use by endpoint when event was created.
      type: keyword
    artifact.name:
      description: Name of artifact in use by endpoint when event was created.
      type: keyword
    artifact.version:
      description: Version of artifact in use by endpoint when event was created.
      type: keyword
    policy.id:
      description: ID of the policy that was active when the event was created.
      type: keyword
  group: 2
  name: endpoint
  prefix: endpoint.
  short: Fields describing the state of the Elastic Endpoint when an event occurs.
  title: Endpoint
  type: group
event:
  description: 'The event fields are used for context information about the log or
    metric event itself.

    A log is defined as an event containing details of something that happened. Log
    events must include the time at which the thing happened. Examples of log events
    include a process starting on a host, a network packet being sent from a source
    to a destination, or a network connection between a client and a server being
    initiated or closed. A metric is defined as an event containing one or more numerical
    or categorical measurements and the time at which the measurement was taken. Examples
    of metric events include memory pressure measured on a host, or vulnerabilities
    measured on a scanned host.'
  fields:
    action:
      description: 'The action captured by the event.

        This describes the information in the event. It is more specific than `event.category`.
        Examples are `group-add`, `process-started`, `file-created`. The value is
        normally defined by the implementer.'
      type: keyword
    category:
      description: 'This is one of four ECS Categorization Fields, and indicates the
        second level in the ECS category hierarchy.

        `event.category` represents the "big buckets" of ECS categories. For example,
        filtering on `event.category:process` yields all events relating to process
        activity. This field is closely related to `event.type`, which is used as
        a subcategory.

        This field is an array. This will allow proper categorization of some events
        that fall in multiple categories.'
      type: keyword
    created:
      description: 'event.created contains the date/time when the event was first
        read by an agent, or by your pipeline.

        This field is distinct from @timestamp in that @timestamp typically contain
        the time extracted from the original event.

        In most situations, these two timestamps will be slightly different. The difference
        can be used to calculate the delay between your source generating an event,
        and the time when your agent first processed it. This can be used to monitor
        your agent''s or pipeline''s ability to keep up with your event source.

        In case the two timestamps are identical, @timestamp should be used.'
      type: date
    dataset:
      description: 'Name of the dataset.

        If an event source publishes more than one type of log or events (e.g. access
        log, error log), the dataset is used to specify which one the event comes
        from.

        It''s recommended but not required to start the dataset name with the module
        name, followed by a dot, then the dataset name.'
      type: keyword
    hash:
      description: Hash (perhaps logstash fingerprint) of raw field to be able to
        demonstrate log integrity.
      type: keyword
    id:
      description: Unique ID to describe the event.
      type: keyword
    ingested:
      description: 'Timestamp when an event arrived in the central data store.

        This is different from `@timestamp`, which is when the event originally occurred.  It''s
        also different from `event.created`, which is meant to capture the first time
        an agent saw the event.

        In normal conditions, assuming no tampering, the timestamps should chronologically
        look like this: `@timestamp` < `event.created` < `event.ingested`.'
      type: date
    kind:
      description: 'This is one of four ECS Categorization Fields, and indicates the
        highest level in the ECS category hierarchy.

        `event.kind` gives high-level information about what type of information the
        event contains, without being specific to the contents of the event. For example,
        values of this field distinguish alert events from metric events.

        The value of this field can be used to inform how these kinds of events should
        be handled. They may warrant different retention, different access control,
        it may also help understand whether the data coming in at a regular interval
        or not.'
      type: keyword
    module:
      description: 'Name of the module this data is coming from.

        If your monitoring agent supports the concept of modules or plugins to process
        events of a given source (e.g. Apache logs), `event.module` should contain
        the name of this module.'
      type: keyword
    outcome:
      description: 'This is one of four ECS Categorization Fields, and indicates the
        lowest level in the ECS category hierarchy.

        `event.outcome` simply denotes whether the event represent a success or a
        failure. Note that not all events will have an associated outcome. For example,
        this field is generally not populated for metric events or events with `event.type:info`.'
      type: keyword
    sequence:
      description: 'Sequence number of the event.

        The sequence number is a value published by some event sources, to make the
        exact ordering of events unambiguous, regardless of the timestamp precision.'
      type: long
    type:
      description: 'This is one of four ECS Categorization Fields, and indicates the
        third level in the ECS category hierarchy.

        `event.type` represents a categorization "sub-bucket" that, when used along
        with the `event.category` field values, enables filtering events down to a
        level appropriate for single visualization.

        This field is an array. This will allow proper categorization of some events
        that fall in multiple event types.'
      type: keyword
  group: 2
  name: event
  prefix: event.
  short: Fields breaking down the event details.
  title: Event
  type: group
file:
  description: 'A file is defined as a set of information that has been created on,
    or has existed on a filesystem.

    File objects can be associated with host events, network events, and/or file events
    (e.g., those produced by File Integrity Monitoring [FIM] products or services).
    File fields provide details about the affected file associated with the event
    or metric.'
  fields:
    accessed:
      description: 'Last time the file was accessed.

        Note that not all filesystems keep track of access time.'
      type: date
    attributes:
      description: 'Array of file attributes.

        Attributes names will vary by platform. Here''s a non-exhaustive list of values
        that are expected in this field: archive, compressed, directory, encrypted,
        execute, hidden, read, readonly, system, write.'
      type: keyword
    code_signature.exists:
      description: Boolean to capture if a signature is present.
      type: boolean
    code_signature.status:
      description: 'Additional information about the certificate status.

        This is useful for logging cryptographic errors with the certificate validity
        or trust status. Leave unpopulated if the validity or trust of the certificate
        was unchecked.'
      type: keyword
    code_signature.subject_name:
      description: Subject name of the code signer
      type: keyword
    code_signature.trusted:
      description: 'Stores the trust status of the certificate chain.

        Validating the trust of the certificate chain may be complicated, and this
        field should only be populated by tools that actively check the status.'
      type: boolean
    code_signature.valid:
      description: 'Boolean to capture if the digital signature is verified against
        the binary content.

        Leave unpopulated if a certificate was unchecked.'
      type: boolean
    created:
      description: 'File creation time.

        Note that not all filesystems store the creation time.'
      type: date
    ctime:
      description: 'Last time the file attributes or metadata changed.

        Note that changes to the file content will update `mtime`. This implies `ctime`
        will be adjusted at the same time, since `mtime` is an attribute of the file.'
      type: date
    device:
      description: Device that is the source of the file.
      type: keyword
    directory:
      description: Directory where the file is located. It should include the drive
        letter, when appropriate.
      type: keyword
    drive_letter:
      description: 'Drive letter where the file is located. This field is only relevant
        on Windows.

        The value should be uppercase, and not include the colon.'
      type: keyword
    entry_modified:
      description: Time of last status change.  See `st_ctim` member of `struct stat`.
      type: double
    extension:
      description: File extension.
      type: keyword
    gid:
      description: Primary group ID (GID) of the file.
      type: keyword
    group:
      description: Primary group name of the file.
      type: keyword
    hash.md5:
      description: MD5 hash.
      type: keyword
    hash.sha1:
      description: SHA1 hash.
      type: keyword
    hash.sha256:
      description: SHA256 hash.
      type: keyword
    hash.sha512:
      description: SHA512 hash.
      type: keyword
    inode:
      description: Inode representing the file in the filesystem.
      type: keyword
    macro.code_page:
      description: Identifies the character encoding used for this macro.  https://docs.microsoft.com/en-us/windows/win32/intl/code-page-identifiers
      type: long
    macro.collection:
      description: Object containing hashes for the macro collection.
      type: object
    macro.collection.hash.md5:
      description: MD5 hash.
      type: keyword
    macro.collection.hash.sha1:
      description: SHA1 hash.
      type: keyword
    macro.collection.hash.sha256:
      description: SHA256 hash.
      type: keyword
    macro.collection.hash.sha512:
      description: SHA512 hash.
      type: keyword
    macro.errors:
      description: Errors that occurred when parsing this document file.
      type: nested
    macro.errors.count:
      description: Number of times this error that occurred.
      type: long
    macro.errors.error_type:
      description: The type of parsing error that occurred.
      type: keyword
    macro.file_extension:
      description: The extension of the file containing this macro (e.g. .docm)
      type: long
    macro.project_file:
      description: Metadata about the corresponding VBA project file
      type: object
    macro.project_file.hash.md5:
      description: MD5 hash.
      type: keyword
    macro.project_file.hash.sha1:
      description: SHA1 hash.
      type: keyword
    macro.project_file.hash.sha256:
      description: SHA256 hash.
      type: keyword
    macro.project_file.hash.sha512:
      description: SHA512 hash.
      type: keyword
    macro.stream:
      description: Streams associated with the document.
      type: nested
    macro.stream.hash.md5:
      description: MD5 hash.
      type: keyword
    macro.stream.hash.sha1:
      description: SHA1 hash.
      type: keyword
    macro.stream.hash.sha256:
      description: SHA256 hash.
      type: keyword
    macro.stream.hash.sha512:
      description: SHA512 hash.
      type: keyword
    macro.stream.name:
      description: Name of the stream.
      type: keyword
    macro.stream.raw_code:
      description: First 100KB of raw stream binary.  Can be useful to analyze false
        positives and malicious payloads.
      type: keyword
    macro.stream.raw_code_size:
      description: The original stream size.  Indicates whether stream.raw_code was
        truncated.
      type: keyword
    malware_classification.features.data.buffer:
      description: The features extracted from this file and evaluated by the model.  Usually
        an array of floats.  Likely zlib-encoded.
      type: keyword
    malware_classification.features.data.decompressed_size:
      description: The decompressed size of buffer.
      type: integer
    malware_classification.features.data.encoding:
      description: The encoding of buffer (e.g. zlib).
      type: keyword
    malware_classification.identifier:
      description: The model's unique identifier.
      type: keyword
    malware_classification.score:
      description: The score produced by the classification model.
      type: double
    malware_classification.threshold:
      description: The score threshold for the model.  Files that score above this
        threshold are considered malicious.
      type: double
    malware_classification.upx_packed:
      description: Whether UPX packing was detected.
      type: boolean
    malware_classification.version:
      description: The version of the model used.
      type: keyword
    mode:
      description: Mode of the file in octal representation.
      type: keyword
    mtime:
      description: Last time the file content was modified.
      type: date
    name:
      description: Name of the file including the extension, without the directory.
      type: keyword
    owner:
      description: File owner's username.
      type: keyword
    path:
      description: Full path to the file, including the file name. It should include
        the drive letter, when appropriate.
      type: keyword
    pe.company:
      description: Internal company name of the file, provided at compile-time.
      type: keyword
    pe.description:
      description: Internal description of the file, provided at compile-time.
      type: keyword
    pe.file_version:
      description: Internal version of the file, provided at compile-time.
      type: keyword
    pe.original_file_name:
      description: Internal name of the file, provided at compile-time.
      type: keyword
    pe.product:
      description: Internal product name of the file, provided at compile-time.
      type: keyword
    size:
      description: 'File size in bytes.

        Only relevant when `file.type` is "file".'
      type: long
    target_path:
      description: Target path for symlinks.
      type: keyword
    temp_file_path:
      description: Path on endpoint where a copy of the file is being stored.  Used
        to make ephemeral files retrievable.
      type: keyword
    type:
      description: File type (file, dir, or symlink).
      type: keyword
    uid:
      description: The user ID (UID) or security identifier (SID) of the file owner.
      type: keyword
  group: 2
  name: file
  nestings:
  - code_signature
  - hash
  - macro
  - malware_classification
  - pe
  prefix: file.
  short: Fields describing files.
  title: File
  type: group
host:
  description: 'A host is defined as a general computing instance.

    ECS host.* fields should be populated with details about the host on which the
    event happened, or from which the measurement was taken. Host types include hardware,
    virtual machines, Docker containers, and Kubernetes nodes.'
  fields:
    architecture:
      description: Operating system architecture.
      type: keyword
    domain:
      description: 'Name of the domain of which the host is a member.

        For example, on Windows this could be the host''s Active Directory domain
        or NetBIOS domain name. For Linux this could be the domain of the host''s
        LDAP provider.'
      type: keyword
    geo.city_name:
      description: City name.
      type: keyword
    geo.continent_name:
      description: Name of the continent.
      type: keyword
    geo.country_iso_code:
      description: Country ISO code.
      type: keyword
    geo.country_name:
      description: Country name.
      type: keyword
    geo.location:
      description: Longitude and latitude.
      type: geo_point
    geo.name:
      description: 'User-defined description of a location, at the level of granularity
        they care about.

        Could be the name of their data centers, the floor number, if this describes
        a local physical entity, city names.

        Not typically used in automated geolocation.'
      type: keyword
    geo.region_iso_code:
      description: Region ISO code.
      type: keyword
    geo.region_name:
      description: Region name.
      type: keyword
    hostname:
      description: 'Hostname of the host.

        It normally contains what the `hostname` command returns on the host machine.'
      type: keyword
    id:
      description: 'Unique host id.

        As hostname is not always unique, use values that are meaningful in your environment.

        Example: The current usage of `beat.name`.'
      type: keyword
    ip:
      description: Host ip addresses.
      type: ip
    mac:
      description: Host mac addresses.
      type: keyword
    name:
      description: 'Name of the host.

        It can contain what `hostname` returns on Unix systems, the fully qualified
        domain name, or a name specified by the user. The sender decides which value
        to use.'
      type: keyword
    os.family:
      description: OS family (such as redhat, debian, freebsd, windows).
      type: keyword
    os.full:
      description: Operating system name, including the version or code name.
      type: keyword
    os.kernel:
      description: Operating system kernel version as a raw string.
      type: keyword
    os.name:
      description: Operating system name, without the version.
      type: keyword
    os.platform:
      description: Operating system platform (such centos, ubuntu, windows).
      type: keyword
    os.version:
      description: Operating system version as a raw string.
      type: keyword
    type:
      description: 'Type of host.

        For Cloud providers this can be the machine type like `t2.medium`. If vm,
        this could be the container, for example, or other information meaningful
        in your environment.'
      type: keyword
    uptime:
      description: Seconds the host has been up.
      type: long
    user.domain:
      description: 'Name of the directory the user is a member of.

        For example, an LDAP or Active Directory domain name.'
      type: keyword
    user.email:
      description: User email address.
      type: keyword
    user.full_name:
      description: User's full name, if available.
      type: keyword
    user.group.domain:
      description: 'Name of the directory the group is a member of.

        For example, an LDAP or Active Directory domain name.'
      type: keyword
    user.group.id:
      description: Unique identifier for the group on the system/platform.
      type: keyword
    user.group.name:
      description: Name of the group.
      type: keyword
    user.hash:
      description: 'Unique user hash to correlate information for a user in anonymized
        form.

        Useful if `user.id` or `user.name` contain confidential information and cannot
        be used.'
      type: keyword
    user.id:
      description: Unique identifiers of the user.
      type: keyword
    user.name:
      description: Short name or login of the user.
      type: keyword
  group: 2
  name: host
  nestings:
  - geo
  - os
  - user
  prefix: host.
  short: Fields describing the relevant computing instance.
  title: Host
  type: group
process:
  description: 'These fields contain information about a process.

    These fields can help you correlate metrics information with a process id/name
    from a log message.  The `process.pid` often stays in the metric itself and is
    copied to the global field for correlation.'
  fields:
    args:
      description: 'Array of process arguments, starting with the absolute path to
        the executable.

        May be filtered to protect sensitive information.'
      type: keyword
    args_count:
      description: 'Length of the process.args array.

        This field can be useful for querying or performing bucket analysis on how
        many arguments were provided to start a process. More arguments may be an
        indication of suspicious activity.'
      type: long
    code_signature.exists:
      description: Boolean to capture if a signature is present.
      type: boolean
    code_signature.status:
      description: 'Additional information about the certificate status.

        This is useful for logging cryptographic errors with the certificate validity
        or trust status. Leave unpopulated if the validity or trust of the certificate
        was unchecked.'
      type: keyword
    code_signature.subject_name:
      description: Subject name of the code signer
      type: keyword
    code_signature.trusted:
      description: 'Stores the trust status of the certificate chain.

        Validating the trust of the certificate chain may be complicated, and this
        field should only be populated by tools that actively check the status.'
      type: boolean
    code_signature.valid:
      description: 'Boolean to capture if the digital signature is verified against
        the binary content.

        Leave unpopulated if a certificate was unchecked.'
      type: boolean
    command_line:
      description: 'Full command line that started the process, including the absolute
        path to the executable, and all arguments.

        Some arguments may be filtered to protect sensitive information.'
      type: keyword
    entity_id:
      description: 'Unique identifier for the process.

        The implementation of this is specified by the data source, but some examples
        of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
        or a hash of some uniquely identifying components of a process.

        Constructing a globally unique identifier is a common practice to mitigate
        PID reuse as well as to identify a specific process over time, across multiple
        monitored hosts.'
      type: keyword
    executable:
      description: Absolute path to the process executable.
      type: keyword
    exit_code:
      description: 'The exit code of the process, if this is a termination event.

        The field should be absent if there is no exit code for the event (e.g. process
        start).'
      type: long
    hash.md5:
      description: MD5 hash.
      type: keyword
    hash.sha1:
      description: SHA1 hash.
      type: keyword
    hash.sha256:
      description: SHA256 hash.
      type: keyword
    hash.sha512:
      description: SHA512 hash.
      type: keyword
    malware_classification.features.data.buffer:
      description: The features extracted from this file and evaluated by the model.  Usually
        an array of floats.  Likely zlib-encoded.
      type: keyword
    malware_classification.features.data.decompressed_size:
      description: The decompressed size of buffer.
      type: integer
    malware_classification.features.data.encoding:
      description: The encoding of buffer (e.g. zlib).
      type: keyword
    malware_classification.identifier:
      description: The model's unique identifier.
      type: keyword
    malware_classification.score:
      description: The score produced by the classification model.
      type: double
    malware_classification.threshold:
      description: The score threshold for the model.  Files that score above this
        threshold are considered malicious.
      type: double
    malware_classification.upx_packed:
      description: Whether UPX packing was detected.
      type: boolean
    malware_classification.version:
      description: The version of the model used.
      type: keyword
    name:
      description: 'Process name.

        Sometimes called program name or similar.'
      type: keyword
    parent.args:
      description: 'Array of process arguments.

        May be filtered to protect sensitive information.'
      type: keyword
    parent.args_count:
      description: 'Length of the process.args array.

        This field can be useful for querying or performing bucket analysis on how
        many arguments were provided to start a process. More arguments may be an
        indication of suspicious activity.'
      type: long
    parent.code_signature.exists:
      description: Boolean to capture if a signature is present.
      type: boolean
    parent.code_signature.status:
      description: 'Additional information about the certificate status.

        This is useful for logging cryptographic errors with the certificate validity
        or trust status. Leave unpopulated if the validity or trust of the certificate
        was unchecked.'
      type: keyword
    parent.code_signature.subject_name:
      description: Subject name of the code signer
      type: keyword
    parent.code_signature.trusted:
      description: 'Stores the trust status of the certificate chain.

        Validating the trust of the certificate chain may be complicated, and this
        field should only be populated by tools that actively check the status.'
      type: boolean
    parent.code_signature.valid:
      description: 'Boolean to capture if the digital signature is verified against
        the binary content.

        Leave unpopulated if a certificate was unchecked.'
      type: boolean
    parent.command_line:
      description: 'Full command line that started the process, including the absolute
        path to the executable, and all arguments.

        Some arguments may be filtered to protect sensitive information.'
      type: keyword
    parent.entity_id:
      description: 'Unique identifier for the process.

        The implementation of this is specified by the data source, but some examples
        of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
        or a hash of some uniquely identifying components of a process.

        Constructing a globally unique identifier is a common practice to mitigate
        PID reuse as well as to identify a specific process over time, across multiple
        monitored hosts.'
      type: keyword
    parent.executable:
      description: Absolute path to the process executable.
      type: keyword
    parent.exit_code:
      description: 'The exit code of the process, if this is a termination event.

        The field should be absent if there is no exit code for the event (e.g. process
        start).'
      type: long
    parent.hash.md5:
      description: MD5 hash.
      type: keyword
    parent.hash.sha1:
      description: SHA1 hash.
      type: keyword
    parent.hash.sha256:
      description: SHA256 hash.
      type: keyword
    parent.hash.sha512:
      description: SHA512 hash.
      type: keyword
    parent.name:
      description: 'Process name.

        Sometimes called program name or similar.'
      type: keyword
    parent.pgid:
      description: Identifier of the group of processes the process belongs to.
      type: long
    parent.pid:
      description: Process id.
      type: long
    parent.ppid:
      description: Parent process' pid.
      type: long
    parent.start:
      description: The time the process started.
      type: date
    parent.thread.id:
      description: Thread ID.
      type: long
    parent.thread.name:
      description: Thread name.
      type: keyword
    parent.title:
      description: 'Process title.

        The proctitle, some times the same as process name. Can also be different:
        for example a browser setting its title to the web page currently opened.'
      type: keyword
    parent.uptime:
      description: Seconds the process has been up.
      type: long
    parent.working_directory:
      description: The working directory of the process.
      type: keyword
    pe.company:
      description: Internal company name of the file, provided at compile-time.
      type: keyword
    pe.description:
      description: Internal description of the file, provided at compile-time.
      type: keyword
    pe.file_version:
      description: Internal version of the file, provided at compile-time.
      type: keyword
    pe.original_file_name:
      description: Internal name of the file, provided at compile-time.
      type: keyword
    pe.product:
      description: Internal product name of the file, provided at compile-time.
      type: keyword
    pgid:
      description: Identifier of the group of processes the process belongs to.
      type: long
    pid:
      description: Process id.
      type: long
    ppid:
      description: Parent process' pid.
      type: long
    services:
      description: Services running in this process.
      type: keyword
    start:
      description: The time the process started.
      type: date
    thread.call_stack.instruction_pointer:
      description: The return address of this stack frame.
      type: keyword
    thread.call_stack.memory_section.address:
      description: Base address of the memory region containing `instruction_pointer`.  Corresponds
        to `MEMORY_BASIC_INFORMATION.BaseAddress`
      type: keyword
    thread.call_stack.memory_section.protection:
      description: Memory protection flags of this memory region.  Corresponds to
        `MEMORY_BASIC_INFORMATION.Protect`
      type: keyword
    thread.call_stack.memory_section.size:
      description: Size of the memory region containing `instruction_pointer`.  Corresponds
        to `MEMORY_BASIC_INFORMATION.RegionSize`
      type: keyword
    thread.call_stack.module_path:
      description: The DLL/module containing `instruction_pointer`.
      type: keyword
    thread.call_stack.rva:
      description: The relative virtual address of `instruction_pointer`.  Computed
        as `instruction_pointer - MEMORY_BASIC_INFORMATION.AllocationBase`.
      type: keyword
    thread.call_stack.symbol_info:
      description: The nearest symbol for `instruction_pointer`.
      type: keyword
    thread.id:
      description: Thread ID.
      type: long
    thread.name:
      description: Thread name.
      type: keyword
    thread.service:
      description: Service associated with the thread.
      type: keyword
    thread.start:
      description: The time the thread started.
      type: date
    thread.start_address:
      description: Memory address where the thread started.
      type: keyword
    thread.start_address_module:
      description: The dll/module where the threat began execution.
      type: keyword
    thread.token.domain:
      description: Domain of token user.
      type: keyword
    thread.token.impersonation_level:
      description: Impersonation level. Only valid for impersonation tokens.
      type: keyword
    thread.token.integrity_level:
      description: Numeric integrity level.
      type: long
    thread.token.integrity_level_name:
      description: Human readable integrity level.
      type: keyword
    thread.token.is_appcontainer:
      description: Whether or not this is an appcontainer token.
      type: boolean
    thread.token.privileges:
      description: Array describing the privileges associated with the token.
      type: nested
    thread.token.privileges.description:
      description: Description of the privilege.
      type: keyword
    thread.token.privileges.enabled:
      description: Whether or not the privilege is enabled.
      type: boolean
    thread.token.privileges.name:
      description: Name of the privilege.
      type: keyword
    thread.token.sid:
      description: Token user's Security Identifier (SID).
      type: keyword
    thread.token.type:
      description: Type of the token, either primary or impersonation.
      type: keyword
    thread.token.user:
      description: Username of token owner.
      type: keyword
    thread.uptime:
      description: Seconds since thread started.
      type: long
    title:
      description: 'Process title.

        The proctitle, some times the same as process name. Can also be different:
        for example a browser setting its title to the web page currently opened.'
      type: keyword
    token.domain:
      description: Domain of token user.
      type: keyword
    token.impersonation_level:
      description: Impersonation level. Only valid for impersonation tokens.
      type: keyword
    token.integrity_level:
      description: Numeric integrity level.
      type: long
    token.integrity_level_name:
      description: Human readable integrity level.
      type: keyword
    token.is_appcontainer:
      description: Whether or not this is an appcontainer token.
      type: boolean
    token.privileges:
      description: Array describing the privileges associated with the token.
      type: nested
    token.privileges.description:
      description: Description of the privilege.
      type: keyword
    token.privileges.enabled:
      description: Whether or not the privilege is enabled.
      type: boolean
    token.privileges.name:
      description: Name of the privilege.
      type: keyword
    token.sid:
      description: Token user's Security Identifier (SID).
      type: keyword
    token.type:
      description: Type of the token, either primary or impersonation.
      type: keyword
    token.user:
      description: Username of token owner.
      type: keyword
    uptime:
      description: Seconds the process has been up.
      type: long
    user:
      description: User associated with the running process.
      type: keyword
    working_directory:
      description: The working directory of the process.
      type: keyword
  group: 2
  name: process
  nestings:
  - call_stack
  - code_signature
  - hash
  - malware_classification
  - pe
  - token
  prefix: process.
  reusable:
    expected:
    - target
    top_level: true
  short: These fields contain information about a process.
  title: Process
  type: group
rule:
  description: 'Rule fields are used to capture the specifics of any observer or agent
    rules that generate alerts or other notable events.

    Examples of data sources that would populate the rule fields include: network
    admission control platforms, network or host IDS/IPS, network firewalls, web application
    firewalls, url filters, endpoint detection and response (EDR) systems, etc.'
  fields:
    category:
      description: A categorization value keyword used by the entity using the rule
        for detection of this event.
      type: keyword
    description:
      description: The description of the rule generating the event.
      type: keyword
    id:
      description: A rule ID that is unique within the scope of an agent, observer,
        or other entity using the rule for detection of this event.
      type: keyword
    name:
      description: The name of the rule or signature generating the event.
      type: keyword
    reference:
      description: 'Reference URL to additional information about the rule used to
        generate this event.

        The URL can point to the vendor''s documentation about the rule. If that''s
        not available, it can also be a link to a more general page describing this
        type of alert.'
      type: keyword
    ruleset:
      description: Name of the ruleset, policy, group, or parent category in which
        the rule used to generate this event is a member.
      type: keyword
    uuid:
      description: A rule ID that is unique within the scope of a set or group of
        agents, observers, or other entities using the rule for detection of this
        event.
      type: keyword
    version:
      description: The version / revision of the rule being used for analysis.
      type: keyword
  group: 2
  name: rule
  prefix: rule.
  short: Fields to capture details about rules used to generate alerts or other notable
    events.
  title: Rule
  type: group
target:
  description: 'These fields contain information about a target.

    These fields provide more context about the target process and thread that are
    related to the data in the document. Useful in a security context where a target
    process or thread may be acted on by another process or thread.'
  fields:
    dll.code_signature.exists:
      description: Boolean to capture if a signature is present.
      type: boolean
    dll.code_signature.status:
      description: 'Additional information about the certificate status.

        This is useful for logging cryptographic errors with the certificate validity
        or trust status. Leave unpopulated if the validity or trust of the certificate
        was unchecked.'
      type: keyword
    dll.code_signature.subject_name:
      description: Subject name of the code signer
      type: keyword
    dll.code_signature.trusted:
      description: 'Stores the trust status of the certificate chain.

        Validating the trust of the certificate chain may be complicated, and this
        field should only be populated by tools that actively check the status.'
      type: boolean
    dll.code_signature.valid:
      description: 'Boolean to capture if the digital signature is verified against
        the binary content.

        Leave unpopulated if a certificate was unchecked.'
      type: boolean
    dll.compile_time:
      description: Timestamp from when the module was compiled.
      type: date
    dll.hash.md5:
      description: MD5 hash.
      type: keyword
    dll.hash.sha1:
      description: SHA1 hash.
      type: keyword
    dll.hash.sha256:
      description: SHA256 hash.
      type: keyword
    dll.hash.sha512:
      description: SHA512 hash.
      type: keyword
    dll.malware_classification.features.data.buffer:
      description: The features extracted from this file and evaluated by the model.  Usually
        an array of floats.  Likely zlib-encoded.
      type: keyword
    dll.malware_classification.features.data.decompressed_size:
      description: The decompressed size of buffer.
      type: integer
    dll.malware_classification.features.data.encoding:
      description: The encoding of buffer (e.g. zlib).
      type: keyword
    dll.malware_classification.identifier:
      description: The model's unique identifier.
      type: keyword
    dll.malware_classification.score:
      description: The score produced by the classification model.
      type: double
    dll.malware_classification.threshold:
      description: The score threshold for the model.  Files that score above this
        threshold are considered malicious.
      type: double
    dll.malware_classification.upx_packed:
      description: Whether UPX packing was detected.
      type: boolean
    dll.malware_classification.version:
      description: The version of the model used.
      type: keyword
    dll.mapped_address:
      description: TODO
      type: keyword
    dll.mapped_size:
      description: TODO
      type: long
    dll.name:
      description: 'Name of the library.

        This generally maps to the name of the file on disk.'
      type: keyword
    dll.path:
      description: Full file path of the library.
      type: keyword
    dll.pe.company:
      description: Internal company name of the file, provided at compile-time.
      type: keyword
    dll.pe.description:
      description: Internal description of the file, provided at compile-time.
      type: keyword
    dll.pe.file_version:
      description: Internal version of the file, provided at compile-time.
      type: keyword
    dll.pe.original_file_name:
      description: Internal name of the file, provided at compile-time.
      type: keyword
    dll.pe.product:
      description: Internal product name of the file, provided at compile-time.
      type: keyword
    process.args:
      description: 'Array of process arguments, starting with the absolute path to
        the executable.

        May be filtered to protect sensitive information.'
      type: keyword
    process.args_count:
      description: 'Length of the process.args array.

        This field can be useful for querying or performing bucket analysis on how
        many arguments were provided to start a process. More arguments may be an
        indication of suspicious activity.'
      type: long
    process.code_signature.exists:
      description: Boolean to capture if a signature is present.
      type: boolean
    process.code_signature.status:
      description: 'Additional information about the certificate status.

        This is useful for logging cryptographic errors with the certificate validity
        or trust status. Leave unpopulated if the validity or trust of the certificate
        was unchecked.'
      type: keyword
    process.code_signature.subject_name:
      description: Subject name of the code signer
      type: keyword
    process.code_signature.trusted:
      description: 'Stores the trust status of the certificate chain.

        Validating the trust of the certificate chain may be complicated, and this
        field should only be populated by tools that actively check the status.'
      type: boolean
    process.code_signature.valid:
      description: 'Boolean to capture if the digital signature is verified against
        the binary content.

        Leave unpopulated if a certificate was unchecked.'
      type: boolean
    process.command_line:
      description: 'Full command line that started the process, including the absolute
        path to the executable, and all arguments.

        Some arguments may be filtered to protect sensitive information.'
      type: keyword
    process.entity_id:
      description: 'Unique identifier for the process.

        The implementation of this is specified by the data source, but some examples
        of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
        or a hash of some uniquely identifying components of a process.

        Constructing a globally unique identifier is a common practice to mitigate
        PID reuse as well as to identify a specific process over time, across multiple
        monitored hosts.'
      type: keyword
    process.executable:
      description: Absolute path to the process executable.
      type: keyword
    process.exit_code:
      description: 'The exit code of the process, if this is a termination event.

        The field should be absent if there is no exit code for the event (e.g. process
        start).'
      type: long
    process.hash.md5:
      description: MD5 hash.
      type: keyword
    process.hash.sha1:
      description: SHA1 hash.
      type: keyword
    process.hash.sha256:
      description: SHA256 hash.
      type: keyword
    process.hash.sha512:
      description: SHA512 hash.
      type: keyword
    process.malware_classification.features.data.buffer:
      description: The features extracted from this file and evaluated by the model.  Usually
        an array of floats.  Likely zlib-encoded.
      type: keyword
    process.malware_classification.features.data.decompressed_size:
      description: The decompressed size of buffer.
      type: integer
    process.malware_classification.features.data.encoding:
      description: The encoding of buffer (e.g. zlib).
      type: keyword
    process.malware_classification.identifier:
      description: The model's unique identifier.
      type: keyword
    process.malware_classification.score:
      description: The score produced by the classification model.
      type: double
    process.malware_classification.threshold:
      description: The score threshold for the model.  Files that score above this
        threshold are considered malicious.
      type: double
    process.malware_classification.upx_packed:
      description: Whether UPX packing was detected.
      type: boolean
    process.malware_classification.version:
      description: The version of the model used.
      type: keyword
    process.name:
      description: 'Process name.

        Sometimes called program name or similar.'
      type: keyword
    process.parent.args:
      description: 'Array of process arguments.

        May be filtered to protect sensitive information.'
      type: keyword
    process.parent.args_count:
      description: 'Length of the process.args array.

        This field can be useful for querying or performing bucket analysis on how
        many arguments were provided to start a process. More arguments may be an
        indication of suspicious activity.'
      type: long
    process.parent.code_signature.exists:
      description: Boolean to capture if a signature is present.
      type: boolean
    process.parent.code_signature.status:
      description: 'Additional information about the certificate status.

        This is useful for logging cryptographic errors with the certificate validity
        or trust status. Leave unpopulated if the validity or trust of the certificate
        was unchecked.'
      type: keyword
    process.parent.code_signature.subject_name:
      description: Subject name of the code signer
      type: keyword
    process.parent.code_signature.trusted:
      description: 'Stores the trust status of the certificate chain.

        Validating the trust of the certificate chain may be complicated, and this
        field should only be populated by tools that actively check the status.'
      type: boolean
    process.parent.code_signature.valid:
      description: 'Boolean to capture if the digital signature is verified against
        the binary content.

        Leave unpopulated if a certificate was unchecked.'
      type: boolean
    process.parent.command_line:
      description: 'Full command line that started the process, including the absolute
        path to the executable, and all arguments.

        Some arguments may be filtered to protect sensitive information.'
      type: keyword
    process.parent.entity_id:
      description: 'Unique identifier for the process.

        The implementation of this is specified by the data source, but some examples
        of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
        or a hash of some uniquely identifying components of a process.

        Constructing a globally unique identifier is a common practice to mitigate
        PID reuse as well as to identify a specific process over time, across multiple
        monitored hosts.'
      type: keyword
    process.parent.executable:
      description: Absolute path to the process executable.
      type: keyword
    process.parent.exit_code:
      description: 'The exit code of the process, if this is a termination event.

        The field should be absent if there is no exit code for the event (e.g. process
        start).'
      type: long
    process.parent.hash.md5:
      description: MD5 hash.
      type: keyword
    process.parent.hash.sha1:
      description: SHA1 hash.
      type: keyword
    process.parent.hash.sha256:
      description: SHA256 hash.
      type: keyword
    process.parent.hash.sha512:
      description: SHA512 hash.
      type: keyword
    process.parent.name:
      description: 'Process name.

        Sometimes called program name or similar.'
      type: keyword
    process.parent.pgid:
      description: Identifier of the group of processes the process belongs to.
      type: long
    process.parent.pid:
      description: Process id.
      type: long
    process.parent.ppid:
      description: Parent process' pid.
      type: long
    process.parent.start:
      description: The time the process started.
      type: date
    process.parent.thread.id:
      description: Thread ID.
      type: long
    process.parent.thread.name:
      description: Thread name.
      type: keyword
    process.parent.title:
      description: 'Process title.

        The proctitle, some times the same as process name. Can also be different:
        for example a browser setting its title to the web page currently opened.'
      type: keyword
    process.parent.uptime:
      description: Seconds the process has been up.
      type: long
    process.parent.working_directory:
      description: The working directory of the process.
      type: keyword
    process.pe.company:
      description: Internal company name of the file, provided at compile-time.
      type: keyword
    process.pe.description:
      description: Internal description of the file, provided at compile-time.
      type: keyword
    process.pe.file_version:
      description: Internal version of the file, provided at compile-time.
      type: keyword
    process.pe.original_file_name:
      description: Internal name of the file, provided at compile-time.
      type: keyword
    process.pe.product:
      description: Internal product name of the file, provided at compile-time.
      type: keyword
    process.pgid:
      description: Identifier of the group of processes the process belongs to.
      type: long
    process.pid:
      description: Process id.
      type: long
    process.ppid:
      description: Parent process' pid.
      type: long
    process.services:
      description: Services running in this process.
      type: keyword
    process.start:
      description: The time the process started.
      type: date
    process.thread.call_stack.instruction_pointer:
      description: The return address of this stack frame.
      type: keyword
    process.thread.call_stack.memory_section.address:
      description: Base address of the memory region containing `instruction_pointer`.  Corresponds
        to `MEMORY_BASIC_INFORMATION.BaseAddress`
      type: keyword
    process.thread.call_stack.memory_section.protection:
      description: Memory protection flags of this memory region.  Corresponds to
        `MEMORY_BASIC_INFORMATION.Protect`
      type: keyword
    process.thread.call_stack.memory_section.size:
      description: Size of the memory region containing `instruction_pointer`.  Corresponds
        to `MEMORY_BASIC_INFORMATION.RegionSize`
      type: keyword
    process.thread.call_stack.module_path:
      description: The DLL/module containing `instruction_pointer`.
      type: keyword
    process.thread.call_stack.rva:
      description: The relative virtual address of `instruction_pointer`.  Computed
        as `instruction_pointer - MEMORY_BASIC_INFORMATION.AllocationBase`.
      type: keyword
    process.thread.call_stack.symbol_info:
      description: The nearest symbol for `instruction_pointer`.
      type: keyword
    process.thread.id:
      description: Thread ID.
      type: long
    process.thread.name:
      description: Thread name.
      type: keyword
    process.thread.service:
      description: Service associated with the thread.
      type: keyword
    process.thread.start:
      description: The time the thread started.
      type: date
    process.thread.start_address:
      description: Memory address where the thread started.
      type: keyword
    process.thread.start_address_module:
      description: The dll/module where the threat began execution.
      type: keyword
    process.thread.token.domain:
      description: Domain of token user.
      type: keyword
    process.thread.token.impersonation_level:
      description: Impersonation level. Only valid for impersonation tokens.
      type: keyword
    process.thread.token.integrity_level:
      description: Numeric integrity level.
      type: long
    process.thread.token.integrity_level_name:
      description: Human readable integrity level.
      type: keyword
    process.thread.token.is_appcontainer:
      description: Whether or not this is an appcontainer token.
      type: boolean
    process.thread.token.privileges:
      description: Array describing the privileges associated with the token.
      type: nested
    process.thread.token.privileges.description:
      description: Description of the privilege.
      type: keyword
    process.thread.token.privileges.enabled:
      description: Whether or not the privilege is enabled.
      type: boolean
    process.thread.token.privileges.name:
      description: Name of the privilege.
      type: keyword
    process.thread.token.sid:
      description: Token user's Security Identifier (SID).
      type: keyword
    process.thread.token.type:
      description: Type of the token, either primary or impersonation.
      type: keyword
    process.thread.token.user:
      description: Username of token owner.
      type: keyword
    process.thread.uptime:
      description: Seconds since thread started.
      type: long
    process.title:
      description: 'Process title.

        The proctitle, some times the same as process name. Can also be different:
        for example a browser setting its title to the web page currently opened.'
      type: keyword
    process.token.domain:
      description: Domain of token user.
      type: keyword
    process.token.impersonation_level:
      description: Impersonation level. Only valid for impersonation tokens.
      type: keyword
    process.token.integrity_level:
      description: Numeric integrity level.
      type: long
    process.token.integrity_level_name:
      description: Human readable integrity level.
      type: keyword
    process.token.is_appcontainer:
      description: Whether or not this is an appcontainer token.
      type: boolean
    process.token.privileges:
      description: Array describing the privileges associated with the token.
      type: nested
    process.token.privileges.description:
      description: Description of the privilege.
      type: keyword
    process.token.privileges.enabled:
      description: Whether or not the privilege is enabled.
      type: boolean
    process.token.privileges.name:
      description: Name of the privilege.
      type: keyword
    process.token.sid:
      description: Token user's Security Identifier (SID).
      type: keyword
    process.token.type:
      description: Type of the token, either primary or impersonation.
      type: keyword
    process.token.user:
      description: Username of token owner.
      type: keyword
    process.uptime:
      description: Seconds the process has been up.
      type: long
    process.user:
      description: User associated with the running process.
      type: keyword
    process.working_directory:
      description: The working directory of the process.
      type: keyword
  group: 2
  name: target
  nestings:
  - dll
  - process
  prefix: target.
  short: These fields contain information about a target.
  title: Target
  type: group
threat:
  description: 'Fields to classify events and alerts according to a threat taxonomy
    such as the Mitre ATT&CK framework.

    These fields are for users to classify alerts from all of their sources (e.g.
    IDS, NGFW, etc.) within a common taxonomy. The threat.tactic.* are meant to capture
    the high level category of the threat (e.g. "impact"). The threat.technique.*
    fields are meant to capture which kind of approach is used by this detected threat,
    to accomplish the goal (e.g. "endpoint denial of service").'
  fields:
    framework:
      description: Name of the threat framework used to further categorize and classify
        the tactic and technique of the reported threat. Framework classification
        can be provided by detecting systems, evaluated at ingest time, or retrospectively
        tagged to events.
      type: keyword
    tactic.id:
      description: The id of tactic used by this threat. You can use the Mitre ATT&CK
        Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/tactics/TA0040/
        )
      type: keyword
    tactic.name:
      description: Name of the type of tactic used by this threat. You can use the
        Mitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/tactics/TA0040/
        )
      type: keyword
    tactic.reference:
      description: The reference url of tactic used by this threat. You can use the
        Mitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/tactics/TA0040/
        )
      type: keyword
    technique.id:
      description: The id of technique used by this tactic. You can use the Mitre
        ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/techniques/T1499/
        )
      type: keyword
    technique.name:
      description: The name of technique used by this tactic. You can use the Mitre
        ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/techniques/T1499/
        )
      type: keyword
    technique.reference:
      description: The reference url of technique used by this tactic. You can use
        the Mitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/techniques/T1499/
        )
      type: keyword
  group: 2
  name: threat
  prefix: threat.
  short: Fields to classify events and alerts according to a threat taxonomy.
  title: Threat
  type: group
user:
  description: 'The user fields describe information about the user that is relevant
    to the event.

    Fields can have one entry or multiple entries. If a user has more than one id,
    provide an array that includes all of them.'
  fields:
    domain:
      description: 'Name of the directory the user is a member of.

        For example, an LDAP or Active Directory domain name.'
      type: keyword
    email:
      description: User email address.
      type: keyword
    full_name:
      description: User's full name, if available.
      type: keyword
    group.domain:
      description: 'Name of the directory the group is a member of.

        For example, an LDAP or Active Directory domain name.'
      type: keyword
    group.id:
      description: Unique identifier for the group on the system/platform.
      type: keyword
    group.name:
      description: Name of the group.
      type: keyword
    hash:
      description: 'Unique user hash to correlate information for a user in anonymized
        form.

        Useful if `user.id` or `user.name` contain confidential information and cannot
        be used.'
      type: keyword
    id:
      description: Unique identifiers of the user.
      type: keyword
    name:
      description: Short name or login of the user.
      type: keyword
  group: 2
  name: user
  nestings:
  - group
  prefix: user.
  reusable:
    expected:
    - client
    - destination
    - host
    - server
    - source
    top_level: true
  short: Fields to describe the user relevant to the event.
  title: User
  type: group
