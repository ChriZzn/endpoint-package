title: network
fields:

- name: agent
  description: 'The agent fields contain the data about the software entity, if any,
    that collects, detects, or observes events on a host, or takes measurements on
    a host.

    Examples include Beats. Agents may also run on observers. ECS agent.* fields shall
    be populated with details of the agent running on the host or observer where the
    event happened or the measurement was taken.'
  fields:

  - name: id
    type: keyword
    description: 'Unique identifier of this agent (if one exists).

      Example: For Beats this would be beat.id.'
    example: 8a4f500d

  - name: type
    type: keyword
    description: 'Type of the agent.

      The agent type stays always the same and should be given by the agent used.
      In case of Filebeat the agent would always be Filebeat also if two Filebeat
      instances are run on the same machine.'
    example: filebeat

  - name: version
    type: keyword
    description: Version of the agent.
    example: 6.0.0-rc2

- name: '@timestamp'
  type: date
  description: 'Date/time when the event originated.

    This is the date/time extracted from the event, typically representing when the
    event was generated by the source.

    If the event source has no original timestamp, this value is typically populated
    by the first time the event was received by the pipeline.

    Required field for all events.'
  example: '2016-05-23T08:05:34.853Z'

- name: message
  type: text
  description: 'For log events the message field contains the log message, optimized
    for viewing in a log viewer.

    For structured logs without an original message field, other fields can be concatenated
    to form a human-readable summary of the event.

    If multiple messages exist, they can be combined into one message.'
  example: Hello World

- name: destination
  description: 'Destination fields describe details about the destination of a packet/event.

    Destination fields are usually populated in conjunction with source fields.'
  fields:

  - name: address
    type: keyword
    description: 'Some event destination addresses are defined ambiguously. The event
      will sometimes list an IP, a domain or a unix socket.  You should always store
      the raw address in the `.address` field.

      Then it should be duplicated to `.ip` or `.domain`, depending on which one it
      is.'

  - name: bytes
    type: long
    description: Bytes sent from the destination to the source.
    example: 184

  - name: domain
    type: keyword
    description: Destination domain.

  - name: ip
    type: ip
    description: 'IP address of the destination.

      Can be one or multiple IPv4 or IPv6 addresses.'

  - name: packets
    type: long
    description: Packets sent from the destination to the source.
    example: 12

  - name: port
    type: long
    description: Port of the destination.

  - name: registered_domain
    type: keyword
    description: 'The highest registered destination domain, stripped of the subdomain.

      For example, the registered domain for "foo.google.com" is "google.com".

      This value can be determined precisely with a list like the public suffix list
      (http://publicsuffix.org). Trying to approximate this by simply taking the last
      two labels will not work well for TLDs such as "co.uk".'
    example: google.com

  - name: top_level_domain
    type: keyword
    description: 'The effective top level domain (eTLD), also known as the domain
      suffix, is the last part of the domain name. For example, the top level domain
      for google.com is "com".

      This value can be determined precisely with a list like the public suffix list
      (http://publicsuffix.org). Trying to approximate this by simply taking the last
      label will not work well for effective TLDs such as "co.uk".'
    example: co.uk

- name: dns
  description: 'Fields describing DNS queries and answers.

    DNS events should either represent a single DNS query prior to getting answers
    (`dns.type:query`) or they should represent a full exchange and contain the query
    details as well as all of the answers that were provided for this query (`dns.type:answer`).'
  fields:

  - name: question
    description: TODO
    fields:

    - name: name
      type: keyword
      description: 'The name being queried.

        If the name field contains non-printable characters (below 32 or above 126),
        those characters should be represented as escaped base 10 integers (\DDD).
        Back slashes and quotes should be escaped. Tabs, carriage returns, and line
        feeds should be converted to \t, \r, and \n respectively.'
      example: www.google.com

    - name: registered_domain
      type: keyword
      description: 'The highest registered domain, stripped of the subdomain.

        For example, the registered domain for "foo.google.com" is "google.com".

        This value can be determined precisely with a list like the public suffix
        list (http://publicsuffix.org). Trying to approximate this by simply taking
        the last two labels will not work well for TLDs such as "co.uk".'
      example: google.com

    - name: subdomain
      type: keyword
      description: 'The subdomain is all of the labels under the registered_domain.

        If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com",
        the subdomain field should contain "sub2.sub1", with no trailing period.'
      example: www

    - name: top_level_domain
      type: keyword
      description: 'The effective top level domain (eTLD), also known as the domain
        suffix, is the last part of the domain name. For example, the top level domain
        for google.com is "com".

        This value can be determined precisely with a list like the public suffix
        list (http://publicsuffix.org). Trying to approximate this by simply taking
        the last label will not work well for effective TLDs such as "co.uk".'
      example: co.uk

    - name: type
      type: keyword
      description: The type of record being queried.
      example: AAAA

  - name: resolved_ip
    type: ip
    description: 'Array containing all IPs seen in `answers.data`.

      The `answers` array can be difficult to use, because of the variety of data
      formats it can contain. Extracting all IP addresses seen in there to `dns.resolved_ip`
      makes it possible to index them as IP addresses, and makes them easier to visualize
      and query for.'
    example:
    - 10.10.10.10
    - 10.10.10.11

- name: ecs
  description: Meta-information specific to ECS.
  fields:

  - name: version
    type: keyword
    description: 'ECS version this event conforms to. `ecs.version` is a required
      field and must exist in all events.

      When querying across multiple indices -- which may conform to slightly different
      ECS versions -- this field lets integrations adjust to the schema version of
      the events.'
    example: 1.0.0

- name: endpoint
  description: Endpoint custom fields.
  fields:

  - name: group
    description: Extended "group" field set
    fields:

    - name: real
      description: Group info prior to any setgid operations.
      fields:

      - name: id
        type: keyword
        description: Unique identifier for the group on the system/platform.

      - name: name
        type: keyword
        description: Name of the group.

  - name: user
    description: Extended "user" field set
    fields:

    - name: real
      description: User info prior to any setuid operations.
      fields:

      - name: id
        type: keyword
        description: One or multiple unique identifiers of the user.

      - name: name
        type: keyword
        description: Short name or login of the user.

- name: event
  description: 'The event fields are used for context information about the log or
    metric event itself.

    A log is defined as an event containing details of something that happened. Log
    events must include the time at which the thing happened. Examples of log events
    include a process starting on a host, a network packet being sent from a source
    to a destination, or a network connection between a client and a server being
    initiated or closed. A metric is defined as an event containing one or more numerical
    or categorical measurements and the time at which the measurement was taken. Examples
    of metric events include memory pressure measured on a host, or vulnerabilities
    measured on a scanned host.'
  fields:

  - name: action
    type: keyword
    description: 'The action captured by the event.

      This describes the information in the event. It is more specific than `event.category`.
      Examples are `group-add`, `process-started`, `file-created`. The value is normally
      defined by the implementer.'
    example: user-password-change

  - name: category
    type: keyword
    description: 'This is one of four ECS Categorization Fields, and indicates the
      second level in the ECS category hierarchy.

      `event.category` represents the "big buckets" of ECS categories. For example,
      filtering on `event.category:process` yields all events relating to process
      activity. This field is closely related to `event.type`, which is used as a
      subcategory.

      This field is an array. This will allow proper categorization of some events
      that fall in multiple categories.'
    example: authentication

  - name: id
    type: keyword
    description: Unique ID to describe the event.
    example: 8a4f500d

  - name: kind
    type: keyword
    description: 'This is one of four ECS Categorization Fields, and indicates the
      highest level in the ECS category hierarchy.

      `event.kind` gives high-level information about what type of information the
      event contains, without being specific to the contents of the event. For example,
      values of this field distinguish alert events from metric events.

      The value of this field can be used to inform how these kinds of events should
      be handled. They may warrant different retention, different access control,
      it may also help understand whether the data coming in at a regular interval
      or not.'
    example: alert

  - name: module
    type: keyword
    description: 'Name of the module this data is coming from.

      If your monitoring agent supports the concept of modules or plugins to process
      events of a given source (e.g. Apache logs), `event.module` should contain the
      name of this module.'
    example: apache

  - name: type
    type: keyword
    description: 'This is one of four ECS Categorization Fields, and indicates the
      third level in the ECS category hierarchy.

      `event.type` represents a categorization "sub-bucket" that, when used along
      with the `event.category` field values, enables filtering events down to a level
      appropriate for single visualization.

      This field is an array. This will allow proper categorization of some events
      that fall in multiple event types.'

- name: group
  description: The group fields are meant to represent groups that are relevant to
    the event.
  fields:

  - name: id
    type: keyword
    description: Unique identifier for the group on the system/platform.

  - name: name
    type: keyword
    description: Name of the group.

- name: host
  description: 'A host is defined as a general computing instance.

    ECS host.* fields should be populated with details about the host on which the
    event happened, or from which the measurement was taken. Host types include hardware,
    virtual machines, Docker containers, and Kubernetes nodes.'
  fields:

  - name: geo
    description: 'Geo fields can carry data about a specific location related to an
      event.

      This geolocation information can be derived from techniques such as Geo IP,
      or be user-supplied.'
    fields:

    - name: city_name
      type: keyword
      description: City name.
      example: Montreal

    - name: continent_name
      type: keyword
      description: Name of the continent.
      example: North America

    - name: country_iso_code
      type: keyword
      description: Country ISO code.
      example: CA

    - name: country_name
      type: keyword
      description: Country name.
      example: Canada

    - name: location
      type: geo_point
      description: Longitude and latitude.
      example: '{ "lon": -73.614830, "lat": 45.505918 }'

    - name: region_iso_code
      type: keyword
      description: Region ISO code.
      example: CA-QC

    - name: region_name
      type: keyword
      description: Region name.
      example: Quebec

  - name: hostname
    type: keyword
    description: 'Hostname of the host.

      It normally contains what the `hostname` command returns on the host machine.'

  - name: ip
    type: ip
    description: Host ip addresses.

  - name: name
    type: keyword
    description: 'Name of the host.

      It can contain what `hostname` returns on Unix systems, the fully qualified
      domain name, or a name specified by the user. The sender decides which value
      to use.'

  - name: os
    description: The OS fields contain information about the operating system.
    fields:

    - name: name
      type: keyword
      description: Operating system name, without the version.
      example: Mac OS X

    - name: platform
      type: keyword
      description: Operating system platform (such centos, ubuntu, windows).
      example: darwin

    - name: version
      type: keyword
      description: Operating system version as a raw string.
      example: 10.14.1

- name: http
  description: Fields related to HTTP activity. Use the `url` field set to store the
    url of the request.
  fields:

  - name: response
    description: TODO
    fields:

    - name: body
      description: TODO
      fields:

      - name: bytes
        type: long
        description: Size in bytes of the response body.
        example: 887

      - name: content
        type: keyword
        description: The full HTTP response body.
        example: Hello world

    - name: bytes
      type: long
      description: Total size in bytes of the response (body and headers).
      example: 1437

    - name: status_code
      type: long
      description: HTTP response status code.
      example: 404

    - name: version
      type: keyword
      description: HTTP version

- name: network
  description: 'The network is defined as the communication path over which a host
    or network event happens.

    The network.* fields should be populated with details about the network activity
    associated with an event.'
  fields:

  - name: bytes
    type: long
    description: 'Total bytes transferred in both directions.

      If `source.bytes` and `destination.bytes` are known, `network.bytes` is their
      sum.'
    example: 368

  - name: community_id
    type: keyword
    description: 'A hash of source and destination IPs and ports, as well as the protocol
      used in a communication. This is a tool-agnostic standard to identify flows.

      Learn more at https://github.com/corelight/community-id-spec.'
    example: 1:hO+sN4H+MG5MY/8hIrXPqc4ZQz0=

  - name: direction
    type: keyword
    description: "Direction of the network traffic.\nRecommended values are:\n  *\
      \ inbound\n  * outbound\n  * internal\n  * external\n  * unknown\n\nWhen mapping\
      \ events from a host-based monitoring context, populate this field from the\
      \ host's point of view.\nWhen mapping events from a network or perimeter-based\
      \ monitoring context, populate this field from the point of view of your network\
      \ perimeter."
    example: inbound

  - name: iana_number
    type: keyword
    description: IANA Protocol Number (https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
      Standardized list of protocols. This aligns well with NetFlow and sFlow related
      logs which use the IANA Protocol Number.
    example: 6

  - name: packets
    type: long
    description: 'Total packets transferred in both directions.

      If `source.packets` and `destination.packets` are known, `network.packets` is
      their sum.'
    example: 24

  - name: protocol
    type: keyword
    description: 'L7 Network protocol name. ex. http, lumberjack, transport protocol.

      The field value must be normalized to lowercase for querying. See the documentation
      section "Implementing ECS".'
    example: http

  - name: transport
    type: keyword
    description: 'Same as network.iana_number, but instead using the Keyword name
      of the transport layer (udp, tcp, ipv6-icmp, etc.)

      The field value must be normalized to lowercase for querying. See the documentation
      section "Implementing ECS".'
    example: tcp

  - name: type
    type: keyword
    description: 'In the OSI Model this would be the Network Layer. ipv4, ipv6, ipsec,
      pim, etc

      The field value must be normalized to lowercase for querying. See the documentation
      section "Implementing ECS".'
    example: ipv4

- name: process
  description: 'These fields contain information about a process.

    These fields can help you correlate metrics information with a process id/name
    from a log message.  The `process.pid` often stays in the metric itself and is
    copied to the global field for correlation.'
  fields:

  - name: entity_id
    type: keyword
    description: 'Unique identifier for the process.

      The implementation of this is specified by the data source, but some examples
      of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
      or a hash of some uniquely identifying components of a process.

      Constructing a globally unique identifier is a common practice to mitigate PID
      reuse as well as to identify a specific process over time, across multiple monitored
      hosts.'
    example: c2c455d9f99375d

  - name: executable
    type: keyword
    description: Absolute path to the process executable.
    example: /usr/bin/ssh

  - name: name
    type: keyword
    description: 'Process name.

      Sometimes called program name or similar.'
    example: ssh

  - name: pid
    type: long
    description: Process id.
    example: 4242

  - name: thread
    description: The thread fields are used to describe by which process thread the
      event belongs to.
    fields:

    - name: id
      type: long
      description: Thread ID.
      example: 4242

- name: source
  description: 'Source fields describe details about the source of a packet/event.

    Source fields are usually populated in conjunction with destination fields.'
  fields:

  - name: address
    type: keyword
    description: 'Some event source addresses are defined ambiguously. The event will
      sometimes list an IP, a domain or a unix socket.  You should always store the
      raw address in the `.address` field.

      Then it should be duplicated to `.ip` or `.domain`, depending on which one it
      is.'

  - name: bytes
    type: long
    description: Bytes sent from the source to the destination.
    example: 184

  - name: domain
    type: keyword
    description: Source domain.

  - name: ip
    type: ip
    description: 'IP address of the source.

      Can be one or multiple IPv4 or IPv6 addresses.'

  - name: packets
    type: long
    description: Packets sent from the source to the destination.
    example: 12

  - name: port
    type: long
    description: Port of the source.

  - name: registered_domain
    type: keyword
    description: 'The highest registered source domain, stripped of the subdomain.

      For example, the registered domain for "foo.google.com" is "google.com".

      This value can be determined precisely with a list like the public suffix list
      (http://publicsuffix.org). Trying to approximate this by simply taking the last
      two labels will not work well for TLDs such as "co.uk".'
    example: google.com

  - name: top_level_domain
    type: keyword
    description: 'The effective top level domain (eTLD), also known as the domain
      suffix, is the last part of the domain name. For example, the top level domain
      for google.com is "com".

      This value can be determined precisely with a list like the public suffix list
      (http://publicsuffix.org). Trying to approximate this by simply taking the last
      label will not work well for effective TLDs such as "co.uk".'
    example: co.uk

- name: user
  description: 'The user fields describe information about the user that is relevant
    to the event.

    Fields can have one entry or multiple entries. If a user has more than one id,
    provide an array that includes all of them.'
  fields:

  - name: domain
    type: keyword
    description: 'Name of the directory the user is a member of.

      For example, an LDAP or Active Directory domain name.'

  - name: id
    type: keyword
    description: Unique identifiers of the user.

  - name: name
    type: keyword
    description: Short name or login of the user.
    example: albert
