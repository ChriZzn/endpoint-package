agent:
  description: 'The agent fields contain the data about the software entity, if any,
    that collects, detects, or observes events on a host, or takes measurements on
    a host.

    Examples include Beats. Agents may also run on observers. ECS agent.* fields shall
    be populated with details of the agent running on the host or observer where the
    event happened or the measurement was taken.'
  fields:
    ephemeral_id:
      dashed_name: agent-ephemeral-id
      description: 'Ephemeral identifier of this agent (if one exists).

        This id normally changes across restarts, but `agent.id` does not.'
      example: 8a4f500f
      flat_name: agent.ephemeral_id
      ignore_above: 1024
      level: extended
      name: ephemeral_id
      normalize: []
      order: 4
      short: Ephemeral identifier of this agent.
      type: keyword
    id:
      dashed_name: agent-id
      description: 'Unique identifier of this agent (if one exists).

        Example: For Beats this would be beat.id.'
      example: 8a4f500d
      flat_name: agent.id
      ignore_above: 1024
      level: core
      name: id
      normalize: []
      order: 3
      short: Unique identifier of this agent.
      type: keyword
    name:
      dashed_name: agent-name
      description: 'Custom name of the agent.

        This is a name that can be given to an agent. This can be helpful if for example
        two Filebeat instances are running on the same host but a human readable separation
        is needed on which Filebeat instance data is coming from.

        If no name is given, the name is often left empty.'
      example: foo
      flat_name: agent.name
      ignore_above: 1024
      level: core
      name: name
      normalize: []
      order: 1
      short: Custom name of the agent.
      type: keyword
    type:
      dashed_name: agent-type
      description: 'Type of the agent.

        The agent type stays always the same and should be given by the agent used.
        In case of Filebeat the agent would always be Filebeat also if two Filebeat
        instances are run on the same machine.'
      example: filebeat
      flat_name: agent.type
      ignore_above: 1024
      level: core
      name: type
      normalize: []
      order: 2
      short: Type of the agent.
      type: keyword
    version:
      dashed_name: agent-version
      description: Version of the agent.
      example: 6.0.0-rc2
      flat_name: agent.version
      ignore_above: 1024
      level: core
      name: version
      normalize: []
      order: 0
      short: Version of the agent.
      type: keyword
  footnote: 'Examples: In the case of Beats for logs, the agent.name is filebeat.
    For APM, it is the agent running in the app/service. The agent information does
    not change if data is sent through queuing systems like Kafka, Redis, or processing
    systems such as Logstash or APM Server.'
  group: 2
  name: agent
  prefix: agent.
  short: Fields about the monitoring agent.
  title: Agent
  type: group
base:
  description: The `base` field set contains all fields which are on the top level.
    These fields are common across all types of events.
  fields:
    '@timestamp':
      dashed_name: '@timestamp'
      description: 'Date/time when the event originated.

        This is the date/time extracted from the event, typically representing when
        the event was generated by the source.

        If the event source has no original timestamp, this value is typically populated
        by the first time the event was received by the pipeline.

        Required field for all events.'
      example: '2016-05-23T08:05:34.853Z'
      flat_name: '@timestamp'
      level: core
      name: '@timestamp'
      normalize: []
      order: 0
      required: true
      short: Date/time when the event originated.
      type: date
  group: 1
  name: base
  prefix: ''
  root: true
  short: All fields defined directly at the top level
  title: Base
  type: group
dll:
  description: 'These fields contain information about code libraries dynamically
    loaded into processes.


    Many operating systems refer to "shared code libraries" with different names,
    but this field set refers to all of the following:

    * Dynamic-link library (`.dll`) commonly used on Windows

    * Shared Object (`.so`) commonly used on Unix-like operating systems

    * Dynamic library (`.dylib`) commonly used on macOS'
  fields:
    code_signature.exists:
      dashed_name: dll-code-signature-exists
      description: Boolean to capture if a signature is present.
      example: 'true'
      flat_name: dll.code_signature.exists
      level: core
      name: exists
      normalize: []
      order: 0
      original_fieldset: code_signature
      short: Boolean to capture if a signature is present.
      type: boolean
    code_signature.status:
      dashed_name: dll-code-signature-status
      description: 'Additional information about the certificate status.

        This is useful for logging cryptographic errors with the certificate validity
        or trust status. Leave unpopulated if the validity or trust of the certificate
        was unchecked.'
      example: ERROR_UNTRUSTED_ROOT
      flat_name: dll.code_signature.status
      ignore_above: 1024
      level: extended
      name: status
      normalize: []
      order: 4
      original_fieldset: code_signature
      short: Additional information about the certificate status.
      type: keyword
    code_signature.subject_name:
      dashed_name: dll-code-signature-subject-name
      description: Subject name of the code signer
      example: Microsoft Corporation
      flat_name: dll.code_signature.subject_name
      ignore_above: 1024
      level: core
      name: subject_name
      normalize: []
      order: 1
      original_fieldset: code_signature
      short: Subject name of the code signer
      type: keyword
    code_signature.trusted:
      dashed_name: dll-code-signature-trusted
      description: 'Stores the trust status of the certificate chain.

        Validating the trust of the certificate chain may be complicated, and this
        field should only be populated by tools that actively check the status.'
      example: 'true'
      flat_name: dll.code_signature.trusted
      level: extended
      name: trusted
      normalize: []
      order: 3
      original_fieldset: code_signature
      short: Stores the trust status of the certificate chain.
      type: boolean
    code_signature.valid:
      dashed_name: dll-code-signature-valid
      description: 'Boolean to capture if the digital signature is verified against
        the binary content.

        Leave unpopulated if a certificate was unchecked.'
      example: 'true'
      flat_name: dll.code_signature.valid
      level: extended
      name: valid
      normalize: []
      order: 2
      original_fieldset: code_signature
      short: Boolean to capture if the digital signature is verified against the binary
        content.
      type: boolean
    hash.imphash:
      dashed_name: dll-hash-imphash
      description: Imphash.
      flat_name: dll.hash.imphash
      ignore_above: 1024
      level: extended
      name: imphash
      normalize: []
      order: 0
      original_fieldset: hash
      short: Imphash.
      type: keyword
    hash.md5:
      dashed_name: dll-hash-md5
      description: MD5 hash.
      flat_name: dll.hash.md5
      ignore_above: 1024
      level: extended
      name: md5
      normalize: []
      order: 0
      original_fieldset: hash
      short: MD5 hash.
      type: keyword
    hash.sha1:
      dashed_name: dll-hash-sha1
      description: SHA1 hash.
      flat_name: dll.hash.sha1
      ignore_above: 1024
      level: extended
      name: sha1
      normalize: []
      order: 1
      original_fieldset: hash
      short: SHA1 hash.
      type: keyword
    hash.sha256:
      dashed_name: dll-hash-sha256
      description: SHA256 hash.
      flat_name: dll.hash.sha256
      ignore_above: 1024
      level: extended
      name: sha256
      normalize: []
      order: 2
      original_fieldset: hash
      short: SHA256 hash.
      type: keyword
    hash.sha512:
      dashed_name: dll-hash-sha512
      description: SHA512 hash.
      flat_name: dll.hash.sha512
      ignore_above: 1024
      level: extended
      name: sha512
      normalize: []
      order: 3
      original_fieldset: hash
      short: SHA512 hash.
      type: keyword
    name:
      dashed_name: dll-name
      description: 'Name of the library.

        This generally maps to the name of the file on disk.'
      example: kernel32.dll
      flat_name: dll.name
      ignore_above: 1024
      level: core
      name: name
      normalize: []
      order: 0
      short: Name of the library.
      type: keyword
    path:
      dashed_name: dll-path
      description: Full file path of the library.
      example: C:\Windows\System32\kernel32.dll
      flat_name: dll.path
      ignore_above: 1024
      level: extended
      name: path
      normalize: []
      order: 1
      short: Full file path of the library.
      type: keyword
    pe.company:
      dashed_name: dll-pe-company
      description: Internal company name of the file, provided at compile-time.
      example: Microsoft Corporation
      flat_name: dll.pe.company
      ignore_above: 1024
      level: extended
      name: company
      normalize: []
      order: 4
      original_fieldset: pe
      short: Internal company name of the file, provided at compile-time.
      type: keyword
    pe.description:
      dashed_name: dll-pe-description
      description: Internal description of the file, provided at compile-time.
      example: Paint
      flat_name: dll.pe.description
      ignore_above: 1024
      level: extended
      name: description
      normalize: []
      order: 2
      original_fieldset: pe
      short: Internal description of the file, provided at compile-time.
      type: keyword
    pe.file_version:
      dashed_name: dll-pe-file-version
      description: Internal version of the file, provided at compile-time.
      example: 6.3.9600.17415
      flat_name: dll.pe.file_version
      ignore_above: 1024
      level: extended
      name: file_version
      normalize: []
      order: 1
      original_fieldset: pe
      short: Process name.
      type: keyword
    pe.malware_classification.features.data.buffer:
      dashed_name: dll-pe-malware-classification-features-data-buffer
      description: TODO
      flat_name: dll.pe.malware_classification.features.data.buffer
      ignore_above: 1024
      level: custom
      name: features.data.buffer
      normalize: []
      order: 4
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    pe.malware_classification.features.data.decompressed_size:
      dashed_name: dll-pe-malware-classification-features-data-decompressed-size
      description: TODO
      flat_name: dll.pe.malware_classification.features.data.decompressed_size
      level: custom
      name: features.data.decompressed_size
      normalize: []
      order: 5
      original_fieldset: malware_classification
      short: TODO
      type: integer
    pe.malware_classification.features.data.encoding:
      dashed_name: dll-pe-malware-classification-features-data-encoding
      description: TODO
      flat_name: dll.pe.malware_classification.features.data.encoding
      ignore_above: 1024
      level: custom
      name: features.data.encoding
      normalize: []
      order: 6
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    pe.malware_classification.identifier:
      dashed_name: dll-pe-malware-classification-identifier
      description: TODO
      flat_name: dll.pe.malware_classification.identifier
      ignore_above: 1024
      level: custom
      name: identifier
      normalize: []
      order: 2
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    pe.malware_classification.score:
      dashed_name: dll-pe-malware-classification-score
      description: TODO
      flat_name: dll.pe.malware_classification.score
      level: custom
      name: score
      normalize: []
      order: 0
      original_fieldset: malware_classification
      short: TODO
      type: double
    pe.malware_classification.threshold:
      dashed_name: dll-pe-malware-classification-threshold
      description: TODO
      flat_name: dll.pe.malware_classification.threshold
      level: custom
      name: threshold
      normalize: []
      order: 1
      original_fieldset: malware_classification
      short: TODO
      type: double
    pe.malware_classification.upx_packed:
      dashed_name: dll-pe-malware-classification-upx-packed
      description: TODO
      flat_name: dll.pe.malware_classification.upx_packed
      level: custom
      name: upx_packed
      normalize: []
      order: 7
      original_fieldset: malware_classification
      short: TODO
      type: boolean
    pe.malware_classification.version:
      dashed_name: dll-pe-malware-classification-version
      description: TODO
      flat_name: dll.pe.malware_classification.version
      ignore_above: 1024
      level: custom
      name: version
      normalize: []
      order: 3
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    pe.original_file_name:
      dashed_name: dll-pe-original-file-name
      description: Internal name of the file, provided at compile-time.
      example: MSPAINT.EXE
      flat_name: dll.pe.original_file_name
      ignore_above: 1024
      level: extended
      name: original_file_name
      normalize: []
      order: 0
      original_fieldset: pe
      short: Internal name of the file, provided at compile-time.
      type: keyword
    pe.product:
      dashed_name: dll-pe-product
      description: Internal product name of the file, provided at compile-time.
      example: "Microsoft\xAE Windows\xAE Operating System"
      flat_name: dll.pe.product
      ignore_above: 1024
      level: extended
      name: product
      normalize: []
      order: 3
      original_fieldset: pe
      short: Internal product name of the file, provided at compile-time.
      type: keyword
  group: 2
  name: dll
  nestings:
  - code_signature
  - hash
  - pe
  prefix: dll.
  short: These fields contain information about code libraries dynamically loaded
    into processes.
  title: DLL
  type: group
ecs:
  description: Meta-information specific to ECS.
  fields:
    version:
      dashed_name: ecs-version
      description: 'ECS version this event conforms to. `ecs.version` is a required
        field and must exist in all events.

        When querying across multiple indices -- which may conform to slightly different
        ECS versions -- this field lets integrations adjust to the schema version
        of the events.'
      example: 1.0.0
      flat_name: ecs.version
      ignore_above: 1024
      level: core
      name: version
      normalize: []
      order: 0
      required: true
      short: ECS version this event conforms to.
      type: keyword
  group: 2
  name: ecs
  prefix: ecs.
  short: Meta-information specific to ECS.
  title: ECS
  type: group
endpoint:
  description: TODO
  fields:
    policy.id:
      dashed_name: endpoint-policy-id
      description: TODO
      flat_name: endpoint.policy.id
      ignore_above: 1024
      level: custom
      name: policy.id
      normalize: []
      order: 0
      short: TODO
      type: keyword
  group: 2
  name: endpoint
  prefix: endpoint.
  short: TODO
  title: Endpoint
  type: group
event:
  description: 'The event fields are used for context information about the log or
    metric event itself.

    A log is defined as an event containing details of something that happened. Log
    events must include the time at which the thing happened. Examples of log events
    include a process starting on a host, a network packet being sent from a source
    to a destination, or a network connection between a client and a server being
    initiated or closed. A metric is defined as an event containing one or more numerical
    or categorical measurements and the time at which the measurement was taken. Examples
    of metric events include memory pressure measured on a host, or vulnerabilities
    measured on a scanned host.'
  fields:
    action:
      dashed_name: event-action
      description: 'The action captured by the event.

        This describes the information in the event. It is more specific than `event.category`.
        Examples are `group-add`, `process-started`, `file-created`. The value is
        normally defined by the implementer.'
      example: user-password-change
      flat_name: event.action
      ignore_above: 1024
      level: core
      name: action
      normalize: []
      order: 4
      short: The action captured by the event.
      type: keyword
    category:
      allowed_values:
      - description: 'Events in this category are related to the challenge and response
          process in which credentials are supplied and verified to allow the creation
          of a session. Common sources for these logs are Windows event logs and ssh
          logs. Visualize and analyze events in this category to look for failed logins,
          and other authentication-related activity.

          '
        expected_event_types:
        - start
        - end
        - info
        name: authentication
      - description: 'The database category denotes events and metrics relating to
          a data storage and retrieval system. Note that use of this category is not
          limited to relational database systems. Examples include event logs from
          MS SQL, MySQL, Elasticsearch, MongoDB, etc. Use this category to visualize
          and analyze database activity such as accesses and changes.

          '
        expected_event_types:
        - access
        - change
        - info
        - error
        name: database
      - description: 'Events in the driver category have to do with operating system
          device drivers and similar software entities such as Windows drivers, kernel
          extensions, kernel modules, etc.

          Use events and metrics in this category to visualize and analyze driver-related
          activity and status on hosts.

          '
        expected_event_types:
        - change
        - end
        - info
        - start
        name: driver
      - description: 'Relating to a set of information that has been created on, or
          has existed on a filesystem. Use this category of events to visualize and
          analyze the creation, access, and deletions of files. Events in this category
          can come from both host-based and network-based sources. An example source
          of a network-based detection of a file transfer would be the Zeek file.log.

          '
        expected_event_types:
        - change
        - creation
        - deletion
        - info
        name: file
      - description: 'Use this category to visualize and analyze information such
          as host inventory or host lifecycle events.

          Most of the events in this category can usually be observed from the outside,
          such as from a hypervisor or a control plane''s point of view. Some can
          also be seen from within, such as "start" or "end".

          Note that this category is for information about hosts themselves; it is
          not meant to capture activity "happening on a host".

          '
        expected_event_types:
        - access
        - change
        - end
        - info
        - start
        name: host
      - description: 'Relating to intrusion detections from IDS/IPS systems and functions,
          both network and host-based. Use this category to visualize and analyze
          intrusion detection alerts from systems such as Snort, Suricata, and Palo
          Alto threat detections.

          '
        expected_event_types:
        - info
        name: intrusion_detection
      - description: 'Malware detection events and alerts. Use this category to visualize
          and analyze malware detections from EDR/EPP systems such as Elastic Endpoint
          Security, Symantec Endpoint Protection, Crowdstrike, and network IDS/IPS
          systems such as Suricata, or other sources of malware-related events such
          as Palo Alto Networks threat logs and Wildfire logs.

          '
        expected_event_types:
        - info
        name: malware
      - description: 'Relating to software packages installed on hosts. Use this category
          to visualize and analyze inventory of software installed on various hosts,
          or to determine host vulnerability in the absence of vulnerability scan
          data.

          '
        expected_event_types:
        - access
        - change
        - deletion
        - info
        - installation
        - start
        name: package
      - description: 'Use this category of events to visualize and analyze process-specific
          information such as lifecycle events or process ancestry.

          '
        expected_event_types:
        - access
        - change
        - end
        - info
        - start
        name: process
      - description: 'Relating to web server access. Use this category to create a
          dashboard of web server/proxy activity from apache, IIS, nginx web servers,
          etc. Note: events from network observers such as Zeek http log may also
          be included in this category.

          '
        expected_event_types:
        - access
        - error
        - info
        name: web
      dashed_name: event-category
      description: 'This is one of four ECS Categorization Fields, and indicates the
        second level in the ECS category hierarchy.

        `event.category` represents the "big buckets" of ECS categories. For example,
        filtering on `event.category:process` yields all events relating to process
        activity. This field is closely related to `event.type`, which is used as
        a subcategory.

        This field is an array. This will allow proper categorization of some events
        that fall in multiple categories.'
      example: authentication
      flat_name: event.category
      ignore_above: 1024
      level: core
      name: category
      normalize:
      - array
      order: 3
      short: Event category. The second categorization field in the hierarchy.
      type: keyword
    created:
      dashed_name: event-created
      description: 'event.created contains the date/time when the event was first
        read by an agent, or by your pipeline.

        This field is distinct from @timestamp in that @timestamp typically contain
        the time extracted from the original event.

        In most situations, these two timestamps will be slightly different. The difference
        can be used to calculate the delay between your source generating an event,
        and the time when your agent first processed it. This can be used to monitor
        your agent''s or pipeline''s ability to keep up with your event source.

        In case the two timestamps are identical, @timestamp should be used.'
      example: '2016-05-23T08:05:34.857Z'
      flat_name: event.created
      level: core
      name: created
      normalize: []
      order: 16
      short: Time when the event was first read by an agent or by your pipeline.
      type: date
    dataset:
      dashed_name: event-dataset
      description: 'Name of the dataset.

        If an event source publishes more than one type of log or events (e.g. access
        log, error log), the dataset is used to specify which one the event comes
        from.

        It''s recommended but not required to start the dataset name with the module
        name, followed by a dot, then the dataset name.'
      example: apache.access
      flat_name: event.dataset
      ignore_above: 1024
      level: core
      name: dataset
      normalize: []
      order: 8
      short: Name of the dataset.
      type: keyword
    hash:
      dashed_name: event-hash
      description: Hash (perhaps logstash fingerprint) of raw field to be able to
        demonstrate log integrity.
      example: 123456789012345678901234567890ABCD
      flat_name: event.hash
      ignore_above: 1024
      level: extended
      name: hash
      normalize: []
      order: 12
      short: Hash (perhaps logstash fingerprint) of raw field to be able to demonstrate
        log integrity.
      type: keyword
    id:
      dashed_name: event-id
      description: Unique ID to describe the event.
      example: 8a4f500d
      flat_name: event.id
      ignore_above: 1024
      level: core
      name: id
      normalize: []
      order: 0
      short: Unique ID to describe the event.
      type: keyword
    ingested:
      dashed_name: event-ingested
      description: 'Timestamp when an event arrived in the central data store.

        This is different from `@timestamp`, which is when the event originally occurred.  It''s
        also different from `event.created`, which is meant to capture the first time
        an agent saw the event.

        In normal conditions, assuming no tampering, the timestamps should chronologically
        look like this: `@timestamp` < `event.created` < `event.ingested`.'
      example: '2016-05-23T08:05:35.101Z'
      flat_name: event.ingested
      level: core
      name: ingested
      normalize: []
      order: 21
      short: Timestamp when an event arrived in the central data store.
      type: date
    kind:
      allowed_values:
      - description: 'This value indicates an event that describes an alert or notable
          event, triggered by a detection rule.

          `event.kind:alert` is often populated for events coming from firewalls,
          intrusion detection systems, endpoint detection and response systems, and
          so on.

          '
        name: alert
      - description: 'This value is the most general and most common value for this
          field. It is used to represent events that indicate that something happened.

          '
        name: event
      - description: 'This value is used to indicate that this event that a numeric
          measurement was taken at given point in time.

          Examples include CPU utilization, memory usage, or a vulnerability scan
          result.

          Metric events are often collected on a predictable frequency, such as once
          every few seconds, or once a minute.

          '
        name: metric
      - description: 'This value is similar to metric, except that the entity being
          measured does not provide a numeric metric value, but rather one of a fixed
          set of conditions or states. For example a periodic event reporting a "fin_wait"
          state of a TCP connection on a host might use `event.type:state`.

          '
        name: state
      - description: 'This value indicates that an error occurred during the ingestion
          of this event, and that event data may be missing, inconsistent, or incorrect.
          `event.kind:pipeline_error` is often associated with parsing errors.

          '
        name: pipeline_error
      - description: 'This value is used by the Elastic SIEM app to denote an Elasticsearch
          document that was created by a SIEM detection engine rule.

          A signal will typically trigger a notification that something meaningful
          happened and should be investigated.

          Usage of this value is reserved, and pipelines should not populate `event.kind`
          with the value "signal".

          '
        name: signal
      dashed_name: event-kind
      description: 'This is one of four ECS Categorization Fields, and indicates the
        highest level in the ECS category hierarchy.

        `event.kind` gives high-level information about what type of information the
        event contains, without being specific to the contents of the event. For example,
        values of this field distinguish alert events from metric events.

        The value of this field can be used to inform how these kinds of events should
        be handled. They may warrant different retention, different access control,
        it may also help understand whether the data coming in at a regular interval
        or not.'
      example: alert
      flat_name: event.kind
      ignore_above: 1024
      level: core
      name: kind
      normalize: []
      order: 2
      short: The kind of the event. The highest categorization field in the hierarchy.
      type: keyword
    module:
      dashed_name: event-module
      description: 'Name of the module this data is coming from.

        If your monitoring agent supports the concept of modules or plugins to process
        events of a given source (e.g. Apache logs), `event.module` should contain
        the name of this module.'
      example: apache
      flat_name: event.module
      ignore_above: 1024
      level: core
      name: module
      normalize: []
      order: 7
      short: Name of the module this data is coming from.
      type: keyword
    outcome:
      allowed_values:
      - description: 'Indicates that this event describes a failed result. A common
          example is `event.category:file AND event.type:access AND event.outcome:failure`
          to indicate that a file access was attempted, but was not successful.

          '
        name: failure
      - description: 'Indicates that this event describes a successful result.  A
          common example is `event.category:file AND event.type:create AND event.outcome:success`
          to indicate that a file was successfully created.

          '
        name: success
      - description: 'Indicates that this event describes only an attempt for which
          the result is unknown. For example, if the event contains information only
          about a request in an entity transaction that usually results in a response,
          populating `event.outcome:unknown` is appropriate.

          '
        name: unknown
      dashed_name: event-outcome
      description: 'This is one of four ECS Categorization Fields, and indicates the
        lowest level in the ECS category hierarchy.

        `event.outcome` simply denotes whether the event represent a success or a
        failure. Note that not all events will have an associated outcome. For example,
        this field is generally not populated for metric events or events with `event.type:info`.'
      example: success
      flat_name: event.outcome
      ignore_above: 1024
      level: core
      name: outcome
      normalize: []
      order: 5
      short: The outcome of the event. The lowest categorization field in the hierarchy.
      type: keyword
    sequence:
      dashed_name: event-sequence
      description: 'Sequence number of the event.

        The sequence number is a value published by some event sources, to make the
        exact ordering of events unambiguous, regardless of the timestamp precision.'
      flat_name: event.sequence
      format: string
      level: extended
      name: sequence
      normalize: []
      order: 14
      short: Sequence number of the event.
      type: long
    type:
      allowed_values:
      - description: 'The access event type is used for the subset of events within
          a category that indicate that something was accessed. Common examples include
          `event.category:database AND event.type:access`, or `event.category:file
          AND event.type:access`. Note for file access, both directory listings and
          file opens should be included in this subcategory. You can further distinguish
          access operations using the ECS `event.action` field.

          '
        name: access
      - description: 'The change event type is used for the subset of events within
          a category that indicate that something has changed. If semantics best describe
          an event as modified, then include them in this subcategory. Common examples
          include `event.category:process AND event.type:change`, and `event.category:file
          AND event.type:change`. You can further distinguish change operations using
          the ECS `event.action` field.

          '
        name: change
      - description: 'The "creation" event type is used for the subset of events within
          a category that indicate that something was created. A common example is
          `event.category:file AND event.type:creation`.

          '
        name: creation
      - description: 'The deletion event type is used for the subset of events within
          a category that indicate that something was deleted. A common example is
          `event.category:file AND event.type:deletion` to indicate that a file has
          been deleted.

          '
        name: deletion
      - description: 'The end event type is used for the subset of events within a
          category that indicate something has ended. A common example is `event.category:process
          AND event.type:end`.

          '
        name: end
      - description: 'The error event type is used for the subset of events within
          a category that indicate or describe an error. A common example is `event.category:database
          AND event.type:error`. Note that pipeline errors that occur during the event
          ingestion process should not use this `event.type` value. Instead, they
          should use `event.kind:pipeline_error`.

          '
        name: error
      - description: 'The info event type is used for the subset of events within
          a category that indicate that they are purely informational, and don''t
          report a state change, or any type of action. For example, an initial run
          of a file integrity monitoring system (FIM), where an agent reports all
          files under management, would fall into the "info" subcategory. Similarly,
          an event containing a dump of all currently running processes (as opposed
          to reporting that a process started/ended) would fall into the "info" subcategory.
          An additional common examples is `event.category:intrusion_detection AND
          event.type:info`.

          '
        name: info
      - description: 'The installation event type is used for the subset of events
          within a category that indicate that something was installed. A common example
          is `event.category:package` AND `event.type:installation`.

          '
        name: installation
      - description: 'The start event type is used for the subset of events within
          a category that indicate something has started. A common example is `event.category:process
          AND event.type:start`.

          '
        name: start
      dashed_name: event-type
      description: 'This is one of four ECS Categorization Fields, and indicates the
        third level in the ECS category hierarchy.

        `event.type` represents a categorization "sub-bucket" that, when used along
        with the `event.category` field values, enables filtering events down to a
        level appropriate for single visualization.

        This field is an array. This will allow proper categorization of some events
        that fall in multiple event types.'
      flat_name: event.type
      ignore_above: 1024
      level: core
      name: type
      normalize:
      - array
      order: 6
      short: Event type. The third categorization field in the hierarchy.
      type: keyword
  group: 2
  name: event
  prefix: event.
  short: Fields breaking down the event details.
  title: Event
  type: group
file:
  description: 'A file is defined as a set of information that has been created on,
    or has existed on a filesystem.

    File objects can be associated with host events, network events, and/or file events
    (e.g., those produced by File Integrity Monitoring [FIM] products or services).
    File fields provide details about the affected file associated with the event
    or metric.'
  fields:
    accessed:
      dashed_name: file-accessed
      description: 'Last time the file was accessed.

        Note that not all filesystems keep track of access time.'
      flat_name: file.accessed
      level: extended
      name: accessed
      normalize: []
      order: 19
      short: Last time the file was accessed.
      type: date
    attributes:
      dashed_name: file-attributes
      description: 'Array of file attributes.

        Attributes names will vary by platform. Here''s a non-exhaustive list of values
        that are expected in this field: archive, compressed, directory, encrypted,
        execute, hidden, read, readonly, system, write.'
      example: '["readonly", "system"]'
      flat_name: file.attributes
      ignore_above: 1024
      level: extended
      name: attributes
      normalize:
      - array
      order: 1
      short: Array of file attributes.
      type: keyword
    code_signature.exists:
      dashed_name: file-code-signature-exists
      description: Boolean to capture if a signature is present.
      example: 'true'
      flat_name: file.code_signature.exists
      level: core
      name: exists
      normalize: []
      order: 0
      original_fieldset: code_signature
      short: Boolean to capture if a signature is present.
      type: boolean
    code_signature.status:
      dashed_name: file-code-signature-status
      description: 'Additional information about the certificate status.

        This is useful for logging cryptographic errors with the certificate validity
        or trust status. Leave unpopulated if the validity or trust of the certificate
        was unchecked.'
      example: ERROR_UNTRUSTED_ROOT
      flat_name: file.code_signature.status
      ignore_above: 1024
      level: extended
      name: status
      normalize: []
      order: 4
      original_fieldset: code_signature
      short: Additional information about the certificate status.
      type: keyword
    code_signature.subject_name:
      dashed_name: file-code-signature-subject-name
      description: Subject name of the code signer
      example: Microsoft Corporation
      flat_name: file.code_signature.subject_name
      ignore_above: 1024
      level: core
      name: subject_name
      normalize: []
      order: 1
      original_fieldset: code_signature
      short: Subject name of the code signer
      type: keyword
    code_signature.trusted:
      dashed_name: file-code-signature-trusted
      description: 'Stores the trust status of the certificate chain.

        Validating the trust of the certificate chain may be complicated, and this
        field should only be populated by tools that actively check the status.'
      example: 'true'
      flat_name: file.code_signature.trusted
      level: extended
      name: trusted
      normalize: []
      order: 3
      original_fieldset: code_signature
      short: Stores the trust status of the certificate chain.
      type: boolean
    code_signature.valid:
      dashed_name: file-code-signature-valid
      description: 'Boolean to capture if the digital signature is verified against
        the binary content.

        Leave unpopulated if a certificate was unchecked.'
      example: 'true'
      flat_name: file.code_signature.valid
      level: extended
      name: valid
      normalize: []
      order: 2
      original_fieldset: code_signature
      short: Boolean to capture if the digital signature is verified against the binary
        content.
      type: boolean
    created:
      dashed_name: file-created
      description: 'File creation time.

        Note that not all filesystems store the creation time.'
      flat_name: file.created
      level: extended
      name: created
      normalize: []
      order: 18
      short: File creation time.
      type: date
    ctime:
      dashed_name: file-ctime
      description: 'Last time the file attributes or metadata changed.

        Note that changes to the file content will update `mtime`. This implies `ctime`
        will be adjusted at the same time, since `mtime` is an attribute of the file.'
      flat_name: file.ctime
      level: extended
      name: ctime
      normalize: []
      order: 17
      short: Last time the file attributes or metadata changed.
      type: date
    device:
      dashed_name: file-device
      description: Device that is the source of the file.
      example: sda
      flat_name: file.device
      ignore_above: 1024
      level: extended
      name: device
      normalize: []
      order: 8
      short: Device that is the source of the file.
      type: keyword
    directory:
      dashed_name: file-directory
      description: Directory where the file is located. It should include the drive
        letter, when appropriate.
      example: /home/alice
      flat_name: file.directory
      ignore_above: 1024
      level: extended
      name: directory
      normalize: []
      order: 2
      short: Directory where the file is located.
      type: keyword
    drive_letter:
      dashed_name: file-drive-letter
      description: 'Drive letter where the file is located. This field is only relevant
        on Windows.

        The value should be uppercase, and not include the colon.'
      example: C
      flat_name: file.drive_letter
      ignore_above: 1
      level: extended
      name: drive_letter
      normalize: []
      order: 3
      short: Drive letter where the file is located.
      type: keyword
    extension:
      dashed_name: file-extension
      description: File extension.
      example: png
      flat_name: file.extension
      ignore_above: 1024
      level: extended
      name: extension
      normalize: []
      order: 6
      short: File extension.
      type: keyword
    gid:
      dashed_name: file-gid
      description: Primary group ID (GID) of the file.
      example: '1001'
      flat_name: file.gid
      ignore_above: 1024
      level: extended
      name: gid
      normalize: []
      order: 12
      short: Primary group ID (GID) of the file.
      type: keyword
    group:
      dashed_name: file-group
      description: Primary group name of the file.
      example: alice
      flat_name: file.group
      ignore_above: 1024
      level: extended
      name: group
      normalize: []
      order: 13
      short: Primary group name of the file.
      type: keyword
    hash.imphash:
      dashed_name: file-hash-imphash
      description: Imphash.
      flat_name: file.hash.imphash
      ignore_above: 1024
      level: extended
      name: imphash
      normalize: []
      order: 0
      original_fieldset: hash
      short: Imphash.
      type: keyword
    hash.md5:
      dashed_name: file-hash-md5
      description: MD5 hash.
      flat_name: file.hash.md5
      ignore_above: 1024
      level: extended
      name: md5
      normalize: []
      order: 0
      original_fieldset: hash
      short: MD5 hash.
      type: keyword
    hash.sha1:
      dashed_name: file-hash-sha1
      description: SHA1 hash.
      flat_name: file.hash.sha1
      ignore_above: 1024
      level: extended
      name: sha1
      normalize: []
      order: 1
      original_fieldset: hash
      short: SHA1 hash.
      type: keyword
    hash.sha256:
      dashed_name: file-hash-sha256
      description: SHA256 hash.
      flat_name: file.hash.sha256
      ignore_above: 1024
      level: extended
      name: sha256
      normalize: []
      order: 2
      original_fieldset: hash
      short: SHA256 hash.
      type: keyword
    hash.sha512:
      dashed_name: file-hash-sha512
      description: SHA512 hash.
      flat_name: file.hash.sha512
      ignore_above: 1024
      level: extended
      name: sha512
      normalize: []
      order: 3
      original_fieldset: hash
      short: SHA512 hash.
      type: keyword
    inode:
      dashed_name: file-inode
      description: Inode representing the file in the filesystem.
      example: '256383'
      flat_name: file.inode
      ignore_above: 1024
      level: extended
      name: inode
      normalize: []
      order: 9
      short: Inode representing the file in the filesystem.
      type: keyword
    mode:
      dashed_name: file-mode
      description: Mode of the file in octal representation.
      example: '0640'
      flat_name: file.mode
      ignore_above: 1024
      level: extended
      name: mode
      normalize: []
      order: 14
      short: Mode of the file in octal representation.
      type: keyword
    mtime:
      dashed_name: file-mtime
      description: Last time the file content was modified.
      flat_name: file.mtime
      level: extended
      name: mtime
      normalize: []
      order: 16
      short: Last time the file content was modified.
      type: date
    name:
      dashed_name: file-name
      description: Name of the file including the extension, without the directory.
      example: example.png
      flat_name: file.name
      ignore_above: 1024
      level: extended
      name: name
      normalize: []
      order: 0
      short: Name of the file including the extension, without the directory.
      type: keyword
    owner:
      dashed_name: file-owner
      description: File owner's username.
      example: alice
      flat_name: file.owner
      ignore_above: 1024
      level: extended
      name: owner
      normalize: []
      order: 11
      short: File owner's username.
      type: keyword
    path:
      dashed_name: file-path
      description: Full path to the file, including the file name. It should include
        the drive letter, when appropriate.
      example: /home/alice/example.png
      flat_name: file.path
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: file.path.text
        name: text
        norms: false
        type: text
      name: path
      normalize: []
      order: 4
      short: Full path to the file, including the file name.
      type: keyword
    pe.company:
      dashed_name: file-pe-company
      description: Internal company name of the file, provided at compile-time.
      example: Microsoft Corporation
      flat_name: file.pe.company
      ignore_above: 1024
      level: extended
      name: company
      normalize: []
      order: 4
      original_fieldset: pe
      short: Internal company name of the file, provided at compile-time.
      type: keyword
    pe.description:
      dashed_name: file-pe-description
      description: Internal description of the file, provided at compile-time.
      example: Paint
      flat_name: file.pe.description
      ignore_above: 1024
      level: extended
      name: description
      normalize: []
      order: 2
      original_fieldset: pe
      short: Internal description of the file, provided at compile-time.
      type: keyword
    pe.file_version:
      dashed_name: file-pe-file-version
      description: Internal version of the file, provided at compile-time.
      example: 6.3.9600.17415
      flat_name: file.pe.file_version
      ignore_above: 1024
      level: extended
      name: file_version
      normalize: []
      order: 1
      original_fieldset: pe
      short: Process name.
      type: keyword
    pe.malware_classification.features.data.buffer:
      dashed_name: file-pe-malware-classification-features-data-buffer
      description: TODO
      flat_name: file.pe.malware_classification.features.data.buffer
      ignore_above: 1024
      level: custom
      name: features.data.buffer
      normalize: []
      order: 4
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    pe.malware_classification.features.data.decompressed_size:
      dashed_name: file-pe-malware-classification-features-data-decompressed-size
      description: TODO
      flat_name: file.pe.malware_classification.features.data.decompressed_size
      level: custom
      name: features.data.decompressed_size
      normalize: []
      order: 5
      original_fieldset: malware_classification
      short: TODO
      type: integer
    pe.malware_classification.features.data.encoding:
      dashed_name: file-pe-malware-classification-features-data-encoding
      description: TODO
      flat_name: file.pe.malware_classification.features.data.encoding
      ignore_above: 1024
      level: custom
      name: features.data.encoding
      normalize: []
      order: 6
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    pe.malware_classification.identifier:
      dashed_name: file-pe-malware-classification-identifier
      description: TODO
      flat_name: file.pe.malware_classification.identifier
      ignore_above: 1024
      level: custom
      name: identifier
      normalize: []
      order: 2
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    pe.malware_classification.score:
      dashed_name: file-pe-malware-classification-score
      description: TODO
      flat_name: file.pe.malware_classification.score
      level: custom
      name: score
      normalize: []
      order: 0
      original_fieldset: malware_classification
      short: TODO
      type: double
    pe.malware_classification.threshold:
      dashed_name: file-pe-malware-classification-threshold
      description: TODO
      flat_name: file.pe.malware_classification.threshold
      level: custom
      name: threshold
      normalize: []
      order: 1
      original_fieldset: malware_classification
      short: TODO
      type: double
    pe.malware_classification.upx_packed:
      dashed_name: file-pe-malware-classification-upx-packed
      description: TODO
      flat_name: file.pe.malware_classification.upx_packed
      level: custom
      name: upx_packed
      normalize: []
      order: 7
      original_fieldset: malware_classification
      short: TODO
      type: boolean
    pe.malware_classification.version:
      dashed_name: file-pe-malware-classification-version
      description: TODO
      flat_name: file.pe.malware_classification.version
      ignore_above: 1024
      level: custom
      name: version
      normalize: []
      order: 3
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    pe.original_file_name:
      dashed_name: file-pe-original-file-name
      description: Internal name of the file, provided at compile-time.
      example: MSPAINT.EXE
      flat_name: file.pe.original_file_name
      ignore_above: 1024
      level: extended
      name: original_file_name
      normalize: []
      order: 0
      original_fieldset: pe
      short: Internal name of the file, provided at compile-time.
      type: keyword
    pe.product:
      dashed_name: file-pe-product
      description: Internal product name of the file, provided at compile-time.
      example: "Microsoft\xAE Windows\xAE Operating System"
      flat_name: file.pe.product
      ignore_above: 1024
      level: extended
      name: product
      normalize: []
      order: 3
      original_fieldset: pe
      short: Internal product name of the file, provided at compile-time.
      type: keyword
    size:
      dashed_name: file-size
      description: 'File size in bytes.

        Only relevant when `file.type` is "file".'
      example: 16384
      flat_name: file.size
      level: extended
      name: size
      normalize: []
      order: 15
      short: File size in bytes.
      type: long
    target_path:
      dashed_name: file-target-path
      description: Target path for symlinks.
      flat_name: file.target_path
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: file.target_path.text
        name: text
        norms: false
        type: text
      name: target_path
      normalize: []
      order: 5
      short: Target path for symlinks.
      type: keyword
    type:
      dashed_name: file-type
      description: File type (file, dir, or symlink).
      example: file
      flat_name: file.type
      ignore_above: 1024
      level: extended
      name: type
      normalize: []
      order: 7
      short: File type (file, dir, or symlink).
      type: keyword
    uid:
      dashed_name: file-uid
      description: The user ID (UID) or security identifier (SID) of the file owner.
      example: '1001'
      flat_name: file.uid
      ignore_above: 1024
      level: extended
      name: uid
      normalize: []
      order: 10
      short: The user ID (UID) or security identifier (SID) of the file owner.
      type: keyword
  group: 2
  name: file
  nestings:
  - code_signature
  - hash
  - pe
  prefix: file.
  short: Fields describing files.
  title: File
  type: group
file_classification:
  description: TODO
  fields:
    entry_modified:
      dashed_name: file-classification-entry-modified
      description: TODO
      flat_name: file_classification.entry_modified
      level: custom
      name: entry_modified
      normalize: []
      order: 0
      short: TODO
      type: double
    macro.code_page:
      dashed_name: file-classification-macro-code-page
      description: TODO
      flat_name: file_classification.macro.code_page
      level: custom
      name: macro.code_page
      normalize: []
      order: 11
      short: TODO
      type: long
    macro.collection:
      dashed_name: file-classification-macro-collection
      description: TODO
      flat_name: file_classification.macro.collection
      level: custom
      name: macro.collection
      normalize: []
      object_type: keyword
      order: 5
      short: TODO
      type: object
    macro.collection.hash.imphash:
      dashed_name: file-classification-macro-collection-hash-imphash
      description: Imphash.
      flat_name: file_classification.macro.collection.hash.imphash
      ignore_above: 1024
      level: extended
      name: imphash
      normalize: []
      order: 0
      original_fieldset: hash
      short: Imphash.
      type: keyword
    macro.collection.hash.md5:
      dashed_name: file-classification-macro-collection-hash-md5
      description: MD5 hash.
      flat_name: file_classification.macro.collection.hash.md5
      ignore_above: 1024
      level: extended
      name: md5
      normalize: []
      order: 0
      original_fieldset: hash
      short: MD5 hash.
      type: keyword
    macro.collection.hash.sha1:
      dashed_name: file-classification-macro-collection-hash-sha1
      description: SHA1 hash.
      flat_name: file_classification.macro.collection.hash.sha1
      ignore_above: 1024
      level: extended
      name: sha1
      normalize: []
      order: 1
      original_fieldset: hash
      short: SHA1 hash.
      type: keyword
    macro.collection.hash.sha256:
      dashed_name: file-classification-macro-collection-hash-sha256
      description: SHA256 hash.
      flat_name: file_classification.macro.collection.hash.sha256
      ignore_above: 1024
      level: extended
      name: sha256
      normalize: []
      order: 2
      original_fieldset: hash
      short: SHA256 hash.
      type: keyword
    macro.collection.hash.sha512:
      dashed_name: file-classification-macro-collection-hash-sha512
      description: SHA512 hash.
      flat_name: file_classification.macro.collection.hash.sha512
      ignore_above: 1024
      level: extended
      name: sha512
      normalize: []
      order: 3
      original_fieldset: hash
      short: SHA512 hash.
      type: keyword
    macro.errors:
      dashed_name: file-classification-macro-errors
      description: TODO
      flat_name: file_classification.macro.errors
      level: custom
      name: macro.errors
      normalize: []
      order: 2
      short: TODO
      type: nested
    macro.errors.count:
      dashed_name: file-classification-macro-errors-count
      description: TODO
      flat_name: file_classification.macro.errors.count
      level: custom
      name: macro.errors.count
      normalize: []
      order: 3
      short: TODO
      type: long
    macro.errors.error_type:
      dashed_name: file-classification-macro-errors-error-type
      description: TODO
      flat_name: file_classification.macro.errors.error_type
      ignore_above: 1024
      level: custom
      name: macro.errors.error_type
      normalize: []
      order: 4
      short: TODO
      type: keyword
    macro.file_extension:
      dashed_name: file-classification-macro-file-extension
      description: TODO
      flat_name: file_classification.macro.file_extension
      level: custom
      name: macro.file_extension
      normalize: []
      order: 12
      short: TODO
      type: long
    macro.project_file:
      dashed_name: file-classification-macro-project-file
      description: TODO
      flat_name: file_classification.macro.project_file
      level: custom
      name: macro.project_file
      normalize: []
      object_type: keyword
      order: 6
      short: TODO
      type: object
    macro.project_file.hash.imphash:
      dashed_name: file-classification-macro-project-file-hash-imphash
      description: Imphash.
      flat_name: file_classification.macro.project_file.hash.imphash
      ignore_above: 1024
      level: extended
      name: imphash
      normalize: []
      order: 0
      original_fieldset: hash
      short: Imphash.
      type: keyword
    macro.project_file.hash.md5:
      dashed_name: file-classification-macro-project-file-hash-md5
      description: MD5 hash.
      flat_name: file_classification.macro.project_file.hash.md5
      ignore_above: 1024
      level: extended
      name: md5
      normalize: []
      order: 0
      original_fieldset: hash
      short: MD5 hash.
      type: keyword
    macro.project_file.hash.sha1:
      dashed_name: file-classification-macro-project-file-hash-sha1
      description: SHA1 hash.
      flat_name: file_classification.macro.project_file.hash.sha1
      ignore_above: 1024
      level: extended
      name: sha1
      normalize: []
      order: 1
      original_fieldset: hash
      short: SHA1 hash.
      type: keyword
    macro.project_file.hash.sha256:
      dashed_name: file-classification-macro-project-file-hash-sha256
      description: SHA256 hash.
      flat_name: file_classification.macro.project_file.hash.sha256
      ignore_above: 1024
      level: extended
      name: sha256
      normalize: []
      order: 2
      original_fieldset: hash
      short: SHA256 hash.
      type: keyword
    macro.project_file.hash.sha512:
      dashed_name: file-classification-macro-project-file-hash-sha512
      description: SHA512 hash.
      flat_name: file_classification.macro.project_file.hash.sha512
      ignore_above: 1024
      level: extended
      name: sha512
      normalize: []
      order: 3
      original_fieldset: hash
      short: SHA512 hash.
      type: keyword
    macro.stream:
      dashed_name: file-classification-macro-stream
      description: TODO
      flat_name: file_classification.macro.stream
      level: custom
      name: macro.stream
      normalize: []
      order: 7
      short: TODO
      type: nested
    macro.stream.hash.imphash:
      dashed_name: file-classification-macro-stream-hash-imphash
      description: Imphash.
      flat_name: file_classification.macro.stream.hash.imphash
      ignore_above: 1024
      level: extended
      name: imphash
      normalize: []
      order: 0
      original_fieldset: hash
      short: Imphash.
      type: keyword
    macro.stream.hash.md5:
      dashed_name: file-classification-macro-stream-hash-md5
      description: MD5 hash.
      flat_name: file_classification.macro.stream.hash.md5
      ignore_above: 1024
      level: extended
      name: md5
      normalize: []
      order: 0
      original_fieldset: hash
      short: MD5 hash.
      type: keyword
    macro.stream.hash.sha1:
      dashed_name: file-classification-macro-stream-hash-sha1
      description: SHA1 hash.
      flat_name: file_classification.macro.stream.hash.sha1
      ignore_above: 1024
      level: extended
      name: sha1
      normalize: []
      order: 1
      original_fieldset: hash
      short: SHA1 hash.
      type: keyword
    macro.stream.hash.sha256:
      dashed_name: file-classification-macro-stream-hash-sha256
      description: SHA256 hash.
      flat_name: file_classification.macro.stream.hash.sha256
      ignore_above: 1024
      level: extended
      name: sha256
      normalize: []
      order: 2
      original_fieldset: hash
      short: SHA256 hash.
      type: keyword
    macro.stream.hash.sha512:
      dashed_name: file-classification-macro-stream-hash-sha512
      description: SHA512 hash.
      flat_name: file_classification.macro.stream.hash.sha512
      ignore_above: 1024
      level: extended
      name: sha512
      normalize: []
      order: 3
      original_fieldset: hash
      short: SHA512 hash.
      type: keyword
    macro.stream.name:
      dashed_name: file-classification-macro-stream-name
      description: TODO
      flat_name: file_classification.macro.stream.name
      ignore_above: 1024
      level: custom
      name: macro.stream.name
      normalize: []
      order: 8
      short: TODO
      type: keyword
    macro.stream.raw_code:
      dashed_name: file-classification-macro-stream-raw-code
      description: TODO
      flat_name: file_classification.macro.stream.raw_code
      ignore_above: 1024
      level: custom
      name: macro.stream.raw_code
      normalize: []
      order: 9
      short: TODO
      type: keyword
    macro.stream.raw_code_size:
      dashed_name: file-classification-macro-stream-raw-code-size
      description: TODO
      flat_name: file_classification.macro.stream.raw_code_size
      ignore_above: 1024
      level: custom
      name: macro.stream.raw_code_size
      normalize: []
      order: 10
      short: TODO
      type: keyword
    malware_classification.features.data.buffer:
      dashed_name: file-classification-malware-classification-features-data-buffer
      description: TODO
      flat_name: file_classification.malware_classification.features.data.buffer
      ignore_above: 1024
      level: custom
      name: features.data.buffer
      normalize: []
      order: 4
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    malware_classification.features.data.decompressed_size:
      dashed_name: file-classification-malware-classification-features-data-decompressed-size
      description: TODO
      flat_name: file_classification.malware_classification.features.data.decompressed_size
      level: custom
      name: features.data.decompressed_size
      normalize: []
      order: 5
      original_fieldset: malware_classification
      short: TODO
      type: integer
    malware_classification.features.data.encoding:
      dashed_name: file-classification-malware-classification-features-data-encoding
      description: TODO
      flat_name: file_classification.malware_classification.features.data.encoding
      ignore_above: 1024
      level: custom
      name: features.data.encoding
      normalize: []
      order: 6
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    malware_classification.identifier:
      dashed_name: file-classification-malware-classification-identifier
      description: TODO
      flat_name: file_classification.malware_classification.identifier
      ignore_above: 1024
      level: custom
      name: identifier
      normalize: []
      order: 2
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    malware_classification.score:
      dashed_name: file-classification-malware-classification-score
      description: TODO
      flat_name: file_classification.malware_classification.score
      level: custom
      name: score
      normalize: []
      order: 0
      original_fieldset: malware_classification
      short: TODO
      type: double
    malware_classification.threshold:
      dashed_name: file-classification-malware-classification-threshold
      description: TODO
      flat_name: file_classification.malware_classification.threshold
      level: custom
      name: threshold
      normalize: []
      order: 1
      original_fieldset: malware_classification
      short: TODO
      type: double
    malware_classification.upx_packed:
      dashed_name: file-classification-malware-classification-upx-packed
      description: TODO
      flat_name: file_classification.malware_classification.upx_packed
      level: custom
      name: upx_packed
      normalize: []
      order: 7
      original_fieldset: malware_classification
      short: TODO
      type: boolean
    malware_classification.version:
      dashed_name: file-classification-malware-classification-version
      description: TODO
      flat_name: file_classification.malware_classification.version
      ignore_above: 1024
      level: custom
      name: version
      normalize: []
      order: 3
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    temp_file_path:
      dashed_name: file-classification-temp-file-path
      description: TODO
      flat_name: file_classification.temp_file_path
      ignore_above: 1024
      level: custom
      name: temp_file_path
      normalize: []
      order: 1
      short: TODO
      type: keyword
    yara:
      dashed_name: file-classification-yara
      description: TODO
      flat_name: file_classification.yara
      level: custom
      name: yara
      normalize: []
      order: 13
      short: TODO
      type: nested
    yara.identifier:
      dashed_name: file-classification-yara-identifier
      description: TODO
      flat_name: file_classification.yara.identifier
      ignore_above: 1024
      level: custom
      name: yara.identifier
      normalize: []
      order: 15
      short: TODO
      type: keyword
    yara.matched:
      dashed_name: file-classification-yara-matched
      description: TODO
      flat_name: file_classification.yara.matched
      ignore_above: 1024
      level: custom
      name: yara.matched
      normalize: []
      order: 17
      short: TODO
      type: keyword
    yara.rule.name:
      dashed_name: file-classification-yara-rule-name
      description: TODO
      flat_name: file_classification.yara.rule.name
      ignore_above: 1024
      level: custom
      name: yara.rule.name
      normalize: []
      order: 14
      short: TODO
      type: keyword
    yara.version:
      dashed_name: file-classification-yara-version
      description: TODO
      flat_name: file_classification.yara.version
      ignore_above: 1024
      level: custom
      name: yara.version
      normalize: []
      order: 16
      short: TODO
      type: keyword
  group: 2
  name: file_classification
  nestings:
  - hash
  - malware_classification
  prefix: file_classification.
  short: TODO
  title: File Classification
  type: group
host:
  description: 'A host is defined as a general computing instance.

    ECS host.* fields should be populated with details about the host on which the
    event happened, or from which the measurement was taken. Host types include hardware,
    virtual machines, Docker containers, and Kubernetes nodes.'
  fields:
    architecture:
      dashed_name: host-architecture
      description: Operating system architecture.
      example: x86_64
      flat_name: host.architecture
      ignore_above: 1024
      level: core
      name: architecture
      normalize: []
      order: 7
      short: Operating system architecture.
      type: keyword
    domain:
      dashed_name: host-domain
      description: 'Name of the domain of which the host is a member.

        For example, on Windows this could be the host''s Active Directory domain
        or NetBIOS domain name. For Linux this could be the domain of the host''s
        LDAP provider.'
      example: CONTOSO
      flat_name: host.domain
      ignore_above: 1024
      level: extended
      name: domain
      normalize: []
      order: 8
      short: Name of the directory the group is a member of.
      type: keyword
    geo.city_name:
      dashed_name: host-geo-city-name
      description: City name.
      example: Montreal
      flat_name: host.geo.city_name
      ignore_above: 1024
      level: core
      name: city_name
      normalize: []
      order: 4
      original_fieldset: geo
      short: City name.
      type: keyword
    geo.continent_name:
      dashed_name: host-geo-continent-name
      description: Name of the continent.
      example: North America
      flat_name: host.geo.continent_name
      ignore_above: 1024
      level: core
      name: continent_name
      normalize: []
      order: 1
      original_fieldset: geo
      short: Name of the continent.
      type: keyword
    geo.country_iso_code:
      dashed_name: host-geo-country-iso-code
      description: Country ISO code.
      example: CA
      flat_name: host.geo.country_iso_code
      ignore_above: 1024
      level: core
      name: country_iso_code
      normalize: []
      order: 5
      original_fieldset: geo
      short: Country ISO code.
      type: keyword
    geo.country_name:
      dashed_name: host-geo-country-name
      description: Country name.
      example: Canada
      flat_name: host.geo.country_name
      ignore_above: 1024
      level: core
      name: country_name
      normalize: []
      order: 2
      original_fieldset: geo
      short: Country name.
      type: keyword
    geo.location:
      dashed_name: host-geo-location
      description: Longitude and latitude.
      example: '{ "lon": -73.614830, "lat": 45.505918 }'
      flat_name: host.geo.location
      level: core
      name: location
      normalize: []
      order: 0
      original_fieldset: geo
      short: Longitude and latitude.
      type: geo_point
    geo.name:
      dashed_name: host-geo-name
      description: 'User-defined description of a location, at the level of granularity
        they care about.

        Could be the name of their data centers, the floor number, if this describes
        a local physical entity, city names.

        Not typically used in automated geolocation.'
      example: boston-dc
      flat_name: host.geo.name
      ignore_above: 1024
      level: extended
      name: name
      normalize: []
      order: 7
      original_fieldset: geo
      short: User-defined description of a location.
      type: keyword
    geo.region_iso_code:
      dashed_name: host-geo-region-iso-code
      description: Region ISO code.
      example: CA-QC
      flat_name: host.geo.region_iso_code
      ignore_above: 1024
      level: core
      name: region_iso_code
      normalize: []
      order: 6
      original_fieldset: geo
      short: Region ISO code.
      type: keyword
    geo.region_name:
      dashed_name: host-geo-region-name
      description: Region name.
      example: Quebec
      flat_name: host.geo.region_name
      ignore_above: 1024
      level: core
      name: region_name
      normalize: []
      order: 3
      original_fieldset: geo
      short: Region name.
      type: keyword
    hostname:
      dashed_name: host-hostname
      description: 'Hostname of the host.

        It normally contains what the `hostname` command returns on the host machine.'
      flat_name: host.hostname
      ignore_above: 1024
      level: core
      name: hostname
      normalize: []
      order: 0
      short: Hostname of the host.
      type: keyword
    id:
      dashed_name: host-id
      description: 'Unique host id.

        As hostname is not always unique, use values that are meaningful in your environment.

        Example: The current usage of `beat.name`.'
      flat_name: host.id
      ignore_above: 1024
      level: core
      name: id
      normalize: []
      order: 2
      short: Unique host id.
      type: keyword
    ip:
      dashed_name: host-ip
      description: Host ip addresses.
      flat_name: host.ip
      level: core
      name: ip
      normalize:
      - array
      order: 3
      short: Host ip addresses.
      type: ip
    mac:
      dashed_name: host-mac
      description: Host mac addresses.
      flat_name: host.mac
      ignore_above: 1024
      level: core
      name: mac
      normalize:
      - array
      order: 4
      short: Host mac addresses.
      type: keyword
    name:
      dashed_name: host-name
      description: 'Name of the host.

        It can contain what `hostname` returns on Unix systems, the fully qualified
        domain name, or a name specified by the user. The sender decides which value
        to use.'
      flat_name: host.name
      ignore_above: 1024
      level: core
      name: name
      normalize: []
      order: 1
      short: Name of the host.
      type: keyword
    os.family:
      dashed_name: host-os-family
      description: OS family (such as redhat, debian, freebsd, windows).
      example: debian
      flat_name: host.os.family
      ignore_above: 1024
      level: extended
      name: family
      normalize: []
      order: 3
      original_fieldset: os
      short: OS family (such as redhat, debian, freebsd, windows).
      type: keyword
    os.full:
      dashed_name: host-os-full
      description: Operating system name, including the version or code name.
      example: Mac OS Mojave
      flat_name: host.os.full
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: host.os.full.text
        name: text
        norms: false
        type: text
      name: full
      normalize: []
      order: 2
      original_fieldset: os
      short: Operating system name, including the version or code name.
      type: keyword
    os.kernel:
      dashed_name: host-os-kernel
      description: Operating system kernel version as a raw string.
      example: 4.4.0-112-generic
      flat_name: host.os.kernel
      ignore_above: 1024
      level: extended
      name: kernel
      normalize: []
      order: 5
      original_fieldset: os
      short: Operating system kernel version as a raw string.
      type: keyword
    os.name:
      dashed_name: host-os-name
      description: Operating system name, without the version.
      example: Mac OS X
      flat_name: host.os.name
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: host.os.name.text
        name: text
        norms: false
        type: text
      name: name
      normalize: []
      order: 1
      original_fieldset: os
      short: Operating system name, without the version.
      type: keyword
    os.platform:
      dashed_name: host-os-platform
      description: Operating system platform (such centos, ubuntu, windows).
      example: darwin
      flat_name: host.os.platform
      ignore_above: 1024
      level: extended
      name: platform
      normalize: []
      order: 0
      original_fieldset: os
      short: Operating system platform (such centos, ubuntu, windows).
      type: keyword
    os.version:
      dashed_name: host-os-version
      description: Operating system version as a raw string.
      example: 10.14.1
      flat_name: host.os.version
      ignore_above: 1024
      level: extended
      name: version
      normalize: []
      order: 4
      original_fieldset: os
      short: Operating system version as a raw string.
      type: keyword
    type:
      dashed_name: host-type
      description: 'Type of host.

        For Cloud providers this can be the machine type like `t2.medium`. If vm,
        this could be the container, for example, or other information meaningful
        in your environment.'
      flat_name: host.type
      ignore_above: 1024
      level: core
      name: type
      normalize: []
      order: 5
      short: Type of host.
      type: keyword
    uptime:
      dashed_name: host-uptime
      description: Seconds the host has been up.
      example: 1325
      flat_name: host.uptime
      level: extended
      name: uptime
      normalize: []
      order: 6
      short: Seconds the host has been up.
      type: long
    user.domain:
      dashed_name: host-user-domain
      description: 'Name of the directory the user is a member of.

        For example, an LDAP or Active Directory domain name.'
      flat_name: host.user.domain
      ignore_above: 1024
      level: extended
      name: domain
      normalize: []
      order: 5
      original_fieldset: user
      short: Name of the directory the user is a member of.
      type: keyword
    user.email:
      dashed_name: host-user-email
      description: User email address.
      flat_name: host.user.email
      ignore_above: 1024
      level: extended
      name: email
      normalize: []
      order: 3
      original_fieldset: user
      short: User email address.
      type: keyword
    user.full_name:
      dashed_name: host-user-full-name
      description: User's full name, if available.
      example: Albert Einstein
      flat_name: host.user.full_name
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: host.user.full_name.text
        name: text
        norms: false
        type: text
      name: full_name
      normalize: []
      order: 2
      original_fieldset: user
      short: User's full name, if available.
      type: keyword
    user.group.domain:
      dashed_name: host-user-group-domain
      description: 'Name of the directory the group is a member of.

        For example, an LDAP or Active Directory domain name.'
      flat_name: host.user.group.domain
      ignore_above: 1024
      level: extended
      name: domain
      normalize: []
      order: 2
      original_fieldset: group
      short: Name of the directory the group is a member of.
      type: keyword
    user.group.id:
      dashed_name: host-user-group-id
      description: Unique identifier for the group on the system/platform.
      flat_name: host.user.group.id
      ignore_above: 1024
      level: extended
      name: id
      normalize: []
      order: 0
      original_fieldset: group
      short: Unique identifier for the group on the system/platform.
      type: keyword
    user.group.name:
      dashed_name: host-user-group-name
      description: Name of the group.
      flat_name: host.user.group.name
      ignore_above: 1024
      level: extended
      name: name
      normalize: []
      order: 1
      original_fieldset: group
      short: Name of the group.
      type: keyword
    user.hash:
      dashed_name: host-user-hash
      description: 'Unique user hash to correlate information for a user in anonymized
        form.

        Useful if `user.id` or `user.name` contain confidential information and cannot
        be used.'
      flat_name: host.user.hash
      ignore_above: 1024
      level: extended
      name: hash
      normalize: []
      order: 4
      original_fieldset: user
      short: Unique user hash to correlate information for a user in anonymized form.
      type: keyword
    user.id:
      dashed_name: host-user-id
      description: Unique identifiers of the user.
      flat_name: host.user.id
      ignore_above: 1024
      level: core
      name: id
      normalize: []
      order: 0
      original_fieldset: user
      short: Unique identifiers of the user.
      type: keyword
    user.name:
      dashed_name: host-user-name
      description: Short name or login of the user.
      example: albert
      flat_name: host.user.name
      ignore_above: 1024
      level: core
      multi_fields:
      - flat_name: host.user.name.text
        name: text
        norms: false
        type: text
      name: name
      normalize: []
      order: 1
      original_fieldset: user
      short: Short name or login of the user.
      type: keyword
  group: 2
  name: host
  nestings:
  - geo
  - os
  - user
  prefix: host.
  short: Fields describing the relevant computing instance.
  title: Host
  type: group
process:
  description: 'These fields contain information about a process.

    These fields can help you correlate metrics information with a process id/name
    from a log message.  The `process.pid` often stays in the metric itself and is
    copied to the global field for correlation.'
  fields:
    args:
      dashed_name: process-args
      description: 'Array of process arguments, starting with the absolute path to
        the executable.

        May be filtered to protect sensitive information.'
      example:
      - /usr/bin/ssh
      - -l
      - user
      - 10.0.0.16
      flat_name: process.args
      ignore_above: 1024
      level: extended
      name: args
      normalize:
      - array
      order: 12
      short: Array of process arguments.
      type: keyword
    args_count:
      dashed_name: process-args-count
      description: 'Length of the process.args array.

        This field can be useful for querying or performing bucket analysis on how
        many arguments were provided to start a process. More arguments may be an
        indication of suspicious activity.'
      example: 4
      flat_name: process.args_count
      level: extended
      name: args_count
      normalize: []
      order: 14
      short: Length of the process.args array.
      type: long
    code_signature.exists:
      dashed_name: process-code-signature-exists
      description: Boolean to capture if a signature is present.
      example: 'true'
      flat_name: process.code_signature.exists
      level: core
      name: exists
      normalize: []
      order: 0
      original_fieldset: code_signature
      short: Boolean to capture if a signature is present.
      type: boolean
    code_signature.status:
      dashed_name: process-code-signature-status
      description: 'Additional information about the certificate status.

        This is useful for logging cryptographic errors with the certificate validity
        or trust status. Leave unpopulated if the validity or trust of the certificate
        was unchecked.'
      example: ERROR_UNTRUSTED_ROOT
      flat_name: process.code_signature.status
      ignore_above: 1024
      level: extended
      name: status
      normalize: []
      order: 4
      original_fieldset: code_signature
      short: Additional information about the certificate status.
      type: keyword
    code_signature.subject_name:
      dashed_name: process-code-signature-subject-name
      description: Subject name of the code signer
      example: Microsoft Corporation
      flat_name: process.code_signature.subject_name
      ignore_above: 1024
      level: core
      name: subject_name
      normalize: []
      order: 1
      original_fieldset: code_signature
      short: Subject name of the code signer
      type: keyword
    code_signature.trusted:
      dashed_name: process-code-signature-trusted
      description: 'Stores the trust status of the certificate chain.

        Validating the trust of the certificate chain may be complicated, and this
        field should only be populated by tools that actively check the status.'
      example: 'true'
      flat_name: process.code_signature.trusted
      level: extended
      name: trusted
      normalize: []
      order: 3
      original_fieldset: code_signature
      short: Stores the trust status of the certificate chain.
      type: boolean
    code_signature.valid:
      dashed_name: process-code-signature-valid
      description: 'Boolean to capture if the digital signature is verified against
        the binary content.

        Leave unpopulated if a certificate was unchecked.'
      example: 'true'
      flat_name: process.code_signature.valid
      level: extended
      name: valid
      normalize: []
      order: 2
      original_fieldset: code_signature
      short: Boolean to capture if the digital signature is verified against the binary
        content.
      type: boolean
    command_line:
      dashed_name: process-command-line
      description: 'Full command line that started the process, including the absolute
        path to the executable, and all arguments.

        Some arguments may be filtered to protect sensitive information.'
      example: /usr/bin/ssh -l user 10.0.0.16
      flat_name: process.command_line
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: process.command_line.text
        name: text
        norms: false
        type: text
      name: command_line
      normalize: []
      order: 10
      short: Full command line that started the process.
      type: keyword
    cpu_percent:
      dashed_name: process-cpu-percent
      description: TODO
      flat_name: process.cpu_percent
      level: custom
      name: cpu_percent
      normalize: []
      order: 31
      short: TODO
      type: double
    cwd:
      dashed_name: process-cwd
      description: TODO
      flat_name: process.cwd
      ignore_above: 1024
      level: custom
      name: cwd
      normalize: []
      order: 36
      short: TODO
      type: keyword
    defense_evasions:
      dashed_name: process-defense-evasions
      description: TODO
      flat_name: process.defense_evasions
      level: custom
      name: defense_evasions
      normalize: []
      order: 46
      short: TODO
      type: nested
    defense_evasions.call_stack:
      dashed_name: process-defense-evasions-call-stack
      description: TODO
      flat_name: process.defense_evasions.call_stack
      group: 2
      level: custom
      name: call_stack
      normalize: []
      original_fieldset: call_stack
      prefix: call_stack.
      reusable:
        expected:
        - thread
        - process.defense_evasions
        top_level: false
      short: TODO
      title: Call Stack
      type: nested
    defense_evasions.call_stack.instruction_pointer:
      dashed_name: process-defense-evasions-call-stack-instruction-pointer
      description: TODO
      flat_name: process.defense_evasions.call_stack.instruction_pointer
      ignore_above: 1024
      level: custom
      name: instruction_pointer
      normalize: []
      order: 1
      original_fieldset: call_stack
      short: TODO
      type: keyword
    defense_evasions.call_stack.memory_section.memory_address:
      dashed_name: process-defense-evasions-call-stack-memory-section-memory-address
      description: TODO
      flat_name: process.defense_evasions.call_stack.memory_section.memory_address
      ignore_above: 1024
      level: custom
      name: memory_section.memory_address
      normalize: []
      order: 2
      original_fieldset: call_stack
      short: TODO
      type: keyword
    defense_evasions.call_stack.memory_section.memory_size:
      dashed_name: process-defense-evasions-call-stack-memory-section-memory-size
      description: TODO
      flat_name: process.defense_evasions.call_stack.memory_section.memory_size
      ignore_above: 1024
      level: custom
      name: memory_section.memory_size
      normalize: []
      order: 3
      original_fieldset: call_stack
      short: TODO
      type: keyword
    defense_evasions.call_stack.memory_section.protection:
      dashed_name: process-defense-evasions-call-stack-memory-section-protection
      description: TODO
      flat_name: process.defense_evasions.call_stack.memory_section.protection
      ignore_above: 1024
      level: custom
      name: memory_section.protection
      normalize: []
      order: 4
      original_fieldset: call_stack
      short: TODO
      type: keyword
    defense_evasions.call_stack.module_path:
      dashed_name: process-defense-evasions-call-stack-module-path
      description: TODO
      flat_name: process.defense_evasions.call_stack.module_path
      ignore_above: 1024
      level: custom
      name: module_path
      normalize: []
      order: 0
      original_fieldset: call_stack
      short: TODO
      type: keyword
    defense_evasions.call_stack.rva:
      dashed_name: process-defense-evasions-call-stack-rva
      description: TODO
      flat_name: process.defense_evasions.call_stack.rva
      ignore_above: 1024
      level: custom
      name: rva
      normalize: []
      order: 6
      original_fieldset: call_stack
      short: TODO
      type: keyword
    defense_evasions.call_stack.symbol_info:
      dashed_name: process-defense-evasions-call-stack-symbol-info
      description: TODO
      flat_name: process.defense_evasions.call_stack.symbol_info
      ignore_above: 1024
      level: custom
      name: symbol_info
      normalize: []
      order: 5
      original_fieldset: call_stack
      short: TODO
      type: keyword
    defense_evasions.delta_count:
      dashed_name: process-defense-evasions-delta-count
      description: TODO
      flat_name: process.defense_evasions.delta_count
      ignore_above: 1024
      level: custom
      name: defense_evasions.delta_count
      normalize: []
      order: 57
      short: TODO
      type: keyword
    defense_evasions.evasion_subtype:
      dashed_name: process-defense-evasions-evasion-subtype
      description: TODO
      flat_name: process.defense_evasions.evasion_subtype
      ignore_above: 1024
      level: custom
      name: defense_evasions.evasion_subtype
      normalize: []
      order: 48
      short: TODO
      type: keyword
    defense_evasions.evasion_type:
      dashed_name: process-defense-evasions-evasion-type
      description: TODO
      flat_name: process.defense_evasions.evasion_type
      ignore_above: 1024
      level: custom
      name: defense_evasions.evasion_type
      normalize: []
      order: 47
      short: TODO
      type: keyword
    defense_evasions.instruction_pointer:
      dashed_name: process-defense-evasions-instruction-pointer
      description: TODO
      flat_name: process.defense_evasions.instruction_pointer
      ignore_above: 1024
      level: custom
      name: defense_evasions.instruction_pointer
      normalize: []
      order: 58
      short: TODO
      type: keyword
    defense_evasions.memory_sections:
      dashed_name: process-defense-evasions-memory-sections
      description: TODO
      flat_name: process.defense_evasions.memory_sections
      level: custom
      name: defense_evasions.memory_sections
      normalize: []
      order: 51
      short: TODO
      type: nested
    defense_evasions.memory_sections.address:
      dashed_name: process-defense-evasions-memory-sections-address
      description: TODO
      flat_name: process.defense_evasions.memory_sections.address
      ignore_above: 1024
      level: custom
      name: defense_evasions.memory_sections.address
      normalize: []
      order: 52
      short: TODO
      type: keyword
    defense_evasions.memory_sections.protection:
      dashed_name: process-defense-evasions-memory-sections-protection
      description: TODO
      flat_name: process.defense_evasions.memory_sections.protection
      ignore_above: 1024
      level: custom
      name: defense_evasions.memory_sections.protection
      normalize: []
      order: 54
      short: TODO
      type: keyword
    defense_evasions.memory_sections.size:
      dashed_name: process-defense-evasions-memory-sections-size
      description: TODO
      flat_name: process.defense_evasions.memory_sections.size
      ignore_above: 1024
      level: custom
      name: defense_evasions.memory_sections.size
      normalize: []
      order: 53
      short: TODO
      type: keyword
    defense_evasions.module_path:
      dashed_name: process-defense-evasions-module-path
      description: TODO
      flat_name: process.defense_evasions.module_path
      ignore_above: 1024
      level: custom
      name: defense_evasions.module_path
      normalize: []
      order: 49
      short: TODO
      type: keyword
    defense_evasions.thread.id:
      dashed_name: process-defense-evasions-thread-id
      description: TODO
      flat_name: process.defense_evasions.thread.id
      level: custom
      name: defense_evasions.thread.id
      normalize: []
      order: 55
      short: TODO
      type: long
    defense_evasions.thread.start_address:
      dashed_name: process-defense-evasions-thread-start-address
      description: TODO
      flat_name: process.defense_evasions.thread.start_address
      ignore_above: 1024
      level: custom
      name: defense_evasions.thread.start_address
      normalize: []
      order: 56
      short: TODO
      type: keyword
    defense_evasions.total_memory_size:
      dashed_name: process-defense-evasions-total-memory-size
      description: TODO
      flat_name: process.defense_evasions.total_memory_size
      ignore_above: 1024
      level: custom
      name: defense_evasions.total_memory_size
      normalize: []
      order: 50
      short: TODO
      type: keyword
    domain:
      dashed_name: process-domain
      description: TODO
      flat_name: process.domain
      ignore_above: 1024
      level: custom
      name: domain
      normalize: []
      order: 44
      short: TODO
      type: keyword
    entity_id:
      dashed_name: process-entity-id
      description: 'Unique identifier for the process.

        The implementation of this is specified by the data source, but some examples
        of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
        or a hash of some uniquely identifying components of a process.

        Constructing a globally unique identifier is a common practice to mitigate
        PID reuse as well as to identify a specific process over time, across multiple
        monitored hosts.'
      example: c2c455d9f99375d
      flat_name: process.entity_id
      ignore_above: 1024
      level: extended
      name: entity_id
      normalize: []
      order: 2
      short: Unique identifier for the process.
      type: keyword
    env_variables:
      dashed_name: process-env-variables
      description: TODO
      flat_name: process.env_variables
      ignore_above: 1024
      level: custom
      name: env_variables
      normalize: []
      order: 39
      short: TODO
      type: keyword
    executable:
      dashed_name: process-executable
      description: Absolute path to the process executable.
      example: /usr/bin/ssh
      flat_name: process.executable
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: process.executable.text
        name: text
        norms: false
        type: text
      name: executable
      normalize: []
      order: 16
      short: Absolute path to the process executable.
      type: keyword
    exit_code:
      dashed_name: process-exit-code
      description: 'The exit code of the process, if this is a termination event.

        The field should be absent if there is no exit code for the event (e.g. process
        start).'
      example: 137
      flat_name: process.exit_code
      level: extended
      name: exit_code
      normalize: []
      order: 30
      short: The exit code of the process.
      type: long
    group:
      dashed_name: process-group
      description: TODO
      flat_name: process.group
      ignore_above: 1024
      level: custom
      name: group
      normalize: []
      order: 37
      short: TODO
      type: keyword
    handles:
      dashed_name: process-handles
      description: TODO
      flat_name: process.handles
      level: custom
      name: handles
      normalize: []
      order: 27
      short: TODO
      type: nested
    handles.handle_id:
      dashed_name: process-handles-handle-id
      description: TODO
      flat_name: process.handles.handle_id
      level: custom
      name: handles.handle_id
      normalize: []
      order: 28
      short: TODO
      type: long
    handles.handle_name:
      dashed_name: process-handles-handle-name
      description: TODO
      flat_name: process.handles.handle_name
      ignore_above: 1024
      level: custom
      name: handles.handle_name
      normalize: []
      order: 30
      short: TODO
      type: keyword
    handles.handle_type:
      dashed_name: process-handles-handle-type
      description: TODO
      flat_name: process.handles.handle_type
      ignore_above: 1024
      level: custom
      name: handles.handle_type
      normalize: []
      order: 29
      short: TODO
      type: keyword
    hash.imphash:
      dashed_name: process-hash-imphash
      description: Imphash.
      flat_name: process.hash.imphash
      ignore_above: 1024
      level: extended
      name: imphash
      normalize: []
      order: 0
      original_fieldset: hash
      short: Imphash.
      type: keyword
    hash.md5:
      dashed_name: process-hash-md5
      description: MD5 hash.
      flat_name: process.hash.md5
      ignore_above: 1024
      level: extended
      name: md5
      normalize: []
      order: 0
      original_fieldset: hash
      short: MD5 hash.
      type: keyword
    hash.sha1:
      dashed_name: process-hash-sha1
      description: SHA1 hash.
      flat_name: process.hash.sha1
      ignore_above: 1024
      level: extended
      name: sha1
      normalize: []
      order: 1
      original_fieldset: hash
      short: SHA1 hash.
      type: keyword
    hash.sha256:
      dashed_name: process-hash-sha256
      description: SHA256 hash.
      flat_name: process.hash.sha256
      ignore_above: 1024
      level: extended
      name: sha256
      normalize: []
      order: 2
      original_fieldset: hash
      short: SHA256 hash.
      type: keyword
    hash.sha512:
      dashed_name: process-hash-sha512
      description: SHA512 hash.
      flat_name: process.hash.sha512
      ignore_above: 1024
      level: extended
      name: sha512
      normalize: []
      order: 3
      original_fieldset: hash
      short: SHA512 hash.
      type: keyword
    hash_matched_module:
      dashed_name: process-hash-matched-module
      description: TODO
      flat_name: process.hash_matched_module
      level: custom
      name: hash_matched_module
      normalize: []
      order: 0
      short: TODO
      type: boolean
    malware_classification.features.data.buffer:
      dashed_name: process-malware-classification-features-data-buffer
      description: TODO
      flat_name: process.malware_classification.features.data.buffer
      ignore_above: 1024
      level: custom
      name: features.data.buffer
      normalize: []
      order: 4
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    malware_classification.features.data.decompressed_size:
      dashed_name: process-malware-classification-features-data-decompressed-size
      description: TODO
      flat_name: process.malware_classification.features.data.decompressed_size
      level: custom
      name: features.data.decompressed_size
      normalize: []
      order: 5
      original_fieldset: malware_classification
      short: TODO
      type: integer
    malware_classification.features.data.encoding:
      dashed_name: process-malware-classification-features-data-encoding
      description: TODO
      flat_name: process.malware_classification.features.data.encoding
      ignore_above: 1024
      level: custom
      name: features.data.encoding
      normalize: []
      order: 6
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    malware_classification.identifier:
      dashed_name: process-malware-classification-identifier
      description: TODO
      flat_name: process.malware_classification.identifier
      ignore_above: 1024
      level: custom
      name: identifier
      normalize: []
      order: 2
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    malware_classification.score:
      dashed_name: process-malware-classification-score
      description: TODO
      flat_name: process.malware_classification.score
      level: custom
      name: score
      normalize: []
      order: 0
      original_fieldset: malware_classification
      short: TODO
      type: double
    malware_classification.threshold:
      dashed_name: process-malware-classification-threshold
      description: TODO
      flat_name: process.malware_classification.threshold
      level: custom
      name: threshold
      normalize: []
      order: 1
      original_fieldset: malware_classification
      short: TODO
      type: double
    malware_classification.upx_packed:
      dashed_name: process-malware-classification-upx-packed
      description: TODO
      flat_name: process.malware_classification.upx_packed
      level: custom
      name: upx_packed
      normalize: []
      order: 7
      original_fieldset: malware_classification
      short: TODO
      type: boolean
    malware_classification.version:
      dashed_name: process-malware-classification-version
      description: TODO
      flat_name: process.malware_classification.version
      ignore_above: 1024
      level: custom
      name: version
      normalize: []
      order: 3
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    memory_percent:
      dashed_name: process-memory-percent
      description: TODO
      flat_name: process.memory_percent
      level: custom
      name: memory_percent
      normalize: []
      order: 32
      short: TODO
      type: double
    memory_region:
      dashed_name: process-memory-region
      description: TODO
      flat_name: process.memory_region
      level: custom
      name: memory_region
      normalize: []
      order: 3
      short: TODO
      type: nested
    memory_region.allocation_base:
      dashed_name: process-memory-region-allocation-base
      description: TODO
      flat_name: process.memory_region.allocation_base
      ignore_above: 1024
      level: custom
      name: memory_region.allocation_base
      normalize: []
      order: 14
      short: TODO
      type: keyword
    memory_region.allocation_protection:
      dashed_name: process-memory-region-allocation-protection
      description: TODO
      flat_name: process.memory_region.allocation_protection
      ignore_above: 1024
      level: custom
      name: memory_region.allocation_protection
      normalize: []
      order: 20
      short: TODO
      type: keyword
    memory_region.bytes:
      dashed_name: process-memory-region-bytes
      description: TODO
      flat_name: process.memory_region.bytes
      ignore_above: 1024
      level: custom
      name: memory_region.bytes
      normalize: []
      order: 7
      short: TODO
      type: keyword
    memory_region.histogram:
      dashed_name: process-memory-region-histogram
      description: TODO
      flat_name: process.memory_region.histogram
      level: custom
      name: memory_region.histogram
      normalize: []
      order: 9
      short: TODO
      type: nested
    memory_region.histogram.histogram_array:
      dashed_name: process-memory-region-histogram-histogram-array
      description: TODO
      flat_name: process.memory_region.histogram.histogram_array
      ignore_above: 1024
      level: custom
      name: memory_region.histogram.histogram_array
      normalize: []
      order: 12
      short: TODO
      type: keyword
    memory_region.histogram.histogram_flavor:
      dashed_name: process-memory-region-histogram-histogram-flavor
      description: TODO
      flat_name: process.memory_region.histogram.histogram_flavor
      ignore_above: 1024
      level: custom
      name: memory_region.histogram.histogram_flavor
      normalize: []
      order: 10
      short: TODO
      type: keyword
    memory_region.histogram.histogram_resolution:
      dashed_name: process-memory-region-histogram-histogram-resolution
      description: TODO
      flat_name: process.memory_region.histogram.histogram_resolution
      ignore_above: 1024
      level: custom
      name: memory_region.histogram.histogram_resolution
      normalize: []
      order: 11
      short: TODO
      type: keyword
    memory_region.length:
      dashed_name: process-memory-region-length
      description: TODO
      flat_name: process.memory_region.length
      ignore_above: 1024
      level: custom
      name: memory_region.length
      normalize: []
      order: 5
      short: TODO
      type: keyword
    memory_region.memory:
      dashed_name: process-memory-region-memory
      description: TODO
      flat_name: process.memory_region.memory
      ignore_above: 1024
      level: custom
      name: memory_region.memory
      normalize: []
      order: 8
      short: TODO
      type: keyword
    memory_region.memory_address:
      dashed_name: process-memory-region-memory-address
      description: TODO
      flat_name: process.memory_region.memory_address
      ignore_above: 1024
      level: custom
      name: memory_region.memory_address
      normalize: []
      order: 4
      short: TODO
      type: keyword
    memory_region.module_path:
      dashed_name: process-memory-region-module-path
      description: TODO
      flat_name: process.memory_region.module_path
      ignore_above: 1024
      level: custom
      name: memory_region.module_path
      normalize: []
      order: 21
      short: TODO
      type: keyword
    memory_region.permission:
      dashed_name: process-memory-region-permission
      description: TODO
      flat_name: process.memory_region.permission
      ignore_above: 1024
      level: custom
      name: memory_region.permission
      normalize: []
      order: 13
      short: TODO
      type: keyword
    memory_region.protection:
      dashed_name: process-memory-region-protection
      description: TODO
      flat_name: process.memory_region.protection
      ignore_above: 1024
      level: custom
      name: memory_region.protection
      normalize: []
      order: 19
      short: TODO
      type: keyword
    memory_region.region_base:
      dashed_name: process-memory-region-region-base
      description: TODO
      flat_name: process.memory_region.region_base
      ignore_above: 1024
      level: custom
      name: memory_region.region_base
      normalize: []
      order: 15
      short: TODO
      type: keyword
    memory_region.region_size:
      dashed_name: process-memory-region-region-size
      description: TODO
      flat_name: process.memory_region.region_size
      ignore_above: 1024
      level: custom
      name: memory_region.region_size
      normalize: []
      order: 16
      short: TODO
      type: keyword
    memory_region.region_tag:
      dashed_name: process-memory-region-region-tag
      description: TODO
      flat_name: process.memory_region.region_tag
      ignore_above: 1024
      level: custom
      name: memory_region.region_tag
      normalize: []
      order: 17
      short: TODO
      type: keyword
    memory_region.type:
      dashed_name: process-memory-region-type
      description: TODO
      flat_name: process.memory_region.type
      ignore_above: 1024
      level: custom
      name: memory_region.type
      normalize: []
      order: 18
      short: TODO
      type: keyword
    memory_region.unbacked_on_disk:
      dashed_name: process-memory-region-unbacked-on-disk
      description: TODO
      flat_name: process.memory_region.unbacked_on_disk
      level: custom
      name: memory_region.unbacked_on_disk
      normalize: []
      order: 6
      short: TODO
      type: boolean
    modules:
      dashed_name: process-modules
      description: These fields contain information about a list of modules.
      flat_name: process.modules
      group: 2
      level: custom
      name: modules
      normalize: []
      original_fieldset: modules
      prefix: modules.
      reusable:
        expected:
        - process
        top_level: false
      short: These fields contain information about a list of modules.
      title: Modules
      type: nested
    modules.architecture:
      dashed_name: process-modules-architecture
      description: TODO
      flat_name: process.modules.architecture
      ignore_above: 1024
      level: custom
      name: architecture
      normalize: []
      order: 4
      original_fieldset: modules
      short: TODO
      type: keyword
    modules.compile_time:
      dashed_name: process-modules-compile-time
      description: TODO
      flat_name: process.modules.compile_time
      level: custom
      name: compile_time
      normalize: []
      order: 3
      original_fieldset: modules
      short: TODO
      type: date
    modules.hash.imphash:
      dashed_name: process-modules-hash-imphash
      description: Imphash.
      flat_name: process.modules.hash.imphash
      ignore_above: 1024
      level: extended
      name: imphash
      normalize: []
      order: 0
      original_fieldset: hash
      short: Imphash.
      type: keyword
    modules.hash.md5:
      dashed_name: process-modules-hash-md5
      description: MD5 hash.
      flat_name: process.modules.hash.md5
      ignore_above: 1024
      level: extended
      name: md5
      normalize: []
      order: 0
      original_fieldset: hash
      short: MD5 hash.
      type: keyword
    modules.hash.sha1:
      dashed_name: process-modules-hash-sha1
      description: SHA1 hash.
      flat_name: process.modules.hash.sha1
      ignore_above: 1024
      level: extended
      name: sha1
      normalize: []
      order: 1
      original_fieldset: hash
      short: SHA1 hash.
      type: keyword
    modules.hash.sha256:
      dashed_name: process-modules-hash-sha256
      description: SHA256 hash.
      flat_name: process.modules.hash.sha256
      ignore_above: 1024
      level: extended
      name: sha256
      normalize: []
      order: 2
      original_fieldset: hash
      short: SHA256 hash.
      type: keyword
    modules.hash.sha512:
      dashed_name: process-modules-hash-sha512
      description: SHA512 hash.
      flat_name: process.modules.hash.sha512
      ignore_above: 1024
      level: extended
      name: sha512
      normalize: []
      order: 3
      original_fieldset: hash
      short: SHA512 hash.
      type: keyword
    modules.malware_classification.features.data.buffer:
      dashed_name: process-modules-malware-classification-features-data-buffer
      description: TODO
      flat_name: process.modules.malware_classification.features.data.buffer
      ignore_above: 1024
      level: custom
      name: features.data.buffer
      normalize: []
      order: 4
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    modules.malware_classification.features.data.decompressed_size:
      dashed_name: process-modules-malware-classification-features-data-decompressed-size
      description: TODO
      flat_name: process.modules.malware_classification.features.data.decompressed_size
      level: custom
      name: features.data.decompressed_size
      normalize: []
      order: 5
      original_fieldset: malware_classification
      short: TODO
      type: integer
    modules.malware_classification.features.data.encoding:
      dashed_name: process-modules-malware-classification-features-data-encoding
      description: TODO
      flat_name: process.modules.malware_classification.features.data.encoding
      ignore_above: 1024
      level: custom
      name: features.data.encoding
      normalize: []
      order: 6
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    modules.malware_classification.identifier:
      dashed_name: process-modules-malware-classification-identifier
      description: TODO
      flat_name: process.modules.malware_classification.identifier
      ignore_above: 1024
      level: custom
      name: identifier
      normalize: []
      order: 2
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    modules.malware_classification.score:
      dashed_name: process-modules-malware-classification-score
      description: TODO
      flat_name: process.modules.malware_classification.score
      level: custom
      name: score
      normalize: []
      order: 0
      original_fieldset: malware_classification
      short: TODO
      type: double
    modules.malware_classification.threshold:
      dashed_name: process-modules-malware-classification-threshold
      description: TODO
      flat_name: process.modules.malware_classification.threshold
      level: custom
      name: threshold
      normalize: []
      order: 1
      original_fieldset: malware_classification
      short: TODO
      type: double
    modules.malware_classification.upx_packed:
      dashed_name: process-modules-malware-classification-upx-packed
      description: TODO
      flat_name: process.modules.malware_classification.upx_packed
      level: custom
      name: upx_packed
      normalize: []
      order: 7
      original_fieldset: malware_classification
      short: TODO
      type: boolean
    modules.malware_classification.version:
      dashed_name: process-modules-malware-classification-version
      description: TODO
      flat_name: process.modules.malware_classification.version
      ignore_above: 1024
      level: custom
      name: version
      normalize: []
      order: 3
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    modules.mapped_address:
      dashed_name: process-modules-mapped-address
      description: TODO
      flat_name: process.modules.mapped_address
      ignore_above: 1024
      level: custom
      name: mapped_address
      normalize: []
      order: 1
      original_fieldset: modules
      short: TODO
      type: keyword
    modules.mapped_size:
      dashed_name: process-modules-mapped-size
      description: TODO
      flat_name: process.modules.mapped_size
      level: custom
      name: mapped_size
      normalize: []
      order: 2
      original_fieldset: modules
      short: TODO
      type: long
    modules.path:
      dashed_name: process-modules-path
      description: TODO
      flat_name: process.modules.path
      ignore_above: 1024
      level: custom
      name: path
      normalize: []
      order: 0
      original_fieldset: modules
      short: TODO
      type: keyword
    modules.pe_exports:
      dashed_name: process-modules-pe-exports
      description: TODO
      flat_name: process.modules.pe_exports
      level: custom
      name: pe_exports
      normalize: []
      order: 8
      original_fieldset: modules
      short: TODO
      type: nested
    modules.pe_exports.name:
      dashed_name: process-modules-pe-exports-name
      description: TODO
      flat_name: process.modules.pe_exports.name
      ignore_above: 1024
      level: custom
      name: pe_exports.name
      normalize: []
      order: 10
      original_fieldset: modules
      short: TODO
      type: keyword
    modules.pe_exports.ordinal:
      dashed_name: process-modules-pe-exports-ordinal
      description: TODO
      flat_name: process.modules.pe_exports.ordinal
      level: custom
      name: pe_exports.ordinal
      normalize: []
      order: 9
      original_fieldset: modules
      short: TODO
      type: long
    modules.pe_imports:
      dashed_name: process-modules-pe-imports
      description: TODO
      flat_name: process.modules.pe_imports
      level: custom
      name: pe_imports
      normalize: []
      order: 5
      original_fieldset: modules
      short: TODO
      type: nested
    modules.pe_imports.dll_name:
      dashed_name: process-modules-pe-imports-dll-name
      description: TODO
      flat_name: process.modules.pe_imports.dll_name
      ignore_above: 1024
      level: custom
      name: pe_imports.dll_name
      normalize: []
      order: 6
      original_fieldset: modules
      short: TODO
      type: keyword
    modules.pe_imports.import_names:
      dashed_name: process-modules-pe-imports-import-names
      description: TODO
      flat_name: process.modules.pe_imports.import_names
      ignore_above: 1024
      level: custom
      name: pe_imports.import_names
      normalize: []
      order: 7
      original_fieldset: modules
      short: TODO
      type: keyword
    modules.signature_signer:
      dashed_name: process-modules-signature-signer
      description: TODO
      flat_name: process.modules.signature_signer
      ignore_above: 1024
      level: custom
      name: signature_signer
      normalize: []
      order: 11
      original_fieldset: modules
      short: TODO
      type: keyword
    modules.signature_status:
      dashed_name: process-modules-signature-status
      description: TODO
      flat_name: process.modules.signature_status
      ignore_above: 1024
      level: custom
      name: signature_status
      normalize: []
      order: 12
      original_fieldset: modules
      short: TODO
      type: keyword
    name:
      dashed_name: process-name
      description: 'Process name.

        Sometimes called program name or similar.'
      example: ssh
      flat_name: process.name
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: process.name.text
        name: text
        norms: false
        type: text
      name: name
      normalize: []
      order: 4
      short: Process name.
      type: keyword
    num_threads:
      dashed_name: process-num-threads
      description: TODO
      flat_name: process.num_threads
      level: custom
      name: num_threads
      normalize: []
      order: 33
      short: TODO
      type: long
    parent.args:
      dashed_name: process-parent-args
      description: 'Array of process arguments.

        May be filtered to protect sensitive information.'
      example:
      - ssh
      - -l
      - user
      - 10.0.0.16
      flat_name: process.parent.args
      ignore_above: 1024
      level: extended
      name: parent.args
      normalize:
      - array
      order: 13
      short: Array of process arguments.
      type: keyword
    parent.args_count:
      dashed_name: process-parent-args-count
      description: 'Length of the process.args array.

        This field can be useful for querying or performing bucket analysis on how
        many arguments were provided to start a process. More arguments may be an
        indication of suspicious activity.'
      example: 4
      flat_name: process.parent.args_count
      level: extended
      name: parent.args_count
      normalize: []
      order: 15
      short: Length of the process.args array.
      type: long
    parent.code_signature.exists:
      dashed_name: process-parent-code-signature-exists
      description: Boolean to capture if a signature is present.
      example: 'true'
      flat_name: process.parent.code_signature.exists
      level: core
      name: exists
      normalize: []
      order: 0
      original_fieldset: code_signature
      short: Boolean to capture if a signature is present.
      type: boolean
    parent.code_signature.status:
      dashed_name: process-parent-code-signature-status
      description: 'Additional information about the certificate status.

        This is useful for logging cryptographic errors with the certificate validity
        or trust status. Leave unpopulated if the validity or trust of the certificate
        was unchecked.'
      example: ERROR_UNTRUSTED_ROOT
      flat_name: process.parent.code_signature.status
      ignore_above: 1024
      level: extended
      name: status
      normalize: []
      order: 4
      original_fieldset: code_signature
      short: Additional information about the certificate status.
      type: keyword
    parent.code_signature.subject_name:
      dashed_name: process-parent-code-signature-subject-name
      description: Subject name of the code signer
      example: Microsoft Corporation
      flat_name: process.parent.code_signature.subject_name
      ignore_above: 1024
      level: core
      name: subject_name
      normalize: []
      order: 1
      original_fieldset: code_signature
      short: Subject name of the code signer
      type: keyword
    parent.code_signature.trusted:
      dashed_name: process-parent-code-signature-trusted
      description: 'Stores the trust status of the certificate chain.

        Validating the trust of the certificate chain may be complicated, and this
        field should only be populated by tools that actively check the status.'
      example: 'true'
      flat_name: process.parent.code_signature.trusted
      level: extended
      name: trusted
      normalize: []
      order: 3
      original_fieldset: code_signature
      short: Stores the trust status of the certificate chain.
      type: boolean
    parent.code_signature.valid:
      dashed_name: process-parent-code-signature-valid
      description: 'Boolean to capture if the digital signature is verified against
        the binary content.

        Leave unpopulated if a certificate was unchecked.'
      example: 'true'
      flat_name: process.parent.code_signature.valid
      level: extended
      name: valid
      normalize: []
      order: 2
      original_fieldset: code_signature
      short: Boolean to capture if the digital signature is verified against the binary
        content.
      type: boolean
    parent.command_line:
      dashed_name: process-parent-command-line
      description: 'Full command line that started the process, including the absolute
        path to the executable, and all arguments.

        Some arguments may be filtered to protect sensitive information.'
      example: /usr/bin/ssh -l user 10.0.0.16
      flat_name: process.parent.command_line
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: process.parent.command_line.text
        name: text
        norms: false
        type: text
      name: parent.command_line
      normalize: []
      order: 11
      short: Full command line that started the process.
      type: keyword
    parent.entity_id:
      dashed_name: process-parent-entity-id
      description: 'Unique identifier for the process.

        The implementation of this is specified by the data source, but some examples
        of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
        or a hash of some uniquely identifying components of a process.

        Constructing a globally unique identifier is a common practice to mitigate
        PID reuse as well as to identify a specific process over time, across multiple
        monitored hosts.'
      example: c2c455d9f99375d
      flat_name: process.parent.entity_id
      ignore_above: 1024
      level: extended
      name: parent.entity_id
      normalize: []
      order: 3
      short: Unique identifier for the process.
      type: keyword
    parent.executable:
      dashed_name: process-parent-executable
      description: Absolute path to the process executable.
      example: /usr/bin/ssh
      flat_name: process.parent.executable
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: process.parent.executable.text
        name: text
        norms: false
        type: text
      name: parent.executable
      normalize: []
      order: 17
      short: Absolute path to the process executable.
      type: keyword
    parent.exit_code:
      dashed_name: process-parent-exit-code
      description: 'The exit code of the process, if this is a termination event.

        The field should be absent if there is no exit code for the event (e.g. process
        start).'
      example: 137
      flat_name: process.parent.exit_code
      level: extended
      name: parent.exit_code
      normalize: []
      order: 31
      short: The exit code of the process.
      type: long
    parent.hash.imphash:
      dashed_name: process-parent-hash-imphash
      description: Imphash.
      flat_name: process.parent.hash.imphash
      ignore_above: 1024
      level: extended
      name: imphash
      normalize: []
      order: 0
      original_fieldset: hash
      short: Imphash.
      type: keyword
    parent.hash.md5:
      dashed_name: process-parent-hash-md5
      description: MD5 hash.
      flat_name: process.parent.hash.md5
      ignore_above: 1024
      level: extended
      name: md5
      normalize: []
      order: 0
      original_fieldset: hash
      short: MD5 hash.
      type: keyword
    parent.hash.sha1:
      dashed_name: process-parent-hash-sha1
      description: SHA1 hash.
      flat_name: process.parent.hash.sha1
      ignore_above: 1024
      level: extended
      name: sha1
      normalize: []
      order: 1
      original_fieldset: hash
      short: SHA1 hash.
      type: keyword
    parent.hash.sha256:
      dashed_name: process-parent-hash-sha256
      description: SHA256 hash.
      flat_name: process.parent.hash.sha256
      ignore_above: 1024
      level: extended
      name: sha256
      normalize: []
      order: 2
      original_fieldset: hash
      short: SHA256 hash.
      type: keyword
    parent.hash.sha512:
      dashed_name: process-parent-hash-sha512
      description: SHA512 hash.
      flat_name: process.parent.hash.sha512
      ignore_above: 1024
      level: extended
      name: sha512
      normalize: []
      order: 3
      original_fieldset: hash
      short: SHA512 hash.
      type: keyword
    parent.name:
      dashed_name: process-parent-name
      description: 'Process name.

        Sometimes called program name or similar.'
      example: ssh
      flat_name: process.parent.name
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: process.parent.name.text
        name: text
        norms: false
        type: text
      name: parent.name
      normalize: []
      order: 5
      short: Process name.
      type: keyword
    parent.pgid:
      dashed_name: process-parent-pgid
      description: Identifier of the group of processes the process belongs to.
      flat_name: process.parent.pgid
      format: string
      level: extended
      name: parent.pgid
      normalize: []
      order: 9
      short: Identifier of the group of processes the process belongs to.
      type: long
    parent.pid:
      dashed_name: process-parent-pid
      description: Process id.
      example: 4242
      flat_name: process.parent.pid
      format: string
      level: core
      name: parent.pid
      normalize: []
      order: 1
      short: Process id.
      type: long
    parent.ppid:
      dashed_name: process-parent-ppid
      description: Parent process' pid.
      example: 4241
      flat_name: process.parent.ppid
      format: string
      level: extended
      name: parent.ppid
      normalize: []
      order: 7
      short: Parent process' pid.
      type: long
    parent.start:
      dashed_name: process-parent-start
      description: The time the process started.
      example: '2016-05-23T08:05:34.853Z'
      flat_name: process.parent.start
      level: extended
      name: parent.start
      normalize: []
      order: 25
      short: The time the process started.
      type: date
    parent.thread.id:
      dashed_name: process-parent-thread-id
      description: Thread ID.
      example: 4242
      flat_name: process.parent.thread.id
      format: string
      level: extended
      name: parent.thread.id
      normalize: []
      order: 21
      short: Thread ID.
      type: long
    parent.thread.name:
      dashed_name: process-parent-thread-name
      description: Thread name.
      example: thread-0
      flat_name: process.parent.thread.name
      ignore_above: 1024
      level: extended
      name: parent.thread.name
      normalize: []
      order: 23
      short: Thread name.
      type: keyword
    parent.title:
      dashed_name: process-parent-title
      description: 'Process title.

        The proctitle, some times the same as process name. Can also be different:
        for example a browser setting its title to the web page currently opened.'
      flat_name: process.parent.title
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: process.parent.title.text
        name: text
        norms: false
        type: text
      name: parent.title
      normalize: []
      order: 19
      short: Process title.
      type: keyword
    parent.uptime:
      dashed_name: process-parent-uptime
      description: Seconds the process has been up.
      example: 1325
      flat_name: process.parent.uptime
      level: extended
      name: parent.uptime
      normalize: []
      order: 27
      short: Seconds the process has been up.
      type: long
    parent.working_directory:
      dashed_name: process-parent-working-directory
      description: The working directory of the process.
      example: /home/alice
      flat_name: process.parent.working_directory
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: process.parent.working_directory.text
        name: text
        norms: false
        type: text
      name: parent.working_directory
      normalize: []
      order: 29
      short: The working directory of the process.
      type: keyword
    pe.company:
      dashed_name: process-pe-company
      description: Internal company name of the file, provided at compile-time.
      example: Microsoft Corporation
      flat_name: process.pe.company
      ignore_above: 1024
      level: extended
      name: company
      normalize: []
      order: 4
      original_fieldset: pe
      short: Internal company name of the file, provided at compile-time.
      type: keyword
    pe.description:
      dashed_name: process-pe-description
      description: Internal description of the file, provided at compile-time.
      example: Paint
      flat_name: process.pe.description
      ignore_above: 1024
      level: extended
      name: description
      normalize: []
      order: 2
      original_fieldset: pe
      short: Internal description of the file, provided at compile-time.
      type: keyword
    pe.file_version:
      dashed_name: process-pe-file-version
      description: Internal version of the file, provided at compile-time.
      example: 6.3.9600.17415
      flat_name: process.pe.file_version
      ignore_above: 1024
      level: extended
      name: file_version
      normalize: []
      order: 1
      original_fieldset: pe
      short: Process name.
      type: keyword
    pe.malware_classification.features.data.buffer:
      dashed_name: process-pe-malware-classification-features-data-buffer
      description: TODO
      flat_name: process.pe.malware_classification.features.data.buffer
      ignore_above: 1024
      level: custom
      name: features.data.buffer
      normalize: []
      order: 4
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    pe.malware_classification.features.data.decompressed_size:
      dashed_name: process-pe-malware-classification-features-data-decompressed-size
      description: TODO
      flat_name: process.pe.malware_classification.features.data.decompressed_size
      level: custom
      name: features.data.decompressed_size
      normalize: []
      order: 5
      original_fieldset: malware_classification
      short: TODO
      type: integer
    pe.malware_classification.features.data.encoding:
      dashed_name: process-pe-malware-classification-features-data-encoding
      description: TODO
      flat_name: process.pe.malware_classification.features.data.encoding
      ignore_above: 1024
      level: custom
      name: features.data.encoding
      normalize: []
      order: 6
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    pe.malware_classification.identifier:
      dashed_name: process-pe-malware-classification-identifier
      description: TODO
      flat_name: process.pe.malware_classification.identifier
      ignore_above: 1024
      level: custom
      name: identifier
      normalize: []
      order: 2
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    pe.malware_classification.score:
      dashed_name: process-pe-malware-classification-score
      description: TODO
      flat_name: process.pe.malware_classification.score
      level: custom
      name: score
      normalize: []
      order: 0
      original_fieldset: malware_classification
      short: TODO
      type: double
    pe.malware_classification.threshold:
      dashed_name: process-pe-malware-classification-threshold
      description: TODO
      flat_name: process.pe.malware_classification.threshold
      level: custom
      name: threshold
      normalize: []
      order: 1
      original_fieldset: malware_classification
      short: TODO
      type: double
    pe.malware_classification.upx_packed:
      dashed_name: process-pe-malware-classification-upx-packed
      description: TODO
      flat_name: process.pe.malware_classification.upx_packed
      level: custom
      name: upx_packed
      normalize: []
      order: 7
      original_fieldset: malware_classification
      short: TODO
      type: boolean
    pe.malware_classification.version:
      dashed_name: process-pe-malware-classification-version
      description: TODO
      flat_name: process.pe.malware_classification.version
      ignore_above: 1024
      level: custom
      name: version
      normalize: []
      order: 3
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    pe.original_file_name:
      dashed_name: process-pe-original-file-name
      description: Internal name of the file, provided at compile-time.
      example: MSPAINT.EXE
      flat_name: process.pe.original_file_name
      ignore_above: 1024
      level: extended
      name: original_file_name
      normalize: []
      order: 0
      original_fieldset: pe
      short: Internal name of the file, provided at compile-time.
      type: keyword
    pe.product:
      dashed_name: process-pe-product
      description: Internal product name of the file, provided at compile-time.
      example: "Microsoft\xAE Windows\xAE Operating System"
      flat_name: process.pe.product
      ignore_above: 1024
      level: extended
      name: product
      normalize: []
      order: 3
      original_fieldset: pe
      short: Internal product name of the file, provided at compile-time.
      type: keyword
    pgid:
      dashed_name: process-pgid
      description: Identifier of the group of processes the process belongs to.
      flat_name: process.pgid
      format: string
      level: extended
      name: pgid
      normalize: []
      order: 8
      short: Identifier of the group of processes the process belongs to.
      type: long
    phys_memory_bytes:
      dashed_name: process-phys-memory-bytes
      description: TODO
      flat_name: process.phys_memory_bytes
      ignore_above: 1024
      level: custom
      name: phys_memory_bytes
      normalize: []
      order: 35
      short: TODO
      type: keyword
    pid:
      dashed_name: process-pid
      description: Process id.
      example: 4242
      flat_name: process.pid
      format: string
      level: core
      name: pid
      normalize: []
      order: 0
      short: Process id.
      type: long
    ppid:
      dashed_name: process-ppid
      description: Parent process' pid.
      example: 4241
      flat_name: process.ppid
      format: string
      level: extended
      name: ppid
      normalize: []
      order: 6
      short: Parent process' pid.
      type: long
    services:
      dashed_name: process-services
      description: TODO
      flat_name: process.services
      ignore_above: 1024
      level: custom
      name: services
      normalize: []
      order: 59
      short: TODO
      type: keyword
    session_id:
      dashed_name: process-session-id
      description: TODO
      flat_name: process.session_id
      level: custom
      name: session_id
      normalize: []
      order: 43
      short: TODO
      type: long
    short_name:
      dashed_name: process-short-name
      description: TODO
      flat_name: process.short_name
      ignore_above: 1024
      level: custom
      name: short_name
      normalize: []
      order: 38
      short: TODO
      type: keyword
    sid:
      dashed_name: process-sid
      description: TODO
      flat_name: process.sid
      ignore_above: 1024
      level: custom
      name: sid
      normalize: []
      order: 45
      short: TODO
      type: keyword
    start:
      dashed_name: process-start
      description: The time the process started.
      example: '2016-05-23T08:05:34.853Z'
      flat_name: process.start
      level: extended
      name: start
      normalize: []
      order: 24
      short: The time the process started.
      type: date
    thread.call_stack:
      dashed_name: process-thread-call-stack
      description: TODO
      flat_name: process.thread.call_stack
      group: 2
      level: custom
      name: call_stack
      normalize: []
      original_fieldset: call_stack
      prefix: call_stack.
      reusable:
        expected:
        - thread
        - process.defense_evasions
        top_level: false
      short: TODO
      title: Call Stack
      type: nested
    thread.call_stack.instruction_pointer:
      dashed_name: process-thread-call-stack-instruction-pointer
      description: TODO
      flat_name: process.thread.call_stack.instruction_pointer
      ignore_above: 1024
      level: custom
      name: instruction_pointer
      normalize: []
      order: 1
      original_fieldset: call_stack
      short: TODO
      type: keyword
    thread.call_stack.memory_section.memory_address:
      dashed_name: process-thread-call-stack-memory-section-memory-address
      description: TODO
      flat_name: process.thread.call_stack.memory_section.memory_address
      ignore_above: 1024
      level: custom
      name: memory_section.memory_address
      normalize: []
      order: 2
      original_fieldset: call_stack
      short: TODO
      type: keyword
    thread.call_stack.memory_section.memory_size:
      dashed_name: process-thread-call-stack-memory-section-memory-size
      description: TODO
      flat_name: process.thread.call_stack.memory_section.memory_size
      ignore_above: 1024
      level: custom
      name: memory_section.memory_size
      normalize: []
      order: 3
      original_fieldset: call_stack
      short: TODO
      type: keyword
    thread.call_stack.memory_section.protection:
      dashed_name: process-thread-call-stack-memory-section-protection
      description: TODO
      flat_name: process.thread.call_stack.memory_section.protection
      ignore_above: 1024
      level: custom
      name: memory_section.protection
      normalize: []
      order: 4
      original_fieldset: call_stack
      short: TODO
      type: keyword
    thread.call_stack.module_path:
      dashed_name: process-thread-call-stack-module-path
      description: TODO
      flat_name: process.thread.call_stack.module_path
      ignore_above: 1024
      level: custom
      name: module_path
      normalize: []
      order: 0
      original_fieldset: call_stack
      short: TODO
      type: keyword
    thread.call_stack.rva:
      dashed_name: process-thread-call-stack-rva
      description: TODO
      flat_name: process.thread.call_stack.rva
      ignore_above: 1024
      level: custom
      name: rva
      normalize: []
      order: 6
      original_fieldset: call_stack
      short: TODO
      type: keyword
    thread.call_stack.symbol_info:
      dashed_name: process-thread-call-stack-symbol-info
      description: TODO
      flat_name: process.thread.call_stack.symbol_info
      ignore_above: 1024
      level: custom
      name: symbol_info
      normalize: []
      order: 5
      original_fieldset: call_stack
      short: TODO
      type: keyword
    thread.service:
      dashed_name: process-thread-service
      description: Service associated with the thread.
      example: VaultSvc
      flat_name: process.thread.service
      ignore_above: 1024
      level: extended
      name: service
      normalize: []
      order: 3
      original_fieldset: thread
      short: Service associated with the thread.
      type: keyword
    thread.start:
      dashed_name: process-thread-start
      description: The time the thread started.
      example: '2016-05-23T08:05:34.853Z'
      flat_name: process.thread.start
      level: extended
      name: start
      normalize: []
      order: 0
      original_fieldset: thread
      short: The time the thread started.
      type: date
    thread.start_address:
      dashed_name: process-thread-start-address
      description: Memory address where the thread started.
      example: 5442508
      flat_name: process.thread.start_address
      ignore_above: 1024
      level: extended
      name: start_address
      normalize: []
      order: 1
      original_fieldset: thread
      short: Memory address where the thread started.
      type: keyword
    thread.start_address_module:
      dashed_name: process-thread-start-address-module
      description: TODO
      example: C:\Program Files\VMware\VMware Tools\vmtoolsd.exe
      flat_name: process.thread.start_address_module
      ignore_above: 1024
      level: extended
      name: start_address_module
      normalize: []
      order: 2
      original_fieldset: thread
      short: TODO
      type: keyword
    thread.token.domain:
      dashed_name: process-thread-token-domain
      description: TODO
      flat_name: process.thread.token.domain
      ignore_above: 1024
      level: extended
      name: domain
      normalize: []
      order: 1
      original_fieldset: token
      short: TODO
      type: keyword
    thread.token.impersonation_level:
      dashed_name: process-thread-token-impersonation-level
      description: Impersonation level. Only valid for impersonation tokens.
      flat_name: process.thread.token.impersonation_level
      ignore_above: 1024
      level: extended
      name: impersonation_level
      normalize: []
      order: 4
      original_fieldset: token
      short: Impersonation level. Only valid for impersonation tokens.
      type: keyword
    thread.token.integrity_level:
      dashed_name: process-thread-token-integrity-level
      description: Numeric integrity level.
      flat_name: process.thread.token.integrity_level
      level: extended
      name: integrity_level
      normalize: []
      order: 5
      original_fieldset: token
      short: Numeric integrity level.
      type: long
    thread.token.integrity_level_name:
      dashed_name: process-thread-token-integrity-level-name
      description: Human readable integrity level.
      flat_name: process.thread.token.integrity_level_name
      ignore_above: 1024
      level: extended
      name: integrity_level_name
      normalize: []
      order: 6
      original_fieldset: token
      short: Human readable integrity level.
      type: keyword
    thread.token.is_appcontainer:
      dashed_name: process-thread-token-is-appcontainer
      description: Whether or not this is an appcontainer token.
      flat_name: process.thread.token.is_appcontainer
      level: extended
      name: is_appcontainer
      normalize: []
      order: 7
      original_fieldset: token
      short: Whether or not this is an appcontainer token.
      type: boolean
    thread.token.privileges:
      dashed_name: process-thread-token-privileges
      description: Array describing the privileges associated with the token.
      flat_name: process.thread.token.privileges
      level: extended
      name: privileges
      normalize: []
      order: 8
      original_fieldset: token
      short: Array describing the privileges associated with the token.
      type: nested
    thread.token.privileges.description:
      dashed_name: process-thread-token-privileges-description
      description: Description of the privilege.
      flat_name: process.thread.token.privileges.description
      ignore_above: 1024
      level: extended
      name: privileges.description
      normalize: []
      order: 11
      original_fieldset: token
      short: Description of the privilege.
      type: keyword
    thread.token.privileges.enabled:
      dashed_name: process-thread-token-privileges-enabled
      description: Whether or not the privilege is enabled.
      flat_name: process.thread.token.privileges.enabled
      level: extended
      name: privileges.enabled
      normalize: []
      order: 10
      original_fieldset: token
      short: Whether or not the privilege is enabled.
      type: boolean
    thread.token.privileges.name:
      dashed_name: process-thread-token-privileges-name
      description: Name of the privilege.
      flat_name: process.thread.token.privileges.name
      ignore_above: 1024
      level: extended
      name: privileges.name
      normalize: []
      order: 9
      original_fieldset: token
      short: Name of the privilege.
      type: keyword
    thread.token.sid:
      dashed_name: process-thread-token-sid
      description: TODO
      flat_name: process.thread.token.sid
      ignore_above: 1024
      level: extended
      name: sid
      normalize: []
      order: 2
      original_fieldset: token
      short: TODO
      type: keyword
    thread.token.type:
      dashed_name: process-thread-token-type
      description: Type of the token, either primary or impersonation.
      flat_name: process.thread.token.type
      ignore_above: 1024
      level: extended
      name: type
      normalize: []
      order: 3
      original_fieldset: token
      short: Type of the token, either primary or impersonation.
      type: keyword
    thread.token.user:
      dashed_name: process-thread-token-user
      description: Username of token owner.
      flat_name: process.thread.token.user
      ignore_above: 1024
      level: extended
      name: user
      normalize: []
      order: 0
      original_fieldset: token
      short: Username of token owner.
      type: keyword
    threads:
      dashed_name: process-threads
      description: TODO
      flat_name: process.threads
      level: custom
      name: threads
      normalize: []
      order: 22
      short: TODO
      type: nested
    threads.entrypoint:
      dashed_name: process-threads-entrypoint
      description: TODO
      flat_name: process.threads.entrypoint
      ignore_above: 1024
      level: custom
      name: threads.entrypoint
      normalize: []
      order: 24
      short: TODO
      type: keyword
    threads.id:
      dashed_name: process-threads-id
      description: TODO
      flat_name: process.threads.id
      level: custom
      name: threads.id
      normalize: []
      order: 23
      short: TODO
      type: long
    threads.start:
      dashed_name: process-threads-start
      description: TODO
      flat_name: process.threads.start
      level: custom
      name: threads.start
      normalize: []
      order: 25
      short: TODO
      type: date
    threads.uptime:
      dashed_name: process-threads-uptime
      description: TODO
      flat_name: process.threads.uptime
      level: custom
      name: threads.uptime
      normalize: []
      order: 26
      short: TODO
      type: long
    title:
      dashed_name: process-title
      description: 'Process title.

        The proctitle, some times the same as process name. Can also be different:
        for example a browser setting its title to the web page currently opened.'
      flat_name: process.title
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: process.title.text
        name: text
        norms: false
        type: text
      name: title
      normalize: []
      order: 18
      short: Process title.
      type: keyword
    token.domain:
      dashed_name: process-token-domain
      description: TODO
      flat_name: process.token.domain
      ignore_above: 1024
      level: extended
      name: domain
      normalize: []
      order: 1
      original_fieldset: token
      short: TODO
      type: keyword
    token.impersonation_level:
      dashed_name: process-token-impersonation-level
      description: Impersonation level. Only valid for impersonation tokens.
      flat_name: process.token.impersonation_level
      ignore_above: 1024
      level: extended
      name: impersonation_level
      normalize: []
      order: 4
      original_fieldset: token
      short: Impersonation level. Only valid for impersonation tokens.
      type: keyword
    token.integrity_level:
      dashed_name: process-token-integrity-level
      description: Numeric integrity level.
      flat_name: process.token.integrity_level
      level: extended
      name: integrity_level
      normalize: []
      order: 5
      original_fieldset: token
      short: Numeric integrity level.
      type: long
    token.integrity_level_name:
      dashed_name: process-token-integrity-level-name
      description: Human readable integrity level.
      flat_name: process.token.integrity_level_name
      ignore_above: 1024
      level: extended
      name: integrity_level_name
      normalize: []
      order: 6
      original_fieldset: token
      short: Human readable integrity level.
      type: keyword
    token.is_appcontainer:
      dashed_name: process-token-is-appcontainer
      description: Whether or not this is an appcontainer token.
      flat_name: process.token.is_appcontainer
      level: extended
      name: is_appcontainer
      normalize: []
      order: 7
      original_fieldset: token
      short: Whether or not this is an appcontainer token.
      type: boolean
    token.privileges:
      dashed_name: process-token-privileges
      description: Array describing the privileges associated with the token.
      flat_name: process.token.privileges
      level: extended
      name: privileges
      normalize: []
      order: 8
      original_fieldset: token
      short: Array describing the privileges associated with the token.
      type: nested
    token.privileges.description:
      dashed_name: process-token-privileges-description
      description: Description of the privilege.
      flat_name: process.token.privileges.description
      ignore_above: 1024
      level: extended
      name: privileges.description
      normalize: []
      order: 11
      original_fieldset: token
      short: Description of the privilege.
      type: keyword
    token.privileges.enabled:
      dashed_name: process-token-privileges-enabled
      description: Whether or not the privilege is enabled.
      flat_name: process.token.privileges.enabled
      level: extended
      name: privileges.enabled
      normalize: []
      order: 10
      original_fieldset: token
      short: Whether or not the privilege is enabled.
      type: boolean
    token.privileges.name:
      dashed_name: process-token-privileges-name
      description: Name of the privilege.
      flat_name: process.token.privileges.name
      ignore_above: 1024
      level: extended
      name: privileges.name
      normalize: []
      order: 9
      original_fieldset: token
      short: Name of the privilege.
      type: keyword
    token.sid:
      dashed_name: process-token-sid
      description: TODO
      flat_name: process.token.sid
      ignore_above: 1024
      level: extended
      name: sid
      normalize: []
      order: 2
      original_fieldset: token
      short: TODO
      type: keyword
    token.type:
      dashed_name: process-token-type
      description: Type of the token, either primary or impersonation.
      flat_name: process.token.type
      ignore_above: 1024
      level: extended
      name: type
      normalize: []
      order: 3
      original_fieldset: token
      short: Type of the token, either primary or impersonation.
      type: keyword
    token.user:
      dashed_name: process-token-user
      description: Username of token owner.
      flat_name: process.token.user
      ignore_above: 1024
      level: extended
      name: user
      normalize: []
      order: 0
      original_fieldset: token
      short: Username of token owner.
      type: keyword
    tty_device.major_number:
      dashed_name: process-tty-device-major-number
      description: TODO
      flat_name: process.tty_device.major_number
      level: custom
      name: tty_device.major_number
      normalize: []
      order: 40
      short: TODO
      type: integer
    tty_device.minor_number:
      dashed_name: process-tty-device-minor-number
      description: TODO
      flat_name: process.tty_device.minor_number
      level: custom
      name: tty_device.minor_number
      normalize: []
      order: 41
      short: TODO
      type: integer
    tty_device.name:
      dashed_name: process-tty-device-name
      description: TODO
      flat_name: process.tty_device.name
      ignore_above: 1024
      level: custom
      name: tty_device.name
      normalize: []
      order: 42
      short: TODO
      type: keyword
    unbacked_execute_byte_count:
      dashed_name: process-unbacked-execute-byte-count
      description: TODO
      flat_name: process.unbacked_execute_byte_count
      ignore_above: 1024
      level: custom
      name: unbacked_execute_byte_count
      normalize: []
      order: 1
      short: TODO
      type: keyword
    unbacked_execute_region_count:
      dashed_name: process-unbacked-execute-region-count
      description: TODO
      flat_name: process.unbacked_execute_region_count
      ignore_above: 1024
      level: custom
      name: unbacked_execute_region_count
      normalize: []
      order: 2
      short: TODO
      type: keyword
    uptime:
      dashed_name: process-uptime
      description: Seconds the process has been up.
      example: 1325
      flat_name: process.uptime
      level: extended
      name: uptime
      normalize: []
      order: 26
      short: Seconds the process has been up.
      type: long
    user:
      dashed_name: process-user
      description: TODO
      flat_name: process.user
      ignore_above: 1024
      level: custom
      name: user
      normalize: []
      order: 60
      short: TODO
      type: keyword
    virt_memory_bytes:
      dashed_name: process-virt-memory-bytes
      description: TODO
      flat_name: process.virt_memory_bytes
      ignore_above: 1024
      level: custom
      name: virt_memory_bytes
      normalize: []
      order: 34
      short: TODO
      type: keyword
    working_directory:
      dashed_name: process-working-directory
      description: The working directory of the process.
      example: /home/alice
      flat_name: process.working_directory
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: process.working_directory.text
        name: text
        norms: false
        type: text
      name: working_directory
      normalize: []
      order: 28
      short: The working directory of the process.
      type: keyword
  group: 2
  name: process
  nestings:
  - call_stack
  - code_signature
  - hash
  - malware_classification
  - modules
  - pe
  - thread
  - token
  prefix: process.
  reusable:
    expected:
    - target
    top_level: true
  short: These fields contain information about a process.
  title: Process
  type: group
rule:
  description: 'Rule fields are used to capture the specifics of any observer or agent
    rules that generate alerts or other notable events.

    Examples of data sources that would populate the rule fields include: network
    admission control platforms, network or host IDS/IPS, network firewalls, web application
    firewalls, url filters, endpoint detection and response (EDR) systems, etc.'
  fields:
    category:
      dashed_name: rule-category
      description: A categorization value keyword used by the entity using the rule
        for detection of this event.
      example: Attempted Information Leak
      flat_name: rule.category
      ignore_above: 1024
      level: extended
      name: category
      normalize: []
      order: 5
      short: Rule category
      type: keyword
    description:
      dashed_name: rule-description
      description: The description of the rule generating the event.
      example: Block requests to public DNS over HTTPS / TLS protocols
      flat_name: rule.description
      ignore_above: 1024
      level: extended
      name: description
      normalize: []
      order: 4
      short: Rule description
      type: keyword
    id:
      dashed_name: rule-id
      description: A rule ID that is unique within the scope of an agent, observer,
        or other entity using the rule for detection of this event.
      example: 101
      flat_name: rule.id
      ignore_above: 1024
      level: extended
      name: id
      normalize: []
      order: 0
      short: Rule ID
      type: keyword
    name:
      dashed_name: rule-name
      description: The name of the rule or signature generating the event.
      example: BLOCK_DNS_over_TLS
      flat_name: rule.name
      ignore_above: 1024
      level: extended
      name: name
      normalize: []
      order: 3
      short: Rule name
      type: keyword
    reference:
      dashed_name: rule-reference
      description: 'Reference URL to additional information about the rule used to
        generate this event.

        The URL can point to the vendor''s documentation about the rule. If that''s
        not available, it can also be a link to a more general page describing this
        type of alert.'
      example: https://en.wikipedia.org/wiki/DNS_over_TLS
      flat_name: rule.reference
      ignore_above: 1024
      level: extended
      name: reference
      normalize: []
      order: 7
      short: Rule reference URL
      type: keyword
    ruleset:
      dashed_name: rule-ruleset
      description: Name of the ruleset, policy, group, or parent category in which
        the rule used to generate this event is a member.
      example: Standard_Protocol_Filters
      flat_name: rule.ruleset
      ignore_above: 1024
      level: extended
      name: ruleset
      normalize: []
      order: 6
      short: Rule ruleset
      type: keyword
    uuid:
      dashed_name: rule-uuid
      description: A rule ID that is unique within the scope of a set or group of
        agents, observers, or other entities using the rule for detection of this
        event.
      example: 1100110011
      flat_name: rule.uuid
      ignore_above: 1024
      level: extended
      name: uuid
      normalize: []
      order: 1
      short: Rule UUID
      type: keyword
    version:
      dashed_name: rule-version
      description: The version / revision of the rule being used for analysis.
      example: 1.1
      flat_name: rule.version
      ignore_above: 1024
      level: extended
      name: version
      normalize: []
      order: 2
      short: Rule version
      type: keyword
  group: 2
  name: rule
  prefix: rule.
  short: Fields to capture details about rules used to generate alerts or other notable
    events.
  title: Rule
  type: group
target:
  description: 'These fields contain information about a target.

    These fields provide more context about the target process and thread that are
    related to the data in the document. Useful in a security context where a target
    process or thread may be acted on by another process or thread.'
  fields:
    process.args:
      dashed_name: target-process-args
      description: 'Array of process arguments, starting with the absolute path to
        the executable.

        May be filtered to protect sensitive information.'
      example:
      - /usr/bin/ssh
      - -l
      - user
      - 10.0.0.16
      flat_name: target.process.args
      ignore_above: 1024
      level: extended
      name: args
      normalize:
      - array
      order: 12
      original_fieldset: process
      short: Array of process arguments.
      type: keyword
    process.args_count:
      dashed_name: target-process-args-count
      description: 'Length of the process.args array.

        This field can be useful for querying or performing bucket analysis on how
        many arguments were provided to start a process. More arguments may be an
        indication of suspicious activity.'
      example: 4
      flat_name: target.process.args_count
      level: extended
      name: args_count
      normalize: []
      order: 14
      original_fieldset: process
      short: Length of the process.args array.
      type: long
    process.code_signature.exists:
      dashed_name: target-process-code-signature-exists
      description: Boolean to capture if a signature is present.
      example: 'true'
      flat_name: target.process.code_signature.exists
      level: core
      name: exists
      normalize: []
      order: 0
      original_fieldset: code_signature
      short: Boolean to capture if a signature is present.
      type: boolean
    process.code_signature.status:
      dashed_name: target-process-code-signature-status
      description: 'Additional information about the certificate status.

        This is useful for logging cryptographic errors with the certificate validity
        or trust status. Leave unpopulated if the validity or trust of the certificate
        was unchecked.'
      example: ERROR_UNTRUSTED_ROOT
      flat_name: target.process.code_signature.status
      ignore_above: 1024
      level: extended
      name: status
      normalize: []
      order: 4
      original_fieldset: code_signature
      short: Additional information about the certificate status.
      type: keyword
    process.code_signature.subject_name:
      dashed_name: target-process-code-signature-subject-name
      description: Subject name of the code signer
      example: Microsoft Corporation
      flat_name: target.process.code_signature.subject_name
      ignore_above: 1024
      level: core
      name: subject_name
      normalize: []
      order: 1
      original_fieldset: code_signature
      short: Subject name of the code signer
      type: keyword
    process.code_signature.trusted:
      dashed_name: target-process-code-signature-trusted
      description: 'Stores the trust status of the certificate chain.

        Validating the trust of the certificate chain may be complicated, and this
        field should only be populated by tools that actively check the status.'
      example: 'true'
      flat_name: target.process.code_signature.trusted
      level: extended
      name: trusted
      normalize: []
      order: 3
      original_fieldset: code_signature
      short: Stores the trust status of the certificate chain.
      type: boolean
    process.code_signature.valid:
      dashed_name: target-process-code-signature-valid
      description: 'Boolean to capture if the digital signature is verified against
        the binary content.

        Leave unpopulated if a certificate was unchecked.'
      example: 'true'
      flat_name: target.process.code_signature.valid
      level: extended
      name: valid
      normalize: []
      order: 2
      original_fieldset: code_signature
      short: Boolean to capture if the digital signature is verified against the binary
        content.
      type: boolean
    process.command_line:
      dashed_name: target-process-command-line
      description: 'Full command line that started the process, including the absolute
        path to the executable, and all arguments.

        Some arguments may be filtered to protect sensitive information.'
      example: /usr/bin/ssh -l user 10.0.0.16
      flat_name: target.process.command_line
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: target.process.command_line.text
        name: text
        norms: false
        type: text
      name: command_line
      normalize: []
      order: 10
      original_fieldset: process
      short: Full command line that started the process.
      type: keyword
    process.cpu_percent:
      dashed_name: target-process-cpu-percent
      description: TODO
      flat_name: target.process.cpu_percent
      level: custom
      name: cpu_percent
      normalize: []
      order: 31
      original_fieldset: process
      short: TODO
      type: double
    process.cwd:
      dashed_name: target-process-cwd
      description: TODO
      flat_name: target.process.cwd
      ignore_above: 1024
      level: custom
      name: cwd
      normalize: []
      order: 36
      original_fieldset: process
      short: TODO
      type: keyword
    process.defense_evasions:
      dashed_name: target-process-defense-evasions
      description: TODO
      flat_name: target.process.defense_evasions
      level: custom
      name: defense_evasions
      normalize: []
      order: 46
      original_fieldset: process
      short: TODO
      type: nested
    process.defense_evasions.call_stack:
      dashed_name: target-process-defense-evasions-call-stack
      description: TODO
      flat_name: target.process.defense_evasions.call_stack
      group: 2
      level: custom
      name: call_stack
      normalize: []
      original_fieldset: call_stack
      prefix: call_stack.
      reusable:
        expected:
        - thread
        - process.defense_evasions
        top_level: false
      short: TODO
      title: Call Stack
      type: nested
    process.defense_evasions.call_stack.instruction_pointer:
      dashed_name: target-process-defense-evasions-call-stack-instruction-pointer
      description: TODO
      flat_name: target.process.defense_evasions.call_stack.instruction_pointer
      ignore_above: 1024
      level: custom
      name: instruction_pointer
      normalize: []
      order: 1
      original_fieldset: call_stack
      short: TODO
      type: keyword
    process.defense_evasions.call_stack.memory_section.memory_address:
      dashed_name: target-process-defense-evasions-call-stack-memory-section-memory-address
      description: TODO
      flat_name: target.process.defense_evasions.call_stack.memory_section.memory_address
      ignore_above: 1024
      level: custom
      name: memory_section.memory_address
      normalize: []
      order: 2
      original_fieldset: call_stack
      short: TODO
      type: keyword
    process.defense_evasions.call_stack.memory_section.memory_size:
      dashed_name: target-process-defense-evasions-call-stack-memory-section-memory-size
      description: TODO
      flat_name: target.process.defense_evasions.call_stack.memory_section.memory_size
      ignore_above: 1024
      level: custom
      name: memory_section.memory_size
      normalize: []
      order: 3
      original_fieldset: call_stack
      short: TODO
      type: keyword
    process.defense_evasions.call_stack.memory_section.protection:
      dashed_name: target-process-defense-evasions-call-stack-memory-section-protection
      description: TODO
      flat_name: target.process.defense_evasions.call_stack.memory_section.protection
      ignore_above: 1024
      level: custom
      name: memory_section.protection
      normalize: []
      order: 4
      original_fieldset: call_stack
      short: TODO
      type: keyword
    process.defense_evasions.call_stack.module_path:
      dashed_name: target-process-defense-evasions-call-stack-module-path
      description: TODO
      flat_name: target.process.defense_evasions.call_stack.module_path
      ignore_above: 1024
      level: custom
      name: module_path
      normalize: []
      order: 0
      original_fieldset: call_stack
      short: TODO
      type: keyword
    process.defense_evasions.call_stack.rva:
      dashed_name: target-process-defense-evasions-call-stack-rva
      description: TODO
      flat_name: target.process.defense_evasions.call_stack.rva
      ignore_above: 1024
      level: custom
      name: rva
      normalize: []
      order: 6
      original_fieldset: call_stack
      short: TODO
      type: keyword
    process.defense_evasions.call_stack.symbol_info:
      dashed_name: target-process-defense-evasions-call-stack-symbol-info
      description: TODO
      flat_name: target.process.defense_evasions.call_stack.symbol_info
      ignore_above: 1024
      level: custom
      name: symbol_info
      normalize: []
      order: 5
      original_fieldset: call_stack
      short: TODO
      type: keyword
    process.defense_evasions.delta_count:
      dashed_name: target-process-defense-evasions-delta-count
      description: TODO
      flat_name: target.process.defense_evasions.delta_count
      ignore_above: 1024
      level: custom
      name: defense_evasions.delta_count
      normalize: []
      order: 57
      original_fieldset: process
      short: TODO
      type: keyword
    process.defense_evasions.evasion_subtype:
      dashed_name: target-process-defense-evasions-evasion-subtype
      description: TODO
      flat_name: target.process.defense_evasions.evasion_subtype
      ignore_above: 1024
      level: custom
      name: defense_evasions.evasion_subtype
      normalize: []
      order: 48
      original_fieldset: process
      short: TODO
      type: keyword
    process.defense_evasions.evasion_type:
      dashed_name: target-process-defense-evasions-evasion-type
      description: TODO
      flat_name: target.process.defense_evasions.evasion_type
      ignore_above: 1024
      level: custom
      name: defense_evasions.evasion_type
      normalize: []
      order: 47
      original_fieldset: process
      short: TODO
      type: keyword
    process.defense_evasions.instruction_pointer:
      dashed_name: target-process-defense-evasions-instruction-pointer
      description: TODO
      flat_name: target.process.defense_evasions.instruction_pointer
      ignore_above: 1024
      level: custom
      name: defense_evasions.instruction_pointer
      normalize: []
      order: 58
      original_fieldset: process
      short: TODO
      type: keyword
    process.defense_evasions.memory_sections:
      dashed_name: target-process-defense-evasions-memory-sections
      description: TODO
      flat_name: target.process.defense_evasions.memory_sections
      level: custom
      name: defense_evasions.memory_sections
      normalize: []
      order: 51
      original_fieldset: process
      short: TODO
      type: nested
    process.defense_evasions.memory_sections.address:
      dashed_name: target-process-defense-evasions-memory-sections-address
      description: TODO
      flat_name: target.process.defense_evasions.memory_sections.address
      ignore_above: 1024
      level: custom
      name: defense_evasions.memory_sections.address
      normalize: []
      order: 52
      original_fieldset: process
      short: TODO
      type: keyword
    process.defense_evasions.memory_sections.protection:
      dashed_name: target-process-defense-evasions-memory-sections-protection
      description: TODO
      flat_name: target.process.defense_evasions.memory_sections.protection
      ignore_above: 1024
      level: custom
      name: defense_evasions.memory_sections.protection
      normalize: []
      order: 54
      original_fieldset: process
      short: TODO
      type: keyword
    process.defense_evasions.memory_sections.size:
      dashed_name: target-process-defense-evasions-memory-sections-size
      description: TODO
      flat_name: target.process.defense_evasions.memory_sections.size
      ignore_above: 1024
      level: custom
      name: defense_evasions.memory_sections.size
      normalize: []
      order: 53
      original_fieldset: process
      short: TODO
      type: keyword
    process.defense_evasions.module_path:
      dashed_name: target-process-defense-evasions-module-path
      description: TODO
      flat_name: target.process.defense_evasions.module_path
      ignore_above: 1024
      level: custom
      name: defense_evasions.module_path
      normalize: []
      order: 49
      original_fieldset: process
      short: TODO
      type: keyword
    process.defense_evasions.thread.id:
      dashed_name: target-process-defense-evasions-thread-id
      description: TODO
      flat_name: target.process.defense_evasions.thread.id
      level: custom
      name: defense_evasions.thread.id
      normalize: []
      order: 55
      original_fieldset: process
      short: TODO
      type: long
    process.defense_evasions.thread.start_address:
      dashed_name: target-process-defense-evasions-thread-start-address
      description: TODO
      flat_name: target.process.defense_evasions.thread.start_address
      ignore_above: 1024
      level: custom
      name: defense_evasions.thread.start_address
      normalize: []
      order: 56
      original_fieldset: process
      short: TODO
      type: keyword
    process.defense_evasions.total_memory_size:
      dashed_name: target-process-defense-evasions-total-memory-size
      description: TODO
      flat_name: target.process.defense_evasions.total_memory_size
      ignore_above: 1024
      level: custom
      name: defense_evasions.total_memory_size
      normalize: []
      order: 50
      original_fieldset: process
      short: TODO
      type: keyword
    process.domain:
      dashed_name: target-process-domain
      description: TODO
      flat_name: target.process.domain
      ignore_above: 1024
      level: custom
      name: domain
      normalize: []
      order: 44
      original_fieldset: process
      short: TODO
      type: keyword
    process.entity_id:
      dashed_name: target-process-entity-id
      description: 'Unique identifier for the process.

        The implementation of this is specified by the data source, but some examples
        of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
        or a hash of some uniquely identifying components of a process.

        Constructing a globally unique identifier is a common practice to mitigate
        PID reuse as well as to identify a specific process over time, across multiple
        monitored hosts.'
      example: c2c455d9f99375d
      flat_name: target.process.entity_id
      ignore_above: 1024
      level: extended
      name: entity_id
      normalize: []
      order: 2
      original_fieldset: process
      short: Unique identifier for the process.
      type: keyword
    process.env_variables:
      dashed_name: target-process-env-variables
      description: TODO
      flat_name: target.process.env_variables
      ignore_above: 1024
      level: custom
      name: env_variables
      normalize: []
      order: 39
      original_fieldset: process
      short: TODO
      type: keyword
    process.executable:
      dashed_name: target-process-executable
      description: Absolute path to the process executable.
      example: /usr/bin/ssh
      flat_name: target.process.executable
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: target.process.executable.text
        name: text
        norms: false
        type: text
      name: executable
      normalize: []
      order: 16
      original_fieldset: process
      short: Absolute path to the process executable.
      type: keyword
    process.exit_code:
      dashed_name: target-process-exit-code
      description: 'The exit code of the process, if this is a termination event.

        The field should be absent if there is no exit code for the event (e.g. process
        start).'
      example: 137
      flat_name: target.process.exit_code
      level: extended
      name: exit_code
      normalize: []
      order: 30
      original_fieldset: process
      short: The exit code of the process.
      type: long
    process.group:
      dashed_name: target-process-group
      description: TODO
      flat_name: target.process.group
      ignore_above: 1024
      level: custom
      name: group
      normalize: []
      order: 37
      original_fieldset: process
      short: TODO
      type: keyword
    process.handles:
      dashed_name: target-process-handles
      description: TODO
      flat_name: target.process.handles
      level: custom
      name: handles
      normalize: []
      order: 27
      original_fieldset: process
      short: TODO
      type: nested
    process.handles.handle_id:
      dashed_name: target-process-handles-handle-id
      description: TODO
      flat_name: target.process.handles.handle_id
      level: custom
      name: handles.handle_id
      normalize: []
      order: 28
      original_fieldset: process
      short: TODO
      type: long
    process.handles.handle_name:
      dashed_name: target-process-handles-handle-name
      description: TODO
      flat_name: target.process.handles.handle_name
      ignore_above: 1024
      level: custom
      name: handles.handle_name
      normalize: []
      order: 30
      original_fieldset: process
      short: TODO
      type: keyword
    process.handles.handle_type:
      dashed_name: target-process-handles-handle-type
      description: TODO
      flat_name: target.process.handles.handle_type
      ignore_above: 1024
      level: custom
      name: handles.handle_type
      normalize: []
      order: 29
      original_fieldset: process
      short: TODO
      type: keyword
    process.hash.imphash:
      dashed_name: target-process-hash-imphash
      description: Imphash.
      flat_name: target.process.hash.imphash
      ignore_above: 1024
      level: extended
      name: imphash
      normalize: []
      order: 0
      original_fieldset: hash
      short: Imphash.
      type: keyword
    process.hash.md5:
      dashed_name: target-process-hash-md5
      description: MD5 hash.
      flat_name: target.process.hash.md5
      ignore_above: 1024
      level: extended
      name: md5
      normalize: []
      order: 0
      original_fieldset: hash
      short: MD5 hash.
      type: keyword
    process.hash.sha1:
      dashed_name: target-process-hash-sha1
      description: SHA1 hash.
      flat_name: target.process.hash.sha1
      ignore_above: 1024
      level: extended
      name: sha1
      normalize: []
      order: 1
      original_fieldset: hash
      short: SHA1 hash.
      type: keyword
    process.hash.sha256:
      dashed_name: target-process-hash-sha256
      description: SHA256 hash.
      flat_name: target.process.hash.sha256
      ignore_above: 1024
      level: extended
      name: sha256
      normalize: []
      order: 2
      original_fieldset: hash
      short: SHA256 hash.
      type: keyword
    process.hash.sha512:
      dashed_name: target-process-hash-sha512
      description: SHA512 hash.
      flat_name: target.process.hash.sha512
      ignore_above: 1024
      level: extended
      name: sha512
      normalize: []
      order: 3
      original_fieldset: hash
      short: SHA512 hash.
      type: keyword
    process.hash_matched_module:
      dashed_name: target-process-hash-matched-module
      description: TODO
      flat_name: target.process.hash_matched_module
      level: custom
      name: hash_matched_module
      normalize: []
      order: 0
      original_fieldset: process
      short: TODO
      type: boolean
    process.malware_classification.features.data.buffer:
      dashed_name: target-process-malware-classification-features-data-buffer
      description: TODO
      flat_name: target.process.malware_classification.features.data.buffer
      ignore_above: 1024
      level: custom
      name: features.data.buffer
      normalize: []
      order: 4
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    process.malware_classification.features.data.decompressed_size:
      dashed_name: target-process-malware-classification-features-data-decompressed-size
      description: TODO
      flat_name: target.process.malware_classification.features.data.decompressed_size
      level: custom
      name: features.data.decompressed_size
      normalize: []
      order: 5
      original_fieldset: malware_classification
      short: TODO
      type: integer
    process.malware_classification.features.data.encoding:
      dashed_name: target-process-malware-classification-features-data-encoding
      description: TODO
      flat_name: target.process.malware_classification.features.data.encoding
      ignore_above: 1024
      level: custom
      name: features.data.encoding
      normalize: []
      order: 6
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    process.malware_classification.identifier:
      dashed_name: target-process-malware-classification-identifier
      description: TODO
      flat_name: target.process.malware_classification.identifier
      ignore_above: 1024
      level: custom
      name: identifier
      normalize: []
      order: 2
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    process.malware_classification.score:
      dashed_name: target-process-malware-classification-score
      description: TODO
      flat_name: target.process.malware_classification.score
      level: custom
      name: score
      normalize: []
      order: 0
      original_fieldset: malware_classification
      short: TODO
      type: double
    process.malware_classification.threshold:
      dashed_name: target-process-malware-classification-threshold
      description: TODO
      flat_name: target.process.malware_classification.threshold
      level: custom
      name: threshold
      normalize: []
      order: 1
      original_fieldset: malware_classification
      short: TODO
      type: double
    process.malware_classification.upx_packed:
      dashed_name: target-process-malware-classification-upx-packed
      description: TODO
      flat_name: target.process.malware_classification.upx_packed
      level: custom
      name: upx_packed
      normalize: []
      order: 7
      original_fieldset: malware_classification
      short: TODO
      type: boolean
    process.malware_classification.version:
      dashed_name: target-process-malware-classification-version
      description: TODO
      flat_name: target.process.malware_classification.version
      ignore_above: 1024
      level: custom
      name: version
      normalize: []
      order: 3
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    process.memory_percent:
      dashed_name: target-process-memory-percent
      description: TODO
      flat_name: target.process.memory_percent
      level: custom
      name: memory_percent
      normalize: []
      order: 32
      original_fieldset: process
      short: TODO
      type: double
    process.memory_region:
      dashed_name: target-process-memory-region
      description: TODO
      flat_name: target.process.memory_region
      level: custom
      name: memory_region
      normalize: []
      order: 3
      original_fieldset: process
      short: TODO
      type: nested
    process.memory_region.allocation_base:
      dashed_name: target-process-memory-region-allocation-base
      description: TODO
      flat_name: target.process.memory_region.allocation_base
      ignore_above: 1024
      level: custom
      name: memory_region.allocation_base
      normalize: []
      order: 14
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.allocation_protection:
      dashed_name: target-process-memory-region-allocation-protection
      description: TODO
      flat_name: target.process.memory_region.allocation_protection
      ignore_above: 1024
      level: custom
      name: memory_region.allocation_protection
      normalize: []
      order: 20
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.bytes:
      dashed_name: target-process-memory-region-bytes
      description: TODO
      flat_name: target.process.memory_region.bytes
      ignore_above: 1024
      level: custom
      name: memory_region.bytes
      normalize: []
      order: 7
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.histogram:
      dashed_name: target-process-memory-region-histogram
      description: TODO
      flat_name: target.process.memory_region.histogram
      level: custom
      name: memory_region.histogram
      normalize: []
      order: 9
      original_fieldset: process
      short: TODO
      type: nested
    process.memory_region.histogram.histogram_array:
      dashed_name: target-process-memory-region-histogram-histogram-array
      description: TODO
      flat_name: target.process.memory_region.histogram.histogram_array
      ignore_above: 1024
      level: custom
      name: memory_region.histogram.histogram_array
      normalize: []
      order: 12
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.histogram.histogram_flavor:
      dashed_name: target-process-memory-region-histogram-histogram-flavor
      description: TODO
      flat_name: target.process.memory_region.histogram.histogram_flavor
      ignore_above: 1024
      level: custom
      name: memory_region.histogram.histogram_flavor
      normalize: []
      order: 10
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.histogram.histogram_resolution:
      dashed_name: target-process-memory-region-histogram-histogram-resolution
      description: TODO
      flat_name: target.process.memory_region.histogram.histogram_resolution
      ignore_above: 1024
      level: custom
      name: memory_region.histogram.histogram_resolution
      normalize: []
      order: 11
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.length:
      dashed_name: target-process-memory-region-length
      description: TODO
      flat_name: target.process.memory_region.length
      ignore_above: 1024
      level: custom
      name: memory_region.length
      normalize: []
      order: 5
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.memory:
      dashed_name: target-process-memory-region-memory
      description: TODO
      flat_name: target.process.memory_region.memory
      ignore_above: 1024
      level: custom
      name: memory_region.memory
      normalize: []
      order: 8
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.memory_address:
      dashed_name: target-process-memory-region-memory-address
      description: TODO
      flat_name: target.process.memory_region.memory_address
      ignore_above: 1024
      level: custom
      name: memory_region.memory_address
      normalize: []
      order: 4
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.module_path:
      dashed_name: target-process-memory-region-module-path
      description: TODO
      flat_name: target.process.memory_region.module_path
      ignore_above: 1024
      level: custom
      name: memory_region.module_path
      normalize: []
      order: 21
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.permission:
      dashed_name: target-process-memory-region-permission
      description: TODO
      flat_name: target.process.memory_region.permission
      ignore_above: 1024
      level: custom
      name: memory_region.permission
      normalize: []
      order: 13
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.protection:
      dashed_name: target-process-memory-region-protection
      description: TODO
      flat_name: target.process.memory_region.protection
      ignore_above: 1024
      level: custom
      name: memory_region.protection
      normalize: []
      order: 19
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.region_base:
      dashed_name: target-process-memory-region-region-base
      description: TODO
      flat_name: target.process.memory_region.region_base
      ignore_above: 1024
      level: custom
      name: memory_region.region_base
      normalize: []
      order: 15
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.region_size:
      dashed_name: target-process-memory-region-region-size
      description: TODO
      flat_name: target.process.memory_region.region_size
      ignore_above: 1024
      level: custom
      name: memory_region.region_size
      normalize: []
      order: 16
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.region_tag:
      dashed_name: target-process-memory-region-region-tag
      description: TODO
      flat_name: target.process.memory_region.region_tag
      ignore_above: 1024
      level: custom
      name: memory_region.region_tag
      normalize: []
      order: 17
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.type:
      dashed_name: target-process-memory-region-type
      description: TODO
      flat_name: target.process.memory_region.type
      ignore_above: 1024
      level: custom
      name: memory_region.type
      normalize: []
      order: 18
      original_fieldset: process
      short: TODO
      type: keyword
    process.memory_region.unbacked_on_disk:
      dashed_name: target-process-memory-region-unbacked-on-disk
      description: TODO
      flat_name: target.process.memory_region.unbacked_on_disk
      level: custom
      name: memory_region.unbacked_on_disk
      normalize: []
      order: 6
      original_fieldset: process
      short: TODO
      type: boolean
    process.modules:
      dashed_name: target-process-modules
      description: These fields contain information about a list of modules.
      flat_name: target.process.modules
      group: 2
      level: custom
      name: modules
      normalize: []
      original_fieldset: modules
      prefix: modules.
      reusable:
        expected:
        - process
        top_level: false
      short: These fields contain information about a list of modules.
      title: Modules
      type: nested
    process.modules.architecture:
      dashed_name: target-process-modules-architecture
      description: TODO
      flat_name: target.process.modules.architecture
      ignore_above: 1024
      level: custom
      name: architecture
      normalize: []
      order: 4
      original_fieldset: modules
      short: TODO
      type: keyword
    process.modules.compile_time:
      dashed_name: target-process-modules-compile-time
      description: TODO
      flat_name: target.process.modules.compile_time
      level: custom
      name: compile_time
      normalize: []
      order: 3
      original_fieldset: modules
      short: TODO
      type: date
    process.modules.hash.imphash:
      dashed_name: target-process-modules-hash-imphash
      description: Imphash.
      flat_name: target.process.modules.hash.imphash
      ignore_above: 1024
      level: extended
      name: imphash
      normalize: []
      order: 0
      original_fieldset: hash
      short: Imphash.
      type: keyword
    process.modules.hash.md5:
      dashed_name: target-process-modules-hash-md5
      description: MD5 hash.
      flat_name: target.process.modules.hash.md5
      ignore_above: 1024
      level: extended
      name: md5
      normalize: []
      order: 0
      original_fieldset: hash
      short: MD5 hash.
      type: keyword
    process.modules.hash.sha1:
      dashed_name: target-process-modules-hash-sha1
      description: SHA1 hash.
      flat_name: target.process.modules.hash.sha1
      ignore_above: 1024
      level: extended
      name: sha1
      normalize: []
      order: 1
      original_fieldset: hash
      short: SHA1 hash.
      type: keyword
    process.modules.hash.sha256:
      dashed_name: target-process-modules-hash-sha256
      description: SHA256 hash.
      flat_name: target.process.modules.hash.sha256
      ignore_above: 1024
      level: extended
      name: sha256
      normalize: []
      order: 2
      original_fieldset: hash
      short: SHA256 hash.
      type: keyword
    process.modules.hash.sha512:
      dashed_name: target-process-modules-hash-sha512
      description: SHA512 hash.
      flat_name: target.process.modules.hash.sha512
      ignore_above: 1024
      level: extended
      name: sha512
      normalize: []
      order: 3
      original_fieldset: hash
      short: SHA512 hash.
      type: keyword
    process.modules.malware_classification.features.data.buffer:
      dashed_name: target-process-modules-malware-classification-features-data-buffer
      description: TODO
      flat_name: target.process.modules.malware_classification.features.data.buffer
      ignore_above: 1024
      level: custom
      name: features.data.buffer
      normalize: []
      order: 4
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    process.modules.malware_classification.features.data.decompressed_size:
      dashed_name: target-process-modules-malware-classification-features-data-decompressed-size
      description: TODO
      flat_name: target.process.modules.malware_classification.features.data.decompressed_size
      level: custom
      name: features.data.decompressed_size
      normalize: []
      order: 5
      original_fieldset: malware_classification
      short: TODO
      type: integer
    process.modules.malware_classification.features.data.encoding:
      dashed_name: target-process-modules-malware-classification-features-data-encoding
      description: TODO
      flat_name: target.process.modules.malware_classification.features.data.encoding
      ignore_above: 1024
      level: custom
      name: features.data.encoding
      normalize: []
      order: 6
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    process.modules.malware_classification.identifier:
      dashed_name: target-process-modules-malware-classification-identifier
      description: TODO
      flat_name: target.process.modules.malware_classification.identifier
      ignore_above: 1024
      level: custom
      name: identifier
      normalize: []
      order: 2
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    process.modules.malware_classification.score:
      dashed_name: target-process-modules-malware-classification-score
      description: TODO
      flat_name: target.process.modules.malware_classification.score
      level: custom
      name: score
      normalize: []
      order: 0
      original_fieldset: malware_classification
      short: TODO
      type: double
    process.modules.malware_classification.threshold:
      dashed_name: target-process-modules-malware-classification-threshold
      description: TODO
      flat_name: target.process.modules.malware_classification.threshold
      level: custom
      name: threshold
      normalize: []
      order: 1
      original_fieldset: malware_classification
      short: TODO
      type: double
    process.modules.malware_classification.upx_packed:
      dashed_name: target-process-modules-malware-classification-upx-packed
      description: TODO
      flat_name: target.process.modules.malware_classification.upx_packed
      level: custom
      name: upx_packed
      normalize: []
      order: 7
      original_fieldset: malware_classification
      short: TODO
      type: boolean
    process.modules.malware_classification.version:
      dashed_name: target-process-modules-malware-classification-version
      description: TODO
      flat_name: target.process.modules.malware_classification.version
      ignore_above: 1024
      level: custom
      name: version
      normalize: []
      order: 3
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    process.modules.mapped_address:
      dashed_name: target-process-modules-mapped-address
      description: TODO
      flat_name: target.process.modules.mapped_address
      ignore_above: 1024
      level: custom
      name: mapped_address
      normalize: []
      order: 1
      original_fieldset: modules
      short: TODO
      type: keyword
    process.modules.mapped_size:
      dashed_name: target-process-modules-mapped-size
      description: TODO
      flat_name: target.process.modules.mapped_size
      level: custom
      name: mapped_size
      normalize: []
      order: 2
      original_fieldset: modules
      short: TODO
      type: long
    process.modules.path:
      dashed_name: target-process-modules-path
      description: TODO
      flat_name: target.process.modules.path
      ignore_above: 1024
      level: custom
      name: path
      normalize: []
      order: 0
      original_fieldset: modules
      short: TODO
      type: keyword
    process.modules.pe_exports:
      dashed_name: target-process-modules-pe-exports
      description: TODO
      flat_name: target.process.modules.pe_exports
      level: custom
      name: pe_exports
      normalize: []
      order: 8
      original_fieldset: modules
      short: TODO
      type: nested
    process.modules.pe_exports.name:
      dashed_name: target-process-modules-pe-exports-name
      description: TODO
      flat_name: target.process.modules.pe_exports.name
      ignore_above: 1024
      level: custom
      name: pe_exports.name
      normalize: []
      order: 10
      original_fieldset: modules
      short: TODO
      type: keyword
    process.modules.pe_exports.ordinal:
      dashed_name: target-process-modules-pe-exports-ordinal
      description: TODO
      flat_name: target.process.modules.pe_exports.ordinal
      level: custom
      name: pe_exports.ordinal
      normalize: []
      order: 9
      original_fieldset: modules
      short: TODO
      type: long
    process.modules.pe_imports:
      dashed_name: target-process-modules-pe-imports
      description: TODO
      flat_name: target.process.modules.pe_imports
      level: custom
      name: pe_imports
      normalize: []
      order: 5
      original_fieldset: modules
      short: TODO
      type: nested
    process.modules.pe_imports.dll_name:
      dashed_name: target-process-modules-pe-imports-dll-name
      description: TODO
      flat_name: target.process.modules.pe_imports.dll_name
      ignore_above: 1024
      level: custom
      name: pe_imports.dll_name
      normalize: []
      order: 6
      original_fieldset: modules
      short: TODO
      type: keyword
    process.modules.pe_imports.import_names:
      dashed_name: target-process-modules-pe-imports-import-names
      description: TODO
      flat_name: target.process.modules.pe_imports.import_names
      ignore_above: 1024
      level: custom
      name: pe_imports.import_names
      normalize: []
      order: 7
      original_fieldset: modules
      short: TODO
      type: keyword
    process.modules.signature_signer:
      dashed_name: target-process-modules-signature-signer
      description: TODO
      flat_name: target.process.modules.signature_signer
      ignore_above: 1024
      level: custom
      name: signature_signer
      normalize: []
      order: 11
      original_fieldset: modules
      short: TODO
      type: keyword
    process.modules.signature_status:
      dashed_name: target-process-modules-signature-status
      description: TODO
      flat_name: target.process.modules.signature_status
      ignore_above: 1024
      level: custom
      name: signature_status
      normalize: []
      order: 12
      original_fieldset: modules
      short: TODO
      type: keyword
    process.name:
      dashed_name: target-process-name
      description: 'Process name.

        Sometimes called program name or similar.'
      example: ssh
      flat_name: target.process.name
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: target.process.name.text
        name: text
        norms: false
        type: text
      name: name
      normalize: []
      order: 4
      original_fieldset: process
      short: Process name.
      type: keyword
    process.num_threads:
      dashed_name: target-process-num-threads
      description: TODO
      flat_name: target.process.num_threads
      level: custom
      name: num_threads
      normalize: []
      order: 33
      original_fieldset: process
      short: TODO
      type: long
    process.parent.args:
      dashed_name: target-process-parent-args
      description: 'Array of process arguments.

        May be filtered to protect sensitive information.'
      example:
      - ssh
      - -l
      - user
      - 10.0.0.16
      flat_name: target.process.parent.args
      ignore_above: 1024
      level: extended
      name: parent.args
      normalize:
      - array
      order: 13
      original_fieldset: process
      short: Array of process arguments.
      type: keyword
    process.parent.args_count:
      dashed_name: target-process-parent-args-count
      description: 'Length of the process.args array.

        This field can be useful for querying or performing bucket analysis on how
        many arguments were provided to start a process. More arguments may be an
        indication of suspicious activity.'
      example: 4
      flat_name: target.process.parent.args_count
      level: extended
      name: parent.args_count
      normalize: []
      order: 15
      original_fieldset: process
      short: Length of the process.args array.
      type: long
    process.parent.code_signature.exists:
      dashed_name: target-process-parent-code-signature-exists
      description: Boolean to capture if a signature is present.
      example: 'true'
      flat_name: target.process.parent.code_signature.exists
      level: core
      name: exists
      normalize: []
      order: 0
      original_fieldset: code_signature
      short: Boolean to capture if a signature is present.
      type: boolean
    process.parent.code_signature.status:
      dashed_name: target-process-parent-code-signature-status
      description: 'Additional information about the certificate status.

        This is useful for logging cryptographic errors with the certificate validity
        or trust status. Leave unpopulated if the validity or trust of the certificate
        was unchecked.'
      example: ERROR_UNTRUSTED_ROOT
      flat_name: target.process.parent.code_signature.status
      ignore_above: 1024
      level: extended
      name: status
      normalize: []
      order: 4
      original_fieldset: code_signature
      short: Additional information about the certificate status.
      type: keyword
    process.parent.code_signature.subject_name:
      dashed_name: target-process-parent-code-signature-subject-name
      description: Subject name of the code signer
      example: Microsoft Corporation
      flat_name: target.process.parent.code_signature.subject_name
      ignore_above: 1024
      level: core
      name: subject_name
      normalize: []
      order: 1
      original_fieldset: code_signature
      short: Subject name of the code signer
      type: keyword
    process.parent.code_signature.trusted:
      dashed_name: target-process-parent-code-signature-trusted
      description: 'Stores the trust status of the certificate chain.

        Validating the trust of the certificate chain may be complicated, and this
        field should only be populated by tools that actively check the status.'
      example: 'true'
      flat_name: target.process.parent.code_signature.trusted
      level: extended
      name: trusted
      normalize: []
      order: 3
      original_fieldset: code_signature
      short: Stores the trust status of the certificate chain.
      type: boolean
    process.parent.code_signature.valid:
      dashed_name: target-process-parent-code-signature-valid
      description: 'Boolean to capture if the digital signature is verified against
        the binary content.

        Leave unpopulated if a certificate was unchecked.'
      example: 'true'
      flat_name: target.process.parent.code_signature.valid
      level: extended
      name: valid
      normalize: []
      order: 2
      original_fieldset: code_signature
      short: Boolean to capture if the digital signature is verified against the binary
        content.
      type: boolean
    process.parent.command_line:
      dashed_name: target-process-parent-command-line
      description: 'Full command line that started the process, including the absolute
        path to the executable, and all arguments.

        Some arguments may be filtered to protect sensitive information.'
      example: /usr/bin/ssh -l user 10.0.0.16
      flat_name: target.process.parent.command_line
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: target.process.parent.command_line.text
        name: text
        norms: false
        type: text
      name: parent.command_line
      normalize: []
      order: 11
      original_fieldset: process
      short: Full command line that started the process.
      type: keyword
    process.parent.entity_id:
      dashed_name: target-process-parent-entity-id
      description: 'Unique identifier for the process.

        The implementation of this is specified by the data source, but some examples
        of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
        or a hash of some uniquely identifying components of a process.

        Constructing a globally unique identifier is a common practice to mitigate
        PID reuse as well as to identify a specific process over time, across multiple
        monitored hosts.'
      example: c2c455d9f99375d
      flat_name: target.process.parent.entity_id
      ignore_above: 1024
      level: extended
      name: parent.entity_id
      normalize: []
      order: 3
      original_fieldset: process
      short: Unique identifier for the process.
      type: keyword
    process.parent.executable:
      dashed_name: target-process-parent-executable
      description: Absolute path to the process executable.
      example: /usr/bin/ssh
      flat_name: target.process.parent.executable
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: target.process.parent.executable.text
        name: text
        norms: false
        type: text
      name: parent.executable
      normalize: []
      order: 17
      original_fieldset: process
      short: Absolute path to the process executable.
      type: keyword
    process.parent.exit_code:
      dashed_name: target-process-parent-exit-code
      description: 'The exit code of the process, if this is a termination event.

        The field should be absent if there is no exit code for the event (e.g. process
        start).'
      example: 137
      flat_name: target.process.parent.exit_code
      level: extended
      name: parent.exit_code
      normalize: []
      order: 31
      original_fieldset: process
      short: The exit code of the process.
      type: long
    process.parent.hash.imphash:
      dashed_name: target-process-parent-hash-imphash
      description: Imphash.
      flat_name: target.process.parent.hash.imphash
      ignore_above: 1024
      level: extended
      name: imphash
      normalize: []
      order: 0
      original_fieldset: hash
      short: Imphash.
      type: keyword
    process.parent.hash.md5:
      dashed_name: target-process-parent-hash-md5
      description: MD5 hash.
      flat_name: target.process.parent.hash.md5
      ignore_above: 1024
      level: extended
      name: md5
      normalize: []
      order: 0
      original_fieldset: hash
      short: MD5 hash.
      type: keyword
    process.parent.hash.sha1:
      dashed_name: target-process-parent-hash-sha1
      description: SHA1 hash.
      flat_name: target.process.parent.hash.sha1
      ignore_above: 1024
      level: extended
      name: sha1
      normalize: []
      order: 1
      original_fieldset: hash
      short: SHA1 hash.
      type: keyword
    process.parent.hash.sha256:
      dashed_name: target-process-parent-hash-sha256
      description: SHA256 hash.
      flat_name: target.process.parent.hash.sha256
      ignore_above: 1024
      level: extended
      name: sha256
      normalize: []
      order: 2
      original_fieldset: hash
      short: SHA256 hash.
      type: keyword
    process.parent.hash.sha512:
      dashed_name: target-process-parent-hash-sha512
      description: SHA512 hash.
      flat_name: target.process.parent.hash.sha512
      ignore_above: 1024
      level: extended
      name: sha512
      normalize: []
      order: 3
      original_fieldset: hash
      short: SHA512 hash.
      type: keyword
    process.parent.name:
      dashed_name: target-process-parent-name
      description: 'Process name.

        Sometimes called program name or similar.'
      example: ssh
      flat_name: target.process.parent.name
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: target.process.parent.name.text
        name: text
        norms: false
        type: text
      name: parent.name
      normalize: []
      order: 5
      original_fieldset: process
      short: Process name.
      type: keyword
    process.parent.pgid:
      dashed_name: target-process-parent-pgid
      description: Identifier of the group of processes the process belongs to.
      flat_name: target.process.parent.pgid
      format: string
      level: extended
      name: parent.pgid
      normalize: []
      order: 9
      original_fieldset: process
      short: Identifier of the group of processes the process belongs to.
      type: long
    process.parent.pid:
      dashed_name: target-process-parent-pid
      description: Process id.
      example: 4242
      flat_name: target.process.parent.pid
      format: string
      level: core
      name: parent.pid
      normalize: []
      order: 1
      original_fieldset: process
      short: Process id.
      type: long
    process.parent.ppid:
      dashed_name: target-process-parent-ppid
      description: Parent process' pid.
      example: 4241
      flat_name: target.process.parent.ppid
      format: string
      level: extended
      name: parent.ppid
      normalize: []
      order: 7
      original_fieldset: process
      short: Parent process' pid.
      type: long
    process.parent.start:
      dashed_name: target-process-parent-start
      description: The time the process started.
      example: '2016-05-23T08:05:34.853Z'
      flat_name: target.process.parent.start
      level: extended
      name: parent.start
      normalize: []
      order: 25
      original_fieldset: process
      short: The time the process started.
      type: date
    process.parent.thread.id:
      dashed_name: target-process-parent-thread-id
      description: Thread ID.
      example: 4242
      flat_name: target.process.parent.thread.id
      format: string
      level: extended
      name: parent.thread.id
      normalize: []
      order: 21
      original_fieldset: process
      short: Thread ID.
      type: long
    process.parent.thread.name:
      dashed_name: target-process-parent-thread-name
      description: Thread name.
      example: thread-0
      flat_name: target.process.parent.thread.name
      ignore_above: 1024
      level: extended
      name: parent.thread.name
      normalize: []
      order: 23
      original_fieldset: process
      short: Thread name.
      type: keyword
    process.parent.title:
      dashed_name: target-process-parent-title
      description: 'Process title.

        The proctitle, some times the same as process name. Can also be different:
        for example a browser setting its title to the web page currently opened.'
      flat_name: target.process.parent.title
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: target.process.parent.title.text
        name: text
        norms: false
        type: text
      name: parent.title
      normalize: []
      order: 19
      original_fieldset: process
      short: Process title.
      type: keyword
    process.parent.uptime:
      dashed_name: target-process-parent-uptime
      description: Seconds the process has been up.
      example: 1325
      flat_name: target.process.parent.uptime
      level: extended
      name: parent.uptime
      normalize: []
      order: 27
      original_fieldset: process
      short: Seconds the process has been up.
      type: long
    process.parent.working_directory:
      dashed_name: target-process-parent-working-directory
      description: The working directory of the process.
      example: /home/alice
      flat_name: target.process.parent.working_directory
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: target.process.parent.working_directory.text
        name: text
        norms: false
        type: text
      name: parent.working_directory
      normalize: []
      order: 29
      original_fieldset: process
      short: The working directory of the process.
      type: keyword
    process.pe.company:
      dashed_name: target-process-pe-company
      description: Internal company name of the file, provided at compile-time.
      example: Microsoft Corporation
      flat_name: target.process.pe.company
      ignore_above: 1024
      level: extended
      name: company
      normalize: []
      order: 4
      original_fieldset: pe
      short: Internal company name of the file, provided at compile-time.
      type: keyword
    process.pe.description:
      dashed_name: target-process-pe-description
      description: Internal description of the file, provided at compile-time.
      example: Paint
      flat_name: target.process.pe.description
      ignore_above: 1024
      level: extended
      name: description
      normalize: []
      order: 2
      original_fieldset: pe
      short: Internal description of the file, provided at compile-time.
      type: keyword
    process.pe.file_version:
      dashed_name: target-process-pe-file-version
      description: Internal version of the file, provided at compile-time.
      example: 6.3.9600.17415
      flat_name: target.process.pe.file_version
      ignore_above: 1024
      level: extended
      name: file_version
      normalize: []
      order: 1
      original_fieldset: pe
      short: Process name.
      type: keyword
    process.pe.malware_classification.features.data.buffer:
      dashed_name: target-process-pe-malware-classification-features-data-buffer
      description: TODO
      flat_name: target.process.pe.malware_classification.features.data.buffer
      ignore_above: 1024
      level: custom
      name: features.data.buffer
      normalize: []
      order: 4
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    process.pe.malware_classification.features.data.decompressed_size:
      dashed_name: target-process-pe-malware-classification-features-data-decompressed-size
      description: TODO
      flat_name: target.process.pe.malware_classification.features.data.decompressed_size
      level: custom
      name: features.data.decompressed_size
      normalize: []
      order: 5
      original_fieldset: malware_classification
      short: TODO
      type: integer
    process.pe.malware_classification.features.data.encoding:
      dashed_name: target-process-pe-malware-classification-features-data-encoding
      description: TODO
      flat_name: target.process.pe.malware_classification.features.data.encoding
      ignore_above: 1024
      level: custom
      name: features.data.encoding
      normalize: []
      order: 6
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    process.pe.malware_classification.identifier:
      dashed_name: target-process-pe-malware-classification-identifier
      description: TODO
      flat_name: target.process.pe.malware_classification.identifier
      ignore_above: 1024
      level: custom
      name: identifier
      normalize: []
      order: 2
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    process.pe.malware_classification.score:
      dashed_name: target-process-pe-malware-classification-score
      description: TODO
      flat_name: target.process.pe.malware_classification.score
      level: custom
      name: score
      normalize: []
      order: 0
      original_fieldset: malware_classification
      short: TODO
      type: double
    process.pe.malware_classification.threshold:
      dashed_name: target-process-pe-malware-classification-threshold
      description: TODO
      flat_name: target.process.pe.malware_classification.threshold
      level: custom
      name: threshold
      normalize: []
      order: 1
      original_fieldset: malware_classification
      short: TODO
      type: double
    process.pe.malware_classification.upx_packed:
      dashed_name: target-process-pe-malware-classification-upx-packed
      description: TODO
      flat_name: target.process.pe.malware_classification.upx_packed
      level: custom
      name: upx_packed
      normalize: []
      order: 7
      original_fieldset: malware_classification
      short: TODO
      type: boolean
    process.pe.malware_classification.version:
      dashed_name: target-process-pe-malware-classification-version
      description: TODO
      flat_name: target.process.pe.malware_classification.version
      ignore_above: 1024
      level: custom
      name: version
      normalize: []
      order: 3
      original_fieldset: malware_classification
      short: TODO
      type: keyword
    process.pe.original_file_name:
      dashed_name: target-process-pe-original-file-name
      description: Internal name of the file, provided at compile-time.
      example: MSPAINT.EXE
      flat_name: target.process.pe.original_file_name
      ignore_above: 1024
      level: extended
      name: original_file_name
      normalize: []
      order: 0
      original_fieldset: pe
      short: Internal name of the file, provided at compile-time.
      type: keyword
    process.pe.product:
      dashed_name: target-process-pe-product
      description: Internal product name of the file, provided at compile-time.
      example: "Microsoft\xAE Windows\xAE Operating System"
      flat_name: target.process.pe.product
      ignore_above: 1024
      level: extended
      name: product
      normalize: []
      order: 3
      original_fieldset: pe
      short: Internal product name of the file, provided at compile-time.
      type: keyword
    process.pgid:
      dashed_name: target-process-pgid
      description: Identifier of the group of processes the process belongs to.
      flat_name: target.process.pgid
      format: string
      level: extended
      name: pgid
      normalize: []
      order: 8
      original_fieldset: process
      short: Identifier of the group of processes the process belongs to.
      type: long
    process.phys_memory_bytes:
      dashed_name: target-process-phys-memory-bytes
      description: TODO
      flat_name: target.process.phys_memory_bytes
      ignore_above: 1024
      level: custom
      name: phys_memory_bytes
      normalize: []
      order: 35
      original_fieldset: process
      short: TODO
      type: keyword
    process.pid:
      dashed_name: target-process-pid
      description: Process id.
      example: 4242
      flat_name: target.process.pid
      format: string
      level: core
      name: pid
      normalize: []
      order: 0
      original_fieldset: process
      short: Process id.
      type: long
    process.ppid:
      dashed_name: target-process-ppid
      description: Parent process' pid.
      example: 4241
      flat_name: target.process.ppid
      format: string
      level: extended
      name: ppid
      normalize: []
      order: 6
      original_fieldset: process
      short: Parent process' pid.
      type: long
    process.services:
      dashed_name: target-process-services
      description: TODO
      flat_name: target.process.services
      ignore_above: 1024
      level: custom
      name: services
      normalize: []
      order: 59
      original_fieldset: process
      short: TODO
      type: keyword
    process.session_id:
      dashed_name: target-process-session-id
      description: TODO
      flat_name: target.process.session_id
      level: custom
      name: session_id
      normalize: []
      order: 43
      original_fieldset: process
      short: TODO
      type: long
    process.short_name:
      dashed_name: target-process-short-name
      description: TODO
      flat_name: target.process.short_name
      ignore_above: 1024
      level: custom
      name: short_name
      normalize: []
      order: 38
      original_fieldset: process
      short: TODO
      type: keyword
    process.sid:
      dashed_name: target-process-sid
      description: TODO
      flat_name: target.process.sid
      ignore_above: 1024
      level: custom
      name: sid
      normalize: []
      order: 45
      original_fieldset: process
      short: TODO
      type: keyword
    process.start:
      dashed_name: target-process-start
      description: The time the process started.
      example: '2016-05-23T08:05:34.853Z'
      flat_name: target.process.start
      level: extended
      name: start
      normalize: []
      order: 24
      original_fieldset: process
      short: The time the process started.
      type: date
    process.thread.call_stack:
      dashed_name: target-process-thread-call-stack
      description: TODO
      flat_name: target.process.thread.call_stack
      group: 2
      level: custom
      name: call_stack
      normalize: []
      original_fieldset: call_stack
      prefix: call_stack.
      reusable:
        expected:
        - thread
        - process.defense_evasions
        top_level: false
      short: TODO
      title: Call Stack
      type: nested
    process.thread.call_stack.instruction_pointer:
      dashed_name: target-process-thread-call-stack-instruction-pointer
      description: TODO
      flat_name: target.process.thread.call_stack.instruction_pointer
      ignore_above: 1024
      level: custom
      name: instruction_pointer
      normalize: []
      order: 1
      original_fieldset: call_stack
      short: TODO
      type: keyword
    process.thread.call_stack.memory_section.memory_address:
      dashed_name: target-process-thread-call-stack-memory-section-memory-address
      description: TODO
      flat_name: target.process.thread.call_stack.memory_section.memory_address
      ignore_above: 1024
      level: custom
      name: memory_section.memory_address
      normalize: []
      order: 2
      original_fieldset: call_stack
      short: TODO
      type: keyword
    process.thread.call_stack.memory_section.memory_size:
      dashed_name: target-process-thread-call-stack-memory-section-memory-size
      description: TODO
      flat_name: target.process.thread.call_stack.memory_section.memory_size
      ignore_above: 1024
      level: custom
      name: memory_section.memory_size
      normalize: []
      order: 3
      original_fieldset: call_stack
      short: TODO
      type: keyword
    process.thread.call_stack.memory_section.protection:
      dashed_name: target-process-thread-call-stack-memory-section-protection
      description: TODO
      flat_name: target.process.thread.call_stack.memory_section.protection
      ignore_above: 1024
      level: custom
      name: memory_section.protection
      normalize: []
      order: 4
      original_fieldset: call_stack
      short: TODO
      type: keyword
    process.thread.call_stack.module_path:
      dashed_name: target-process-thread-call-stack-module-path
      description: TODO
      flat_name: target.process.thread.call_stack.module_path
      ignore_above: 1024
      level: custom
      name: module_path
      normalize: []
      order: 0
      original_fieldset: call_stack
      short: TODO
      type: keyword
    process.thread.call_stack.rva:
      dashed_name: target-process-thread-call-stack-rva
      description: TODO
      flat_name: target.process.thread.call_stack.rva
      ignore_above: 1024
      level: custom
      name: rva
      normalize: []
      order: 6
      original_fieldset: call_stack
      short: TODO
      type: keyword
    process.thread.call_stack.symbol_info:
      dashed_name: target-process-thread-call-stack-symbol-info
      description: TODO
      flat_name: target.process.thread.call_stack.symbol_info
      ignore_above: 1024
      level: custom
      name: symbol_info
      normalize: []
      order: 5
      original_fieldset: call_stack
      short: TODO
      type: keyword
    process.thread.service:
      dashed_name: target-process-thread-service
      description: Service associated with the thread.
      example: VaultSvc
      flat_name: target.process.thread.service
      ignore_above: 1024
      level: extended
      name: service
      normalize: []
      order: 3
      original_fieldset: thread
      short: Service associated with the thread.
      type: keyword
    process.thread.start:
      dashed_name: target-process-thread-start
      description: The time the thread started.
      example: '2016-05-23T08:05:34.853Z'
      flat_name: target.process.thread.start
      level: extended
      name: start
      normalize: []
      order: 0
      original_fieldset: thread
      short: The time the thread started.
      type: date
    process.thread.start_address:
      dashed_name: target-process-thread-start-address
      description: Memory address where the thread started.
      example: 5442508
      flat_name: target.process.thread.start_address
      ignore_above: 1024
      level: extended
      name: start_address
      normalize: []
      order: 1
      original_fieldset: thread
      short: Memory address where the thread started.
      type: keyword
    process.thread.start_address_module:
      dashed_name: target-process-thread-start-address-module
      description: TODO
      example: C:\Program Files\VMware\VMware Tools\vmtoolsd.exe
      flat_name: target.process.thread.start_address_module
      ignore_above: 1024
      level: extended
      name: start_address_module
      normalize: []
      order: 2
      original_fieldset: thread
      short: TODO
      type: keyword
    process.thread.token.domain:
      dashed_name: target-process-thread-token-domain
      description: TODO
      flat_name: target.process.thread.token.domain
      ignore_above: 1024
      level: extended
      name: domain
      normalize: []
      order: 1
      original_fieldset: token
      short: TODO
      type: keyword
    process.thread.token.impersonation_level:
      dashed_name: target-process-thread-token-impersonation-level
      description: Impersonation level. Only valid for impersonation tokens.
      flat_name: target.process.thread.token.impersonation_level
      ignore_above: 1024
      level: extended
      name: impersonation_level
      normalize: []
      order: 4
      original_fieldset: token
      short: Impersonation level. Only valid for impersonation tokens.
      type: keyword
    process.thread.token.integrity_level:
      dashed_name: target-process-thread-token-integrity-level
      description: Numeric integrity level.
      flat_name: target.process.thread.token.integrity_level
      level: extended
      name: integrity_level
      normalize: []
      order: 5
      original_fieldset: token
      short: Numeric integrity level.
      type: long
    process.thread.token.integrity_level_name:
      dashed_name: target-process-thread-token-integrity-level-name
      description: Human readable integrity level.
      flat_name: target.process.thread.token.integrity_level_name
      ignore_above: 1024
      level: extended
      name: integrity_level_name
      normalize: []
      order: 6
      original_fieldset: token
      short: Human readable integrity level.
      type: keyword
    process.thread.token.is_appcontainer:
      dashed_name: target-process-thread-token-is-appcontainer
      description: Whether or not this is an appcontainer token.
      flat_name: target.process.thread.token.is_appcontainer
      level: extended
      name: is_appcontainer
      normalize: []
      order: 7
      original_fieldset: token
      short: Whether or not this is an appcontainer token.
      type: boolean
    process.thread.token.privileges:
      dashed_name: target-process-thread-token-privileges
      description: Array describing the privileges associated with the token.
      flat_name: target.process.thread.token.privileges
      level: extended
      name: privileges
      normalize: []
      order: 8
      original_fieldset: token
      short: Array describing the privileges associated with the token.
      type: nested
    process.thread.token.privileges.description:
      dashed_name: target-process-thread-token-privileges-description
      description: Description of the privilege.
      flat_name: target.process.thread.token.privileges.description
      ignore_above: 1024
      level: extended
      name: privileges.description
      normalize: []
      order: 11
      original_fieldset: token
      short: Description of the privilege.
      type: keyword
    process.thread.token.privileges.enabled:
      dashed_name: target-process-thread-token-privileges-enabled
      description: Whether or not the privilege is enabled.
      flat_name: target.process.thread.token.privileges.enabled
      level: extended
      name: privileges.enabled
      normalize: []
      order: 10
      original_fieldset: token
      short: Whether or not the privilege is enabled.
      type: boolean
    process.thread.token.privileges.name:
      dashed_name: target-process-thread-token-privileges-name
      description: Name of the privilege.
      flat_name: target.process.thread.token.privileges.name
      ignore_above: 1024
      level: extended
      name: privileges.name
      normalize: []
      order: 9
      original_fieldset: token
      short: Name of the privilege.
      type: keyword
    process.thread.token.sid:
      dashed_name: target-process-thread-token-sid
      description: TODO
      flat_name: target.process.thread.token.sid
      ignore_above: 1024
      level: extended
      name: sid
      normalize: []
      order: 2
      original_fieldset: token
      short: TODO
      type: keyword
    process.thread.token.type:
      dashed_name: target-process-thread-token-type
      description: Type of the token, either primary or impersonation.
      flat_name: target.process.thread.token.type
      ignore_above: 1024
      level: extended
      name: type
      normalize: []
      order: 3
      original_fieldset: token
      short: Type of the token, either primary or impersonation.
      type: keyword
    process.thread.token.user:
      dashed_name: target-process-thread-token-user
      description: Username of token owner.
      flat_name: target.process.thread.token.user
      ignore_above: 1024
      level: extended
      name: user
      normalize: []
      order: 0
      original_fieldset: token
      short: Username of token owner.
      type: keyword
    process.threads:
      dashed_name: target-process-threads
      description: TODO
      flat_name: target.process.threads
      level: custom
      name: threads
      normalize: []
      order: 22
      original_fieldset: process
      short: TODO
      type: nested
    process.threads.entrypoint:
      dashed_name: target-process-threads-entrypoint
      description: TODO
      flat_name: target.process.threads.entrypoint
      ignore_above: 1024
      level: custom
      name: threads.entrypoint
      normalize: []
      order: 24
      original_fieldset: process
      short: TODO
      type: keyword
    process.threads.id:
      dashed_name: target-process-threads-id
      description: TODO
      flat_name: target.process.threads.id
      level: custom
      name: threads.id
      normalize: []
      order: 23
      original_fieldset: process
      short: TODO
      type: long
    process.threads.start:
      dashed_name: target-process-threads-start
      description: TODO
      flat_name: target.process.threads.start
      level: custom
      name: threads.start
      normalize: []
      order: 25
      original_fieldset: process
      short: TODO
      type: date
    process.threads.uptime:
      dashed_name: target-process-threads-uptime
      description: TODO
      flat_name: target.process.threads.uptime
      level: custom
      name: threads.uptime
      normalize: []
      order: 26
      original_fieldset: process
      short: TODO
      type: long
    process.title:
      dashed_name: target-process-title
      description: 'Process title.

        The proctitle, some times the same as process name. Can also be different:
        for example a browser setting its title to the web page currently opened.'
      flat_name: target.process.title
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: target.process.title.text
        name: text
        norms: false
        type: text
      name: title
      normalize: []
      order: 18
      original_fieldset: process
      short: Process title.
      type: keyword
    process.token.domain:
      dashed_name: target-process-token-domain
      description: TODO
      flat_name: target.process.token.domain
      ignore_above: 1024
      level: extended
      name: domain
      normalize: []
      order: 1
      original_fieldset: token
      short: TODO
      type: keyword
    process.token.impersonation_level:
      dashed_name: target-process-token-impersonation-level
      description: Impersonation level. Only valid for impersonation tokens.
      flat_name: target.process.token.impersonation_level
      ignore_above: 1024
      level: extended
      name: impersonation_level
      normalize: []
      order: 4
      original_fieldset: token
      short: Impersonation level. Only valid for impersonation tokens.
      type: keyword
    process.token.integrity_level:
      dashed_name: target-process-token-integrity-level
      description: Numeric integrity level.
      flat_name: target.process.token.integrity_level
      level: extended
      name: integrity_level
      normalize: []
      order: 5
      original_fieldset: token
      short: Numeric integrity level.
      type: long
    process.token.integrity_level_name:
      dashed_name: target-process-token-integrity-level-name
      description: Human readable integrity level.
      flat_name: target.process.token.integrity_level_name
      ignore_above: 1024
      level: extended
      name: integrity_level_name
      normalize: []
      order: 6
      original_fieldset: token
      short: Human readable integrity level.
      type: keyword
    process.token.is_appcontainer:
      dashed_name: target-process-token-is-appcontainer
      description: Whether or not this is an appcontainer token.
      flat_name: target.process.token.is_appcontainer
      level: extended
      name: is_appcontainer
      normalize: []
      order: 7
      original_fieldset: token
      short: Whether or not this is an appcontainer token.
      type: boolean
    process.token.privileges:
      dashed_name: target-process-token-privileges
      description: Array describing the privileges associated with the token.
      flat_name: target.process.token.privileges
      level: extended
      name: privileges
      normalize: []
      order: 8
      original_fieldset: token
      short: Array describing the privileges associated with the token.
      type: nested
    process.token.privileges.description:
      dashed_name: target-process-token-privileges-description
      description: Description of the privilege.
      flat_name: target.process.token.privileges.description
      ignore_above: 1024
      level: extended
      name: privileges.description
      normalize: []
      order: 11
      original_fieldset: token
      short: Description of the privilege.
      type: keyword
    process.token.privileges.enabled:
      dashed_name: target-process-token-privileges-enabled
      description: Whether or not the privilege is enabled.
      flat_name: target.process.token.privileges.enabled
      level: extended
      name: privileges.enabled
      normalize: []
      order: 10
      original_fieldset: token
      short: Whether or not the privilege is enabled.
      type: boolean
    process.token.privileges.name:
      dashed_name: target-process-token-privileges-name
      description: Name of the privilege.
      flat_name: target.process.token.privileges.name
      ignore_above: 1024
      level: extended
      name: privileges.name
      normalize: []
      order: 9
      original_fieldset: token
      short: Name of the privilege.
      type: keyword
    process.token.sid:
      dashed_name: target-process-token-sid
      description: TODO
      flat_name: target.process.token.sid
      ignore_above: 1024
      level: extended
      name: sid
      normalize: []
      order: 2
      original_fieldset: token
      short: TODO
      type: keyword
    process.token.type:
      dashed_name: target-process-token-type
      description: Type of the token, either primary or impersonation.
      flat_name: target.process.token.type
      ignore_above: 1024
      level: extended
      name: type
      normalize: []
      order: 3
      original_fieldset: token
      short: Type of the token, either primary or impersonation.
      type: keyword
    process.token.user:
      dashed_name: target-process-token-user
      description: Username of token owner.
      flat_name: target.process.token.user
      ignore_above: 1024
      level: extended
      name: user
      normalize: []
      order: 0
      original_fieldset: token
      short: Username of token owner.
      type: keyword
    process.tty_device.major_number:
      dashed_name: target-process-tty-device-major-number
      description: TODO
      flat_name: target.process.tty_device.major_number
      level: custom
      name: tty_device.major_number
      normalize: []
      order: 40
      original_fieldset: process
      short: TODO
      type: integer
    process.tty_device.minor_number:
      dashed_name: target-process-tty-device-minor-number
      description: TODO
      flat_name: target.process.tty_device.minor_number
      level: custom
      name: tty_device.minor_number
      normalize: []
      order: 41
      original_fieldset: process
      short: TODO
      type: integer
    process.tty_device.name:
      dashed_name: target-process-tty-device-name
      description: TODO
      flat_name: target.process.tty_device.name
      ignore_above: 1024
      level: custom
      name: tty_device.name
      normalize: []
      order: 42
      original_fieldset: process
      short: TODO
      type: keyword
    process.unbacked_execute_byte_count:
      dashed_name: target-process-unbacked-execute-byte-count
      description: TODO
      flat_name: target.process.unbacked_execute_byte_count
      ignore_above: 1024
      level: custom
      name: unbacked_execute_byte_count
      normalize: []
      order: 1
      original_fieldset: process
      short: TODO
      type: keyword
    process.unbacked_execute_region_count:
      dashed_name: target-process-unbacked-execute-region-count
      description: TODO
      flat_name: target.process.unbacked_execute_region_count
      ignore_above: 1024
      level: custom
      name: unbacked_execute_region_count
      normalize: []
      order: 2
      original_fieldset: process
      short: TODO
      type: keyword
    process.uptime:
      dashed_name: target-process-uptime
      description: Seconds the process has been up.
      example: 1325
      flat_name: target.process.uptime
      level: extended
      name: uptime
      normalize: []
      order: 26
      original_fieldset: process
      short: Seconds the process has been up.
      type: long
    process.user:
      dashed_name: target-process-user
      description: TODO
      flat_name: target.process.user
      ignore_above: 1024
      level: custom
      name: user
      normalize: []
      order: 60
      original_fieldset: process
      short: TODO
      type: keyword
    process.virt_memory_bytes:
      dashed_name: target-process-virt-memory-bytes
      description: TODO
      flat_name: target.process.virt_memory_bytes
      ignore_above: 1024
      level: custom
      name: virt_memory_bytes
      normalize: []
      order: 34
      original_fieldset: process
      short: TODO
      type: keyword
    process.working_directory:
      dashed_name: target-process-working-directory
      description: The working directory of the process.
      example: /home/alice
      flat_name: target.process.working_directory
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: target.process.working_directory.text
        name: text
        norms: false
        type: text
      name: working_directory
      normalize: []
      order: 28
      original_fieldset: process
      short: The working directory of the process.
      type: keyword
    thread:
      dashed_name: target-thread
      description: Thread.
      flat_name: target.thread
      level: extended
      name: thread
      normalize: []
      object_type: keyword
      order: 1
      short: Thread.
      type: object
  group: 2
  name: target
  nestings:
  - process
  prefix: target.
  short: These fields contain information about a target.
  title: Target
  type: group
threat:
  description: 'Fields to classify events and alerts according to a threat taxonomy
    such as the Mitre ATT&CK framework.

    These fields are for users to classify alerts from all of their sources (e.g.
    IDS, NGFW, etc.) within a common taxonomy. The threat.tactic.* are meant to capture
    the high level category of the threat (e.g. "impact"). The threat.technique.*
    fields are meant to capture which kind of approach is used by this detected threat,
    to accomplish the goal (e.g. "endpoint denial of service").'
  fields:
    framework:
      dashed_name: threat-framework
      description: Name of the threat framework used to further categorize and classify
        the tactic and technique of the reported threat. Framework classification
        can be provided by detecting systems, evaluated at ingest time, or retrospectively
        tagged to events.
      example: MITRE ATT&CK
      flat_name: threat.framework
      ignore_above: 1024
      level: extended
      name: framework
      normalize: []
      order: 0
      short: Threat classification framework.
      type: keyword
    tactic.id:
      dashed_name: threat-tactic-id
      description: The id of tactic used by this threat. You can use the Mitre ATT&CK
        Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/tactics/TA0040/
        )
      example: TA0040
      flat_name: threat.tactic.id
      ignore_above: 1024
      level: extended
      name: tactic.id
      normalize:
      - array
      order: 2
      short: Threat tactic id.
      type: keyword
    tactic.name:
      dashed_name: threat-tactic-name
      description: Name of the type of tactic used by this threat. You can use the
        Mitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/tactics/TA0040/
        )
      example: impact
      flat_name: threat.tactic.name
      ignore_above: 1024
      level: extended
      name: tactic.name
      normalize:
      - array
      order: 1
      short: Threat tactic.
      type: keyword
    tactic.reference:
      dashed_name: threat-tactic-reference
      description: The reference url of tactic used by this threat. You can use the
        Mitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/tactics/TA0040/
        )
      example: https://attack.mitre.org/tactics/TA0040/
      flat_name: threat.tactic.reference
      ignore_above: 1024
      level: extended
      name: tactic.reference
      normalize:
      - array
      order: 3
      short: Threat tactic url reference.
      type: keyword
    technique.id:
      dashed_name: threat-technique-id
      description: The id of technique used by this tactic. You can use the Mitre
        ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/techniques/T1499/
        )
      example: T1499
      flat_name: threat.technique.id
      ignore_above: 1024
      level: extended
      name: technique.id
      normalize:
      - array
      order: 5
      short: Threat technique id.
      type: keyword
    technique.name:
      dashed_name: threat-technique-name
      description: The name of technique used by this tactic. You can use the Mitre
        ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/techniques/T1499/
        )
      example: endpoint denial of service
      flat_name: threat.technique.name
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: threat.technique.name.text
        name: text
        norms: false
        type: text
      name: technique.name
      normalize:
      - array
      order: 4
      short: Threat technique name.
      type: keyword
    technique.reference:
      dashed_name: threat-technique-reference
      description: The reference url of technique used by this tactic. You can use
        the Mitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/techniques/T1499/
        )
      example: https://attack.mitre.org/techniques/T1499/
      flat_name: threat.technique.reference
      ignore_above: 1024
      level: extended
      name: technique.reference
      normalize:
      - array
      order: 6
      short: Threat technique reference.
      type: keyword
  group: 2
  name: threat
  prefix: threat.
  short: Fields to classify events and alerts according to a threat taxonomy.
  title: Threat
  type: group
user:
  description: 'The user fields describe information about the user that is relevant
    to the event.

    Fields can have one entry or multiple entries. If a user has more than one id,
    provide an array that includes all of them.'
  fields:
    domain:
      dashed_name: user-domain
      description: 'Name of the directory the user is a member of.

        For example, an LDAP or Active Directory domain name.'
      flat_name: user.domain
      ignore_above: 1024
      level: extended
      name: domain
      normalize: []
      order: 5
      short: Name of the directory the user is a member of.
      type: keyword
    email:
      dashed_name: user-email
      description: User email address.
      flat_name: user.email
      ignore_above: 1024
      level: extended
      name: email
      normalize: []
      order: 3
      short: User email address.
      type: keyword
    full_name:
      dashed_name: user-full-name
      description: User's full name, if available.
      example: Albert Einstein
      flat_name: user.full_name
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: user.full_name.text
        name: text
        norms: false
        type: text
      name: full_name
      normalize: []
      order: 2
      short: User's full name, if available.
      type: keyword
    group.domain:
      dashed_name: user-group-domain
      description: 'Name of the directory the group is a member of.

        For example, an LDAP or Active Directory domain name.'
      flat_name: user.group.domain
      ignore_above: 1024
      level: extended
      name: domain
      normalize: []
      order: 2
      original_fieldset: group
      short: Name of the directory the group is a member of.
      type: keyword
    group.id:
      dashed_name: user-group-id
      description: Unique identifier for the group on the system/platform.
      flat_name: user.group.id
      ignore_above: 1024
      level: extended
      name: id
      normalize: []
      order: 0
      original_fieldset: group
      short: Unique identifier for the group on the system/platform.
      type: keyword
    group.name:
      dashed_name: user-group-name
      description: Name of the group.
      flat_name: user.group.name
      ignore_above: 1024
      level: extended
      name: name
      normalize: []
      order: 1
      original_fieldset: group
      short: Name of the group.
      type: keyword
    hash:
      dashed_name: user-hash
      description: 'Unique user hash to correlate information for a user in anonymized
        form.

        Useful if `user.id` or `user.name` contain confidential information and cannot
        be used.'
      flat_name: user.hash
      ignore_above: 1024
      level: extended
      name: hash
      normalize: []
      order: 4
      short: Unique user hash to correlate information for a user in anonymized form.
      type: keyword
    id:
      dashed_name: user-id
      description: Unique identifiers of the user.
      flat_name: user.id
      ignore_above: 1024
      level: core
      name: id
      normalize: []
      order: 0
      short: Unique identifiers of the user.
      type: keyword
    name:
      dashed_name: user-name
      description: Short name or login of the user.
      example: albert
      flat_name: user.name
      ignore_above: 1024
      level: core
      multi_fields:
      - flat_name: user.name.text
        name: text
        norms: false
        type: text
      name: name
      normalize: []
      order: 1
      short: Short name or login of the user.
      type: keyword
  group: 2
  name: user
  nestings:
  - group
  prefix: user.
  reusable:
    expected:
    - client
    - destination
    - host
    - server
    - source
    top_level: true
  short: Fields to describe the user relevant to the event.
  title: User
  type: group
