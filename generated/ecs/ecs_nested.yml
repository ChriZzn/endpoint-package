agent:
  description: 'The agent fields contain the data about the software entity, if any,
    that collects, detects, or observes events on a host, or takes measurements on
    a host.

    Examples include Beats. Agents may also run on observers. ECS agent.* fields shall
    be populated with details of the agent running on the host or observer where the
    event happened or the measurement was taken.'
  fields:
    ephemeral_id:
      description: 'Ephemeral identifier of this agent (if one exists).

        This id normally changes across restarts, but `agent.id` does not.'
      type: keyword
    id:
      description: 'Unique identifier of this agent (if one exists).

        Example: For Beats this would be beat.id.'
      type: keyword
    name:
      description: 'Custom name of the agent.

        This is a name that can be given to an agent. This can be helpful if for example
        two Filebeat instances are running on the same host but a human readable separation
        is needed on which Filebeat instance data is coming from.

        If no name is given, the name is often left empty.'
      type: keyword
    type:
      description: 'Type of the agent.

        The agent type stays always the same and should be given by the agent used.
        In case of Filebeat the agent would always be Filebeat also if two Filebeat
        instances are run on the same machine.'
      type: keyword
    version:
      description: Version of the agent.
      type: keyword
  footnote: 'Examples: In the case of Beats for logs, the agent.name is filebeat.
    For APM, it is the agent running in the app/service. The agent information does
    not change if data is sent through queuing systems like Kafka, Redis, or processing
    systems such as Logstash or APM Server.'
  group: 2
  name: agent
  prefix: agent.
  short: Fields about the monitoring agent.
  title: Agent
  type: group
base:
  description: The `base` field set contains all fields which are on the top level.
    These fields are common across all types of events.
  fields:
    '@timestamp':
      description: 'Date/time when the event originated.

        This is the date/time extracted from the event, typically representing when
        the event was generated by the source.

        If the event source has no original timestamp, this value is typically populated
        by the first time the event was received by the pipeline.

        Required field for all events.'
      type: date
    message:
      description: 'For log events the message field contains the log message, optimized
        for viewing in a log viewer.

        For structured logs without an original message field, other fields can be
        concatenated to form a human-readable summary of the event.

        If multiple messages exist, they can be combined into one message.'
      type: text
  group: 1
  name: base
  prefix: ''
  root: true
  short: All fields defined directly at the top level
  title: Base
  type: group
destination:
  description: 'Destination fields describe details about the destination of a packet/event.

    Destination fields are usually populated in conjunction with source fields.'
  fields:
    address:
      description: 'Some event destination addresses are defined ambiguously. The
        event will sometimes list an IP, a domain or a unix socket.  You should always
        store the raw address in the `.address` field.

        Then it should be duplicated to `.ip` or `.domain`, depending on which one
        it is.'
      type: keyword
    bytes:
      description: Bytes sent from the destination to the source.
      type: long
    domain:
      description: Destination domain.
      type: keyword
    ip:
      description: 'IP address of the destination.

        Can be one or multiple IPv4 or IPv6 addresses.'
      type: ip
    packets:
      description: Packets sent from the destination to the source.
      type: long
    port:
      description: Port of the destination.
      type: long
    registered_domain:
      description: 'The highest registered destination domain, stripped of the subdomain.

        For example, the registered domain for "foo.google.com" is "google.com".

        This value can be determined precisely with a list like the public suffix
        list (http://publicsuffix.org). Trying to approximate this by simply taking
        the last two labels will not work well for TLDs such as "co.uk".'
      type: keyword
    top_level_domain:
      description: 'The effective top level domain (eTLD), also known as the domain
        suffix, is the last part of the domain name. For example, the top level domain
        for google.com is "com".

        This value can be determined precisely with a list like the public suffix
        list (http://publicsuffix.org). Trying to approximate this by simply taking
        the last label will not work well for effective TLDs such as "co.uk".'
      type: keyword
  group: 2
  name: destination
  nestings:
  - as
  - geo
  - user
  prefix: destination.
  short: Fields about the destination side of a network connection, used with source.
  title: Destination
  type: group
dll:
  description: 'These fields contain information about code libraries dynamically
    loaded into processes.


    Many operating systems refer to "shared code libraries" with different names,
    but this field set refers to all of the following:

    * Dynamic-link library (`.dll`) commonly used on Windows

    * Shared Object (`.so`) commonly used on Unix-like operating systems

    * Dynamic library (`.dylib`) commonly used on macOS'
  fields:
    compile_time:
      description: Timestamp from when the module was compiled.
      type: date
    mapped_address:
      description: The base address where this module is loaded.
      type: keyword
    mapped_size:
      description: The size of this module's memory mapping, in bytes.
      type: long
    name:
      description: 'Name of the library.

        This generally maps to the name of the file on disk.'
      type: keyword
    path:
      description: Full file path of the library.
      type: keyword
  group: 2
  name: dll
  nestings:
  - code_signature
  - hash
  - malware_classification
  - pe
  prefix: dll.
  reusable:
    expected:
    - target
    top_level: true
  short: These fields contain information about code libraries dynamically loaded
    into processes.
  title: DLL
  type: group
dns:
  description: 'Fields describing DNS queries and answers.

    DNS events should either represent a single DNS query prior to getting answers
    (`dns.type:query`) or they should represent a full exchange and contain the query
    details as well as all of the answers that were provided for this query (`dns.type:answer`).'
  fields:
    question.name:
      description: 'The name being queried.

        If the name field contains non-printable characters (below 32 or above 126),
        those characters should be represented as escaped base 10 integers (\DDD).
        Back slashes and quotes should be escaped. Tabs, carriage returns, and line
        feeds should be converted to \t, \r, and \n respectively.'
      type: keyword
    question.registered_domain:
      description: 'The highest registered domain, stripped of the subdomain.

        For example, the registered domain for "foo.google.com" is "google.com".

        This value can be determined precisely with a list like the public suffix
        list (http://publicsuffix.org). Trying to approximate this by simply taking
        the last two labels will not work well for TLDs such as "co.uk".'
      type: keyword
    question.subdomain:
      description: 'The subdomain is all of the labels under the registered_domain.

        If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com",
        the subdomain field should contain "sub2.sub1", with no trailing period.'
      type: keyword
    question.top_level_domain:
      description: 'The effective top level domain (eTLD), also known as the domain
        suffix, is the last part of the domain name. For example, the top level domain
        for google.com is "com".

        This value can be determined precisely with a list like the public suffix
        list (http://publicsuffix.org). Trying to approximate this by simply taking
        the last label will not work well for effective TLDs such as "co.uk".'
      type: keyword
    question.type:
      description: The type of record being queried.
      type: keyword
    resolved_ip:
      description: 'Array containing all IPs seen in `answers.data`.

        The `answers` array can be difficult to use, because of the variety of data
        formats it can contain. Extracting all IP addresses seen in there to `dns.resolved_ip`
        makes it possible to index them as IP addresses, and makes them easier to
        visualize and query for.'
      type: ip
  group: 2
  name: dns
  prefix: dns.
  short: Fields describing DNS queries and answers.
  title: DNS
  type: group
ecs:
  description: Meta-information specific to ECS.
  fields:
    version:
      description: 'ECS version this event conforms to. `ecs.version` is a required
        field and must exist in all events.

        When querying across multiple indices -- which may conform to slightly different
        ECS versions -- this field lets integrations adjust to the schema version
        of the events.'
      type: keyword
  group: 2
  name: ecs
  prefix: ecs.
  short: Meta-information specific to ECS.
  title: ECS
  type: group
endpoint:
  description: Fields describing the state of the Elastic Endpoint when an event occurs.
  fields:
    artifact.hash:
      description: Hash of artifact in use by endpoint when event was created.
      type: keyword
    artifact.name:
      description: Name of artifact in use by endpoint when event was created.
      type: keyword
    artifact.version:
      description: Version of artifact in use by endpoint when event was created.
      type: keyword
    file:
      description: Extended "file" field set
      type: object
    file.original:
      description: Original file information during a modification event.
      type: object
    file.original.gid:
      description: Primary group ID (GID) of the file.
      type: keyword
    file.original.group:
      description: Primary group name of the file.
      type: keyword
    file.original.mode:
      description: Original file mode prior to a modification event
      type: keyword
    file.original.name:
      description: Original file name prior to a modification event
      type: keyword
    file.original.owner:
      description: File owner's username.
      type: keyword
    file.original.path:
      description: Original file path prior to a modification event
      type: keyword
    file.original.uid:
      description: The user ID (UID) or security identifier (SID) of the file owner.
      type: keyword
    file.windows:
      description: Platform-specific Windows fields
      type: object
    file.windows.zone_identifier:
      description: Windows zone identifier for a file
      type: keyword
    group:
      description: Extended "group" field set
      type: object
    group.real:
      description: Group info prior to any setgid operations.
      type: object
    group.real.id:
      description: Unique identifier for the group on the system/platform.
      type: keyword
    group.real.name:
      description: Name of the group.
      type: keyword
    policy:
      description: The policy fields are used to hold information about applied policy.
      type: object
    policy.id:
      description: ID of the policy that was active when the event was created.
      type: keyword
    process:
      description: Extended "process" field set
      type: object
    process.authentication_id:
      description: Process authentication ID
      type: keyword
    process.parent:
      description: Extended "process.parent" field set.
      type: object
    process.parent.real:
      description: The field set containing parent process info in case of any ppid
        spoofing.
      type: object
    process.parent.real.pid:
      description: The ppid of the process that actually spawned the current process,
        in case of ppid spoofing.
      type: long
    process.session:
      description: Session information for the current process
      type: keyword
    process.token:
      description: 'These fields contain information about a token.

        These fields can help you correlate metrics information with a process id/name
        from a log message.  The `process.pid` often stays in the metric itself and
        is copied to the global field for correlation.'
      type: object
    process.token.elevation:
      description: Whether the token is elevated or not
      type: keyword
    process.token.elevation_type:
      description: What level of elevation the token has
      type: keyword
    process.token.integrity_level:
      description: Integrity level of the process.
      type: keyword
    user:
      description: Extended "user" field set
      type: object
    user.real:
      description: User info prior to any setuid operations.
      type: object
    user.real.id:
      description: One or multiple unique identifiers of the user.
      type: keyword
    user.real.name:
      description: Short name or login of the user.
      type: keyword
  group: 2
  name: endpoint
  prefix: endpoint.
  short: Fields describing the state of the Elastic Endpoint when an event occurs.
  title: Endpoint
  type: group
event:
  description: 'The event fields are used for context information about the log or
    metric event itself.

    A log is defined as an event containing details of something that happened. Log
    events must include the time at which the thing happened. Examples of log events
    include a process starting on a host, a network packet being sent from a source
    to a destination, or a network connection between a client and a server being
    initiated or closed. A metric is defined as an event containing one or more numerical
    or categorical measurements and the time at which the measurement was taken. Examples
    of metric events include memory pressure measured on a host, or vulnerabilities
    measured on a scanned host.'
  fields:
    action:
      description: 'The action captured by the event.

        This describes the information in the event. It is more specific than `event.category`.
        Examples are `group-add`, `process-started`, `file-created`. The value is
        normally defined by the implementer.'
      type: keyword
    category:
      description: 'This is one of four ECS Categorization Fields, and indicates the
        second level in the ECS category hierarchy.

        `event.category` represents the "big buckets" of ECS categories. For example,
        filtering on `event.category:process` yields all events relating to process
        activity. This field is closely related to `event.type`, which is used as
        a subcategory.

        This field is an array. This will allow proper categorization of some events
        that fall in multiple categories.'
      type: keyword
    created:
      description: 'event.created contains the date/time when the event was first
        read by an agent, or by your pipeline.

        This field is distinct from @timestamp in that @timestamp typically contain
        the time extracted from the original event.

        In most situations, these two timestamps will be slightly different. The difference
        can be used to calculate the delay between your source generating an event,
        and the time when your agent first processed it. This can be used to monitor
        your agent''s or pipeline''s ability to keep up with your event source.

        In case the two timestamps are identical, @timestamp should be used.'
      type: date
    dataset:
      description: 'Name of the dataset.

        If an event source publishes more than one type of log or events (e.g. access
        log, error log), the dataset is used to specify which one the event comes
        from.

        It''s recommended but not required to start the dataset name with the module
        name, followed by a dot, then the dataset name.'
      type: keyword
    hash:
      description: Hash (perhaps logstash fingerprint) of raw field to be able to
        demonstrate log integrity.
      type: keyword
    id:
      description: Unique ID to describe the event.
      type: keyword
    ingested:
      description: 'Timestamp when an event arrived in the central data store.

        This is different from `@timestamp`, which is when the event originally occurred.  It''s
        also different from `event.created`, which is meant to capture the first time
        an agent saw the event.

        In normal conditions, assuming no tampering, the timestamps should chronologically
        look like this: `@timestamp` < `event.created` < `event.ingested`.'
      type: date
    kind:
      description: 'This is one of four ECS Categorization Fields, and indicates the
        highest level in the ECS category hierarchy.

        `event.kind` gives high-level information about what type of information the
        event contains, without being specific to the contents of the event. For example,
        values of this field distinguish alert events from metric events.

        The value of this field can be used to inform how these kinds of events should
        be handled. They may warrant different retention, different access control,
        it may also help understand whether the data coming in at a regular interval
        or not.'
      type: keyword
    module:
      description: 'Name of the module this data is coming from.

        If your monitoring agent supports the concept of modules or plugins to process
        events of a given source (e.g. Apache logs), `event.module` should contain
        the name of this module.'
      type: keyword
    outcome:
      description: 'This is one of four ECS Categorization Fields, and indicates the
        lowest level in the ECS category hierarchy.

        `event.outcome` simply denotes whether the event represent a success or a
        failure. Note that not all events will have an associated outcome. For example,
        this field is generally not populated for metric events or events with `event.type:info`.'
      type: keyword
    sequence:
      description: 'Sequence number of the event.

        The sequence number is a value published by some event sources, to make the
        exact ordering of events unambiguous, regardless of the timestamp precision.'
      type: long
    type:
      description: 'This is one of four ECS Categorization Fields, and indicates the
        third level in the ECS category hierarchy.

        `event.type` represents a categorization "sub-bucket" that, when used along
        with the `event.category` field values, enables filtering events down to a
        level appropriate for single visualization.

        This field is an array. This will allow proper categorization of some events
        that fall in multiple event types.'
      type: keyword
  group: 2
  name: event
  prefix: event.
  short: Fields breaking down the event details.
  title: Event
  type: group
file:
  description: 'A file is defined as a set of information that has been created on,
    or has existed on a filesystem.

    File objects can be associated with host events, network events, and/or file events
    (e.g., those produced by File Integrity Monitoring [FIM] products or services).
    File fields provide details about the affected file associated with the event
    or metric.'
  fields:
    accessed:
      description: 'Last time the file was accessed.

        Note that not all filesystems keep track of access time.'
      type: date
    attributes:
      description: 'Array of file attributes.

        Attributes names will vary by platform. Here''s a non-exhaustive list of values
        that are expected in this field: archive, compressed, directory, encrypted,
        execute, hidden, read, readonly, system, write.'
      type: keyword
    created:
      description: 'File creation time.

        Note that not all filesystems store the creation time.'
      type: date
    ctime:
      description: 'Last time the file attributes or metadata changed.

        Note that changes to the file content will update `mtime`. This implies `ctime`
        will be adjusted at the same time, since `mtime` is an attribute of the file.'
      type: date
    device:
      description: Device that is the source of the file.
      type: keyword
    directory:
      description: Directory where the file is located. It should include the drive
        letter, when appropriate.
      type: keyword
    drive_letter:
      description: 'Drive letter where the file is located. This field is only relevant
        on Windows.

        The value should be uppercase, and not include the colon.'
      type: keyword
    entry_modified:
      description: Time of last status change.  See `st_ctim` member of `struct stat`.
      type: double
    extension:
      description: File extension.
      type: keyword
    gid:
      description: Primary group ID (GID) of the file.
      type: keyword
    group:
      description: Primary group name of the file.
      type: keyword
    inode:
      description: Inode representing the file in the filesystem.
      type: keyword
    mode:
      description: Mode of the file in octal representation.
      type: keyword
    mtime:
      description: Last time the file content was modified.
      type: date
    name:
      description: Name of the file including the extension, without the directory.
      type: keyword
    owner:
      description: File owner's username.
      type: keyword
    path:
      description: Full path to the file, including the file name. It should include
        the drive letter, when appropriate.
      type: keyword
    size:
      description: 'File size in bytes.

        Only relevant when `file.type` is "file".'
      type: long
    target_path:
      description: Target path for symlinks.
      type: keyword
    temp_file_path:
      description: Path on endpoint where a copy of the file is being stored.  Used
        to make ephemeral files retrievable.
      type: keyword
    type:
      description: File type (file, dir, or symlink).
      type: keyword
    uid:
      description: The user ID (UID) or security identifier (SID) of the file owner.
      type: keyword
  group: 2
  name: file
  nestings:
  - code_signature
  - hash
  - macro
  - malware_classification
  - pe
  prefix: file.
  short: Fields describing files.
  title: File
  type: group
group:
  description: The group fields are meant to represent groups that are relevant to
    the event.
  fields:
    id:
      description: Unique identifier for the group on the system/platform.
      type: keyword
    name:
      description: Name of the group.
      type: keyword
  group: 2
  name: group
  prefix: group.
  reusable:
    expected:
    - user
    top_level: true
  short: User's group relevant to the event.
  title: Group
  type: group
host:
  description: 'A host is defined as a general computing instance.

    ECS host.* fields should be populated with details about the host on which the
    event happened, or from which the measurement was taken. Host types include hardware,
    virtual machines, Docker containers, and Kubernetes nodes.'
  fields:
    architecture:
      description: Operating system architecture.
      type: keyword
    domain:
      description: 'Name of the domain of which the host is a member.

        For example, on Windows this could be the host''s Active Directory domain
        or NetBIOS domain name. For Linux this could be the domain of the host''s
        LDAP provider.'
      type: keyword
    hostname:
      description: 'Hostname of the host.

        It normally contains what the `hostname` command returns on the host machine.'
      type: keyword
    id:
      description: 'Unique host id.

        As hostname is not always unique, use values that are meaningful in your environment.

        Example: The current usage of `beat.name`.'
      type: keyword
    ip:
      description: Host ip addresses.
      type: ip
    mac:
      description: Host mac addresses.
      type: keyword
    name:
      description: 'Name of the host.

        It can contain what `hostname` returns on Unix systems, the fully qualified
        domain name, or a name specified by the user. The sender decides which value
        to use.'
      type: keyword
    type:
      description: 'Type of host.

        For Cloud providers this can be the machine type like `t2.medium`. If vm,
        this could be the container, for example, or other information meaningful
        in your environment.'
      type: keyword
    uptime:
      description: Seconds the host has been up.
      type: long
  group: 2
  name: host
  nestings:
  - geo
  - os
  - user
  prefix: host.
  short: Fields describing the relevant computing instance.
  title: Host
  type: group
http:
  description: Fields related to HTTP activity. Use the `url` field set to store the
    url of the request.
  fields:
    request.body.bytes:
      description: Size in bytes of the request body.
      type: long
    request.body.content:
      description: The full HTTP request body.
      type: keyword
    request.bytes:
      description: Total size in bytes of the request (body and headers).
      type: long
    response.body.bytes:
      description: Size in bytes of the response body.
      type: long
    response.body.content:
      description: The full HTTP response body.
      type: keyword
    response.bytes:
      description: Total size in bytes of the response (body and headers).
      type: long
    response.status_code:
      description: HTTP response status code.
      type: long
    response.version:
      description: HTTP version
      type: keyword
  group: 2
  name: http
  prefix: http.
  short: Fields describing an HTTP request.
  title: HTTP
  type: group
network:
  description: 'The network is defined as the communication path over which a host
    or network event happens.

    The network.* fields should be populated with details about the network activity
    associated with an event.'
  fields:
    bytes:
      description: 'Total bytes transferred in both directions.

        If `source.bytes` and `destination.bytes` are known, `network.bytes` is their
        sum.'
      type: long
    community_id:
      description: 'A hash of source and destination IPs and ports, as well as the
        protocol used in a communication. This is a tool-agnostic standard to identify
        flows.

        Learn more at https://github.com/corelight/community-id-spec.'
      type: keyword
    direction:
      description: "Direction of the network traffic.\nRecommended values are:\n \
        \ * inbound\n  * outbound\n  * internal\n  * external\n  * unknown\n\nWhen\
        \ mapping events from a host-based monitoring context, populate this field\
        \ from the host's point of view.\nWhen mapping events from a network or perimeter-based\
        \ monitoring context, populate this field from the point of view of your network\
        \ perimeter."
      type: keyword
    iana_number:
      description: IANA Protocol Number (https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
        Standardized list of protocols. This aligns well with NetFlow and sFlow related
        logs which use the IANA Protocol Number.
      type: keyword
    packets:
      description: 'Total packets transferred in both directions.

        If `source.packets` and `destination.packets` are known, `network.packets`
        is their sum.'
      type: long
    protocol:
      description: 'L7 Network protocol name. ex. http, lumberjack, transport protocol.

        The field value must be normalized to lowercase for querying. See the documentation
        section "Implementing ECS".'
      type: keyword
    transport:
      description: 'Same as network.iana_number, but instead using the Keyword name
        of the transport layer (udp, tcp, ipv6-icmp, etc.)

        The field value must be normalized to lowercase for querying. See the documentation
        section "Implementing ECS".'
      type: keyword
    type:
      description: 'In the OSI Model this would be the Network Layer. ipv4, ipv6,
        ipsec, pim, etc

        The field value must be normalized to lowercase for querying. See the documentation
        section "Implementing ECS".'
      type: keyword
  group: 2
  name: network
  prefix: network.
  short: Fields describing the communication path over which the event happened.
  title: Network
  type: group
package:
  description: These fields contain information about an installed software package.
    It contains general information about a package, such as name, version or size.
    It also contains installation details, such as time or location.
  fields:
    name:
      description: Package name
      type: keyword
  group: 2
  name: package
  prefix: package.
  short: These fields contain information about an installed software package.
  title: Package
  type: group
process:
  description: 'These fields contain information about a process.

    These fields can help you correlate metrics information with a process id/name
    from a log message.  The `process.pid` often stays in the metric itself and is
    copied to the global field for correlation.'
  fields:
    args:
      description: 'Array of process arguments, starting with the absolute path to
        the executable.

        May be filtered to protect sensitive information.'
      type: keyword
    args_count:
      description: 'Length of the process.args array.

        This field can be useful for querying or performing bucket analysis on how
        many arguments were provided to start a process. More arguments may be an
        indication of suspicious activity.'
      type: long
    command_line:
      description: 'Full command line that started the process, including the absolute
        path to the executable, and all arguments.

        Some arguments may be filtered to protect sensitive information.'
      type: keyword
    entity_id:
      description: 'Unique identifier for the process.

        The implementation of this is specified by the data source, but some examples
        of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
        or a hash of some uniquely identifying components of a process.

        Constructing a globally unique identifier is a common practice to mitigate
        PID reuse as well as to identify a specific process over time, across multiple
        monitored hosts.'
      type: keyword
    executable:
      description: Absolute path to the process executable.
      type: keyword
    exit_code:
      description: 'The exit code of the process, if this is a termination event.

        The field should be absent if there is no exit code for the event (e.g. process
        start).'
      type: long
    name:
      description: 'Process name.

        Sometimes called program name or similar.'
      type: keyword
    parent.args:
      description: 'Array of process arguments.

        May be filtered to protect sensitive information.'
      type: keyword
    parent.args_count:
      description: 'Length of the process.args array.

        This field can be useful for querying or performing bucket analysis on how
        many arguments were provided to start a process. More arguments may be an
        indication of suspicious activity.'
      type: long
    parent.command_line:
      description: 'Full command line that started the process, including the absolute
        path to the executable, and all arguments.

        Some arguments may be filtered to protect sensitive information.'
      type: keyword
    parent.entity_id:
      description: 'Unique identifier for the process.

        The implementation of this is specified by the data source, but some examples
        of what could be used here are a process-generated UUID, Sysmon Process GUIDs,
        or a hash of some uniquely identifying components of a process.

        Constructing a globally unique identifier is a common practice to mitigate
        PID reuse as well as to identify a specific process over time, across multiple
        monitored hosts.'
      type: keyword
    parent.executable:
      description: Absolute path to the process executable.
      type: keyword
    parent.exit_code:
      description: 'The exit code of the process, if this is a termination event.

        The field should be absent if there is no exit code for the event (e.g. process
        start).'
      type: long
    parent.name:
      description: 'Process name.

        Sometimes called program name or similar.'
      type: keyword
    parent.pgid:
      description: Identifier of the group of processes the process belongs to.
      type: long
    parent.pid:
      description: Process id.
      type: long
    parent.ppid:
      description: Parent process' pid.
      type: long
    parent.start:
      description: The time the process started.
      type: date
    parent.thread.id:
      description: Thread ID.
      type: long
    parent.thread.name:
      description: Thread name.
      type: keyword
    parent.title:
      description: 'Process title.

        The proctitle, some times the same as process name. Can also be different:
        for example a browser setting its title to the web page currently opened.'
      type: keyword
    parent.uptime:
      description: Seconds the process has been up.
      type: long
    parent.working_directory:
      description: The working directory of the process.
      type: keyword
    pgid:
      description: Identifier of the group of processes the process belongs to.
      type: long
    pid:
      description: Process id.
      type: long
    ppid:
      description: Parent process' pid.
      type: long
    services:
      description: Services running in this process.
      type: keyword
    start:
      description: The time the process started.
      type: date
    thread:
      description: The thread fields are used to describe by which process thread
        the event belongs to.
      type: object
    thread.id:
      description: Thread ID.
      type: long
    thread.name:
      description: Thread name.
      type: keyword
    thread.service:
      description: Service associated with the thread.
      type: keyword
    thread.start:
      description: The time the thread started.
      type: date
    thread.start_address:
      description: Memory address where the thread began execution.
      type: keyword
    thread.start_address_module:
      description: The dll/module where the thread began execution.
      type: keyword
    thread.uptime:
      description: Seconds since thread started.
      type: long
    title:
      description: 'Process title.

        The proctitle, some times the same as process name. Can also be different:
        for example a browser setting its title to the web page currently opened.'
      type: keyword
    uptime:
      description: Seconds the process has been up.
      type: long
    user:
      description: User associated with the running process.
      type: keyword
    working_directory:
      description: The working directory of the process.
      type: keyword
  group: 2
  name: process
  nestings:
  - call_stack
  - code_signature
  - hash
  - malware_classification
  - pe
  - token
  prefix: process.
  reusable:
    expected:
    - target
    top_level: true
  short: These fields contain information about a process.
  title: Process
  type: group
registry:
  description: Fields related to Windows Registry operations.
  fields:
    data.bytes:
      description: 'Original bytes written with base64 encoding.

        For Windows registry operations, such as SetValueEx and RegQueryValueEx, this
        corresponds to the data pointed by `lp_data`. This is optional but provides
        better recoverability and should be populated for REG_BINARY encoded values.'
      type: keyword
    data.strings:
      description: 'Content when writing string types.

        Populated as an array when writing string data to the registry. For single
        string registry types (REG_SZ, REG_EXPAND_SZ), this should be an array with
        one string. For sequences of string with REG_MULTI_SZ, this array will be
        variable length. For numeric data, such as REG_DWORD and REG_QWORD, this should
        be populated with the decimal representation (e.g `"1"`).'
      type: keyword
    hive:
      description: Abbreviated name for the hive.
      type: keyword
    key:
      description: Hive-relative path of keys.
      type: keyword
    path:
      description: Full path, including hive, key and value
      type: keyword
    value:
      description: Name of the value written.
      type: keyword
  group: 2
  name: registry
  prefix: registry.
  short: Fields related to Windows Registry operations.
  title: Registry
  type: group
rule:
  description: 'Rule fields are used to capture the specifics of any observer or agent
    rules that generate alerts or other notable events.

    Examples of data sources that would populate the rule fields include: network
    admission control platforms, network or host IDS/IPS, network firewalls, web application
    firewalls, url filters, endpoint detection and response (EDR) systems, etc.'
  fields:
    category:
      description: A categorization value keyword used by the entity using the rule
        for detection of this event.
      type: keyword
    description:
      description: The description of the rule generating the event.
      type: keyword
    id:
      description: A rule ID that is unique within the scope of an agent, observer,
        or other entity using the rule for detection of this event.
      type: keyword
    name:
      description: The name of the rule or signature generating the event.
      type: keyword
    reference:
      description: 'Reference URL to additional information about the rule used to
        generate this event.

        The URL can point to the vendor''s documentation about the rule. If that''s
        not available, it can also be a link to a more general page describing this
        type of alert.'
      type: keyword
    ruleset:
      description: Name of the ruleset, policy, group, or parent category in which
        the rule used to generate this event is a member.
      type: keyword
    uuid:
      description: A rule ID that is unique within the scope of a set or group of
        agents, observers, or other entities using the rule for detection of this
        event.
      type: keyword
    version:
      description: The version / revision of the rule being used for analysis.
      type: keyword
  group: 2
  name: rule
  prefix: rule.
  short: Fields to capture details about rules used to generate alerts or other notable
    events.
  title: Rule
  type: group
source:
  description: 'Source fields describe details about the source of a packet/event.

    Source fields are usually populated in conjunction with destination fields.'
  fields:
    address:
      description: 'Some event source addresses are defined ambiguously. The event
        will sometimes list an IP, a domain or a unix socket.  You should always store
        the raw address in the `.address` field.

        Then it should be duplicated to `.ip` or `.domain`, depending on which one
        it is.'
      type: keyword
    bytes:
      description: Bytes sent from the source to the destination.
      type: long
    domain:
      description: Source domain.
      type: keyword
    ip:
      description: 'IP address of the source.

        Can be one or multiple IPv4 or IPv6 addresses.'
      type: ip
    packets:
      description: Packets sent from the source to the destination.
      type: long
    port:
      description: Port of the source.
      type: long
    registered_domain:
      description: 'The highest registered source domain, stripped of the subdomain.

        For example, the registered domain for "foo.google.com" is "google.com".

        This value can be determined precisely with a list like the public suffix
        list (http://publicsuffix.org). Trying to approximate this by simply taking
        the last two labels will not work well for TLDs such as "co.uk".'
      type: keyword
    top_level_domain:
      description: 'The effective top level domain (eTLD), also known as the domain
        suffix, is the last part of the domain name. For example, the top level domain
        for google.com is "com".

        This value can be determined precisely with a list like the public suffix
        list (http://publicsuffix.org). Trying to approximate this by simply taking
        the last label will not work well for effective TLDs such as "co.uk".'
      type: keyword
  group: 2
  name: source
  nestings:
  - as
  - geo
  - user
  prefix: source.
  short: Fields about the source side of a network connection, used with destination.
  title: Source
  type: group
target:
  description: 'These fields contain information about a target.

    These fields provide more context about the target process and thread that are
    related to the data in the document. Useful in a security context where a target
    process or thread may be acted on by another process or thread.'
  fields: {}
  group: 2
  name: target
  nestings:
  - dll
  - process
  prefix: target.
  short: These fields contain information about a target.
  title: Target
  type: group
threat:
  description: 'Fields to classify events and alerts according to a threat taxonomy
    such as the Mitre ATT&CK framework.

    These fields are for users to classify alerts from all of their sources (e.g.
    IDS, NGFW, etc.) within a common taxonomy. The threat.tactic.* are meant to capture
    the high level category of the threat (e.g. "impact"). The threat.technique.*
    fields are meant to capture which kind of approach is used by this detected threat,
    to accomplish the goal (e.g. "endpoint denial of service").'
  fields:
    framework:
      description: Name of the threat framework used to further categorize and classify
        the tactic and technique of the reported threat. Framework classification
        can be provided by detecting systems, evaluated at ingest time, or retrospectively
        tagged to events.
      type: keyword
    tactic.id:
      description: The id of tactic used by this threat. You can use the Mitre ATT&CK
        Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/tactics/TA0040/
        )
      type: keyword
    tactic.name:
      description: Name of the type of tactic used by this threat. You can use the
        Mitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/tactics/TA0040/
        )
      type: keyword
    tactic.reference:
      description: The reference url of tactic used by this threat. You can use the
        Mitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/tactics/TA0040/
        )
      type: keyword
    technique.id:
      description: The id of technique used by this tactic. You can use the Mitre
        ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/techniques/T1499/
        )
      type: keyword
    technique.name:
      description: The name of technique used by this tactic. You can use the Mitre
        ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/techniques/T1499/
        )
      type: keyword
    technique.reference:
      description: The reference url of technique used by this tactic. You can use
        the Mitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/techniques/T1499/
        )
      type: keyword
  group: 2
  name: threat
  prefix: threat.
  short: Fields to classify events and alerts according to a threat taxonomy.
  title: Threat
  type: group
user:
  description: 'The user fields describe information about the user that is relevant
    to the event.

    Fields can have one entry or multiple entries. If a user has more than one id,
    provide an array that includes all of them.'
  fields:
    domain:
      description: 'Name of the directory the user is a member of.

        For example, an LDAP or Active Directory domain name.'
      type: keyword
    email:
      description: User email address.
      type: keyword
    full_name:
      description: User's full name, if available.
      type: keyword
    hash:
      description: 'Unique user hash to correlate information for a user in anonymized
        form.

        Useful if `user.id` or `user.name` contain confidential information and cannot
        be used.'
      type: keyword
    id:
      description: Unique identifiers of the user.
      type: keyword
    name:
      description: Short name or login of the user.
      type: keyword
  group: 2
  name: user
  nestings:
  - group
  prefix: user.
  reusable:
    expected:
    - client
    - destination
    - host
    - server
    - source
    top_level: true
  short: Fields to describe the user relevant to the event.
  title: User
  type: group
